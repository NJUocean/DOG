        -:    0:Source:711.c
        -:    0:Graph:711.gcno
        -:    0:Data:711.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:static volatile int32_t g_20[3][5][4] = {{{0x6D6DBC1CL, 0x2AA9DADEL, 0x6D6DBC1CL, 0x6D6DBC1CL}, {0x2AA9DADEL, 0x2AA9DADEL, (-1L), 0x2AA9DADEL}, {0x2AA9DADEL, 0x6D6DBC1CL, 0x6D6DBC1CL, 0x2AA9DADEL}, {0x6D6DBC1CL, 0x2AA9DADEL, 0x6D6DBC1CL, 0x6D6DBC1CL}, {0x2AA9DADEL, 0x2AA9DADEL, (-1L), 0x2AA9DADEL}}, {{0x2AA9DADEL, 0x6D6DBC1CL, 0x6D6DBC1CL, 0x2AA9DADEL}, {0x6D6DBC1CL, 0x2AA9DADEL, 0x6D6DBC1CL, 0x6D6DBC1CL}, {0x2AA9DADEL, 0x2AA9DADEL, (-1L), 0x2AA9DADEL}, {0x2AA9DADEL, 0x6D6DBC1CL, 0x6D6DBC1CL, 0x2AA9DADEL}, {0x6D6DBC1CL, 0x2AA9DADEL, 0x6D6DBC1CL, 0x6D6DBC1CL}}, {{0x2AA9DADEL, 0x2AA9DADEL, (-1L), 0x2AA9DADEL}, {0x2AA9DADEL, 0x6D6DBC1CL, (-1L), 0x6D6DBC1CL}, {(-1L), 0x6D6DBC1CL, (-1L), (-1L)}, {0x6D6DBC1CL, 0x6D6DBC1CL, 0x2AA9DADEL, 0x6D6DBC1CL}, {0x6D6DBC1CL, (-1L), (-1L), 0x6D6DBC1CL}}};
        -:    7:static int32_t g_23 = 0L;
        -:    8:static int32_t g_24 = (-1L);
        -:    9:static uint64_t g_27[3][4][4] = {{{18446744073709551615UL, 18446744073709551615UL, 18446744073709551615UL, 0xA2E71CC545E2138BLL}, {18446744073709551613UL, 18446744073709551615UL, 0UL, 9UL}, {0x260E2EFE8E60A2FCLL, 0UL, 0xA2E71CC545E2138BLL, 0UL}, {0xA2E71CC545E2138BLL, 0UL, 0x260E2EFE8E60A2FCLL, 9UL}},
        -:   10:                                 {{0UL, 18446744073709551615UL, 18446744073709551613UL, 0xA2E71CC545E2138BLL}, {18446744073709551615UL, 18446744073709551615UL, 18446744073709551615UL, 18446744073709551615UL}, {18446744073709551615UL, 9UL, 18446744073709551613UL, 0xD0EE3B00B7228D02LL}, {0UL, 18446744073709551615UL, 0x260E2EFE8E60A2FCLL, 0UL}},
        -:   11:                                 {{0xA2E71CC545E2138BLL, 0x9CDE30ECA6D786FFLL, 0xA2E71CC545E2138BLL, 0UL}, {0x260E2EFE8E60A2FCLL, 18446744073709551615UL, 0UL, 0xD0EE3B00B7228D02LL}, {18446744073709551613UL, 9UL, 18446744073709551615UL, 18446744073709551615UL}, {18446744073709551615UL, 18446744073709551615UL, 18446744073709551615UL, 0xA2E71CC545E2138BLL}}};
        -:   12:static uint16_t g_31 = 0x30E9L;
        -:   13:static int16_t g_32 = 6L;
        -:   14:static int8_t g_37 = (-2L);
        -:   15:static const int32_t **const volatile g_58 = (void *)0;
        -:   16:static const int32_t *g_60 = &g_24;
        -:   17:static const int32_t **volatile g_59 = &g_60;
        -:   18:static uint64_t g_74 = 6UL;
        -:   19:
        -:   20:static int32_t func_1(void);
        -:   21:static const uint8_t func_12(uint16_t p_13, const int8_t p_14, uint16_t p_15, int32_t p_16);
        -:   22:
        1:   23:static int32_t func_1(void) {
        1:   24:  uint64_t l_8 = 18446744073709551610UL;
        1:   25:  const uint32_t l_19 = 0xB61B583DL;
        1:   26:  int32_t *l_21 = (void *)0;
        1:   27:  int32_t *l_22 = &g_23;
        1:   28:  uint64_t *l_25 = (void *)0;
        1:   29:  uint64_t *l_26 = &g_27[0][2][0];
        1:   30:  uint32_t l_28 = 0xB3333DB9L;
        1:   31:  uint16_t *l_29 = (void *)0;
        -:   32:  uint16_t *l_30[5][1];
        1:   33:  int8_t l_33 = 0x3AL;
        1:   34:  int32_t **l_61 = (void *)0;
        1:   35:  int32_t l_63 = 0L;
        1:   36:  int32_t l_73[2][3] = {{5L, 3L, 5L}, {5L, 3L, 5L}};
        -:   37:  int i, j;
        6:   38:  for (i = 0; i < 5; i++) {
       10:   39:    for (j = 0; j < 1; j++)
        5:   40:      l_30[i][j] = &g_31;
        -:   41:  }
       1*:   42:  if ((((((safe_rshift_func_int32_t_s_u((safe_sub_func_uint32_t_u_u(((safe_add_func_uint16_t_u_u(l_8, 0x8D0DL)) ^ ((safe_div_func_uint32_t_u_u(((+(3UL >= func_12(l_8, ((safe_add_func_int16_t_s_s(l_19, (g_32 &= (g_31 |= (g_20[2][1][3], (((*l_22) = g_20[2][1][3]) & (((*l_26) ^= (((9UL ^ (((void *)0 != l_22) ^ 0x446BD29A2A67F6A1LL)) ^ 0xD711A53FL), g_24)) == l_28))))))) && (*l_22)), l_33, g_24))), 4294967287UL), g_24)) && g_31)), g_24)), g_24)), 0x96AADB6CL) ^ (-1L)) < l_19) < 65535UL)) {
        1:   43:    int32_t **l_53 = &l_21;
        1:   44:    (*l_53) = l_22;
        -:   45:  } else {
        -:   46:    const int8_t l_54 = (-2L);
        -:   47:    const uint32_t *l_56[2];
        -:   48:    int i;
        -:   49:    for (i = 0; i < 2; i++)
        -:   50:      l_56[i] = &l_19;
        -:   51:    if (l_54) {
        -:   52:      for (l_28 = 0; (l_28 <= 2); l_28 += 1) {
        -:   53:        int8_t l_55[5][1][5] = {{{0x26L, 1L, 0x26L, 0x26L, 1L}}, {{9L, 0x28L, 0x28L, 9L, 0x28L}}, {{1L, 1L, 0x37L, 1L, 1L}}, {{0x28L, 9L, 0x28L, 0x28L, 9L}}, {{1L, 0x26L, 0x26L, 1L, 0x26L}}};
        -:   54:        int i, j, k;
        -:   55:        (*l_22) = ((18446744073709551607UL >= g_31), l_55[3][0][3]);
        -:   56:      }
        -:   57:    } else {
        -:   58:      int32_t *l_57 = &g_24;
        -:   59:      if (((*l_57) |= ((*l_22) |= (g_31 >= (l_56[0] != (void *)0))))) {
        -:   60:        (*g_59) = l_56[0];
        -:   61:        l_61 = &l_57;
        -:   62:      } else {
        -:   63:        (*l_57) = 0x569F1341L;
        -:   64:      }
        -:   65:      g_23 &= (*l_57);
        -:   66:    }
        -:   67:  }
        2:   68:  for (g_24 = 0; (g_24 >= 0); g_24 -= 1) {
        -:   69:    uint32_t l_62[1][4];
        -:   70:    int i, j;
        2:   71:    for (i = 0; i < 1; i++) {
        5:   72:      for (j = 0; j < 4; j++)
        4:   73:        l_62[i][j] = 0x1C30C3E4L;
        -:   74:    }
        1:   75:    (*g_59) = (*g_59);
        1:   76:    (*l_22) |= l_62[0][1];
        2:   77:    for (l_8 = 0; (l_8 <= 0); l_8 += 1) {
        1:   78:      int32_t l_64 = 0xB5832643L;
        1:   79:      int32_t l_66 = 3L;
        1:   80:      int32_t l_69 = (-7L);
        1:   81:      if (((*l_22) = (*g_60))) {
    #####:   82:        int32_t *l_65 = &g_23;
    #####:   83:        int32_t *l_67 = &l_66;
    #####:   84:        int32_t *l_68 = &l_64;
    #####:   85:        int32_t *l_70 = &l_66;
    #####:   86:        int32_t *l_71 = &l_63;
        -:   87:        int32_t *l_72[3];
        -:   88:        int i;
    #####:   89:        for (i = 0; i < 3; i++)
    #####:   90:          l_72[i] = &l_66;
    #####:   91:        g_74++;
        -:   92:      } else {
        1:   93:        (*l_22) = (*g_60);
        1:   94:        g_23 = (safe_lshift_func_int8_t_s_u(l_66, 6));
        -:   95:      }
       1*:   96:      for (g_74 = 0; (g_74 <= 0); g_74 += 1) {
        -:   97:        int i, j, k;
        1:   98:        if (g_20[(g_24 + 2)][(g_24 + 1)][l_8])
        1:   99:          break;
        -:  100:      }
        -:  101:    }
        -:  102:  }
        1:  103:  return (*l_22);
        -:  104:}
        -:  105:
        1:  106:static const uint8_t func_12(uint16_t p_13, const int8_t p_14, uint16_t p_15, int32_t p_16) {
        1:  107:  int64_t l_35 = 1L;
        1:  108:  int8_t *l_36 = &g_37;
        -:  109:  uint32_t *l_48[5];
        1:  110:  int32_t l_49 = 6L;
        1:  111:  uint8_t l_50 = 0x0CL;
        1:  112:  int64_t l_51 = 0xAFB12B2C9D536C3ALL;
        1:  113:  const int32_t l_52 = 0xA97593EBL;
        -:  114:  int i;
        6:  115:  for (i = 0; i < 5; i++)
        5:  116:    l_48[i] = (void *)0;
       1*:  117:  if (((((((((safe_unary_minus_func_int8_t_s(((*l_36) = l_35))) || ((*l_36) &= (safe_lshift_func_uint16_t_u_u(((safe_unary_minus_func_int32_t_s(g_20[2][4][1])) ^ (((1L > (!g_24)) & (l_49 = (safe_sub_func_uint8_t_u_u((safe_div_func_int64_t_s_s((safe_add_func_uint64_t_u_u(((&g_27[2][1][1] != &g_27[0][1][2]) >= 0x6A3C8FCBD0D794A3LL), ((l_35 == p_15) | 0x1887L))), l_35)), p_13)))) > l_50)), 15)))), l_50), (void *)0) == &g_27[2][2][1]), (void *)0) == &p_13), l_51)) {
        1:  118:    return l_52;
        -:  119:  } else {
    #####:  120:    return l_52;
        -:  121:  }
        -:  122:}
        -:  123:
        1:  124:int main(int argc, char *argv[]) {
        -:  125:  int i, j, k;
        1:  126:  int print_hash_value = 0;
       1*:  127:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  128:    print_hash_value = 1;
        1:  129:  platform_main_begin();
        1:  130:  crc32_gentab();
        1:  131:  func_1();
        4:  132:  for (i = 0; i < 3; i++) {
       18:  133:    for (j = 0; j < 5; j++) {
       75:  134:      for (k = 0; k < 4; k++) {
       60:  135:        transparent_crc(g_20[i][j][k], "g_20[i][j][k]", print_hash_value);
       60:  136:        if (print_hash_value)
    #####:  137:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  138:      }
        -:  139:    }
        -:  140:  }
        1:  141:  transparent_crc(g_23, "g_23", print_hash_value);
        1:  142:  transparent_crc(g_24, "g_24", print_hash_value);
        4:  143:  for (i = 0; i < 3; i++) {
       15:  144:    for (j = 0; j < 4; j++) {
       60:  145:      for (k = 0; k < 4; k++) {
       48:  146:        transparent_crc(g_27[i][j][k], "g_27[i][j][k]", print_hash_value);
       48:  147:        if (print_hash_value)
    #####:  148:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  149:      }
        -:  150:    }
        -:  151:  }
        1:  152:  transparent_crc(g_31, "g_31", print_hash_value);
        1:  153:  transparent_crc(g_32, "g_32", print_hash_value);
        1:  154:  transparent_crc(g_37, "g_37", print_hash_value);
        1:  155:  transparent_crc(g_74, "g_74", print_hash_value);
        1:  156:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  157:  return 0;
        -:  158:}
