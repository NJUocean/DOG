        -:    0:Source:957.c
        -:    0:Graph:957.gcno
        -:    0:Data:957.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:static int8_t g_6 = 0x09L;
        -:    7:static int16_t g_10 = 0L;
        -:    8:static int16_t *g_14 = (void *)0;
        -:    9:static int32_t g_16 = 0x3FFAF072L;
        -:   10:static int32_t g_20 = 0xC0E3E763L;
        -:   11:static int32_t g_22 = 0xA9DADE66L;
        -:   12:static uint16_t g_25 = 0xAE4FL;
        -:   13:static uint64_t g_33[3][5] = {{0x36CEDDA5659CDE30LL, 0x36CEDDA5659CDE30LL, 0x36CEDDA5659CDE30LL, 0x36CEDDA5659CDE30LL, 0x36CEDDA5659CDE30LL}, {0x291260E2EFE8E60ALL, 0UL, 0x291260E2EFE8E60ALL, 0UL, 0x291260E2EFE8E60ALL}, {0x36CEDDA5659CDE30LL, 0x36CEDDA5659CDE30LL, 0x36CEDDA5659CDE30LL, 0x36CEDDA5659CDE30LL, 0x36CEDDA5659CDE30LL}};
        -:   14:static uint64_t g_46 = 0x678D5680A2560131LL;
        -:   15:static int8_t g_48 = 0xD2L;
        -:   16:
        -:   17:static uint32_t func_1(void);
        -:   18:static uint64_t func_11(int16_t *p_12, int16_t *p_13);
        -:   19:
        1:   20:static uint32_t func_1(void) {
        1:   21:  int16_t *l_9 = &g_10;
        1:   22:  int16_t l_23 = 0xA167L;
        1:   23:  uint16_t *l_24[5][1][3] = {{{(void *)0, &g_25, (void *)0}}, {{(void *)0, &g_25, &g_25}}, {{&g_25, (void *)0, (void *)0}}, {{&g_25, (void *)0, &g_25}}, {{&g_25, &g_25, &g_25}}};
        1:   24:  uint64_t *l_45 = &g_46;
        1:   25:  int32_t *l_56 = &g_16;
        -:   26:  int i, j, k;
        1:   27:  if ((safe_add_func_int16_t_s_s(1L, (safe_mod_func_uint16_t_u_u((g_25 = (g_6 > ((safe_div_func_int16_t_s_s(g_6, ((*l_9) = g_6))) ^ (func_11(l_9, g_14) | (l_23 && ((l_23, g_6) != 0x234AC019L)))))), l_23))))) {
        1:   28:    uint64_t *l_32 = &g_33[2][2];
        1:   29:    int32_t *l_36 = &g_22;
        1:   30:    uint16_t l_47 = 65535UL;
        1:   31:    g_48 ^= (safe_mul_func_uint16_t_u_u(((((safe_mul_func_uint16_t_u_u(((*l_36) = (safe_mul_func_uint32_t_u_u((((g_20 != ((*l_32)--)), l_36) != (void *)0), (((((*l_36), (g_25 >= (-5L))) <= ((safe_mod_func_int16_t_s_s((safe_sub_func_uint8_t_u_u((safe_rshift_func_int8_t_s_s(((safe_mul_func_int64_t_s_s(((void *)0 != l_45), 0xB3333DB9622CFB64LL)) <= l_23), 1)), 0xE8L)), (*l_36))) <= g_46)) == (*l_36)) | l_23)))), 0x65E1L)) > g_16), (*l_36)) != l_47), g_20));
        -:   32:  } else {
    #####:   33:    return g_48;
        -:   34:  }
        4:   35:  for (g_20 = 0; (g_20 != (-24)); g_20 = safe_sub_func_int8_t_s_s(g_20, 8)) {
        3:   36:    int32_t *const l_55 = &g_20;
        9:   37:    for (g_22 = 0; (g_22 != (-10)); g_22 = safe_sub_func_uint64_t_u_u(g_22, 5)) {
        6:   38:      int32_t *l_54 = &g_22;
        6:   39:      int32_t **l_53 = &l_54;
        6:   40:      (*l_53) = &g_16;
        -:   41:    }
        3:   42:    l_56 = l_55;
        -:   43:  }
        1:   44:  return (*l_56);
        -:   45:}
        -:   46:
        1:   47:static uint64_t func_11(int16_t *p_12, int16_t *p_13) {
        1:   48:  const int32_t *l_15 = (void *)0;
        1:   49:  l_15 = l_15;
        1:   50:  for (g_16 = (-27); (g_16 == 27); g_16 = safe_add_func_uint8_t_u_u(g_16, 5)) {
    #####:   51:    int32_t *l_19 = &g_20;
    #####:   52:    int32_t *l_21 = &g_22;
    #####:   53:    (*l_21) = ((*l_19) = g_16);
    #####:   54:    return g_22;
        -:   55:  }
        1:   56:  return g_6;
        -:   57:}
        -:   58:
        1:   59:int main(int argc, char *argv[]) {
        -:   60:  int i, j;
        1:   61:  int print_hash_value = 0;
       1*:   62:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   63:    print_hash_value = 1;
        1:   64:  platform_main_begin();
        1:   65:  crc32_gentab();
        1:   66:  func_1();
        1:   67:  transparent_crc(g_6, "g_6", print_hash_value);
        1:   68:  transparent_crc(g_10, "g_10", print_hash_value);
        1:   69:  transparent_crc(g_16, "g_16", print_hash_value);
        1:   70:  transparent_crc(g_20, "g_20", print_hash_value);
        1:   71:  transparent_crc(g_22, "g_22", print_hash_value);
        1:   72:  transparent_crc(g_25, "g_25", print_hash_value);
        4:   73:  for (i = 0; i < 3; i++) {
       18:   74:    for (j = 0; j < 5; j++) {
       15:   75:      transparent_crc(g_33[i][j], "g_33[i][j]", print_hash_value);
       15:   76:      if (print_hash_value)
    #####:   77:        printf("index = [%d][%d]\n", i, j);
        -:   78:    }
        -:   79:  }
        1:   80:  transparent_crc(g_46, "g_46", print_hash_value);
        1:   81:  transparent_crc(g_48, "g_48", print_hash_value);
        1:   82:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:   83:  return 0;
        -:   84:}
