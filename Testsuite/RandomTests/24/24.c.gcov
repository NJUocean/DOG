        -:    0:Source:24.c
        -:    0:Graph:24.gcno
        -:    0:Data:24.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:union U0 {
        -:    7:  unsigned f0 : 29;
        -:    8:  volatile int16_t f1;
        -:    9:  uint32_t f2;
        -:   10:};
        -:   11:
        -:   12:static volatile uint16_t g_15 = 65535UL;
        -:   13:static int64_t g_16[4] = {1L, 1L, 1L, 1L};
        -:   14:static int64_t g_23[1][5] = {{0x973063D62A04F777LL, 0x973063D62A04F777LL, 0x973063D62A04F777LL, 0x973063D62A04F777LL, 0x973063D62A04F777LL}};
        -:   15:static uint64_t g_32[3] = {0x138B36CEDDA5659CLL, 0x138B36CEDDA5659CLL, 0x138B36CEDDA5659CLL};
        -:   16:static int32_t g_37 = 0xE93046AAL;
        -:   17:static volatile int32_t g_40 = 1L;
        -:   18:static volatile int32_t g_41 = (-3L);
        -:   19:static volatile int32_t g_42 = 1L;
        -:   20:static volatile int32_t g_43 = 0x355901A7L;
        -:   21:static int32_t g_44 = 0xB9FE29F1L;
        -:   22:static union U0 g_66 = {1UL};
        -:   23:static int32_t g_75 = (-6L);
        -:   24:static uint16_t g_102 = 1UL;
        -:   25:static int8_t g_103 = 0xA0L;
        -:   26:
        -:   27:static uint64_t func_1(void);
        -:   28:static uint32_t func_4(uint32_t p_5, int32_t p_6, int16_t p_7);
        -:   29:
        1:   30:static uint64_t func_1(void) {
        -:   31:  int32_t l_8[1][1];
        1:   32:  int32_t l_19 = 0xACB8F2BAL;
        1:   33:  int32_t *l_39[5][3] = {{(void *)0, &g_37, &g_37}, {&g_37, &l_19, (void *)0}, {(void *)0, &l_19, (void *)0}, {(void *)0, &g_37, (void *)0}, {(void *)0, (void *)0, &g_37}};
        1:   34:  uint64_t *l_106[5] = {&g_32[1], &g_32[1], &g_32[1], &g_32[1], &g_32[1]};
        1:   35:  uint64_t **l_105 = &l_106[1];
        1:   36:  uint64_t ***l_104 = &l_105;
        -:   37:  int i, j;
        2:   38:  for (i = 0; i < 1; i++) {
        2:   39:    for (j = 0; j < 1; j++)
        1:   40:      l_8[i][j] = 1L;
        -:   41:  }
        1:   42:  g_40 = ((((-1L) > 0x8311L) && (safe_mod_func_uint16_t_u_u((func_4(l_8[0][0], (safe_div_func_int16_t_s_s(l_8[0][0], (l_19 |= ((safe_mul_func_int32_t_s_s(l_8[0][0], (safe_mod_func_int8_t_s_s((g_15 & g_16[1]), l_8[0][0])))) != ((safe_sub_func_int16_t_s_s(g_16[1], (-7L))) == (-6L)))))), l_8[0][0]) < l_8[0][0]), l_8[0][0]))), (-4L));
        2:   43:  for (l_19 = 0; (l_19 <= 0); l_19 += 1) {
        1:   44:    uint8_t l_70 = 0x39L;
        1:   45:    uint64_t *l_71 = &g_32[0];
        1:   46:    int32_t l_81 = 7L;
        -:   47:    int64_t l_97[1][2][5];
        -:   48:    int i, j, k;
        2:   49:    for (i = 0; i < 1; i++) {
        3:   50:      for (j = 0; j < 2; j++) {
       12:   51:        for (k = 0; k < 5; k++)
       10:   52:          l_97[i][j][k] = (-8L);
        -:   53:      }
        -:   54:    }
        4:   55:    for (g_37 = 0; (g_37 <= 2); g_37 += 1) {
        3:   56:      int32_t *l_64 = &l_19;
        3:   57:      uint8_t l_72 = 0xC6L;
        -:   58:      int32_t l_96[4];
        3:   59:      int16_t l_100 = 0x235EL;
        -:   60:      int i;
       15:   61:      for (i = 0; i < 4; i++)
       12:   62:        l_96[i] = 0xD4ADD7D5L;
       12:   63:      for (g_44 = 2; (g_44 >= 0); g_44 -= 1) {
        9:   64:        uint64_t *l_63 = &g_32[0];
        9:   65:        uint64_t **l_62 = &l_63;
        9:   66:        int32_t **l_65 = &l_39[(g_44 + 2)][(l_19 + 2)];
        9:   67:        int8_t l_73[5] = {0xBFL, 0xBFL, 0xBFL, 0xBFL, 0xBFL};
        9:   68:        int32_t *l_74 = &g_75;
        -:   69:        int i, j;
       9*:   70:        (*l_74) &= ((safe_add_func_uint16_t_u_u((l_8[l_19][l_19] & (((((safe_rshift_func_uint32_t_u_u(((safe_lshift_func_int32_t_s_s((~0x672CL), 5)) | (!(g_23[0][1] > (safe_rshift_func_int32_t_s_s((~((safe_sub_func_uint32_t_u_u(((safe_mod_func_int16_t_s_s((safe_mul_func_int8_t_s_s((((((((*l_62) = (void *)0) != (((((*l_65) = l_64) != (g_66, l_64)) || (safe_mul_func_int32_t_s_s(((g_66.f0, (((((!((void *)0 == &g_32[2])) || g_23[0][2]) > g_40) != l_70) | g_16[1])) >= g_23[0][2]), g_32[1]))), l_71)) & g_32[2]), g_23[0][2]) | g_23[0][2]), 8L), 0UL)), 0xE333L)) & 0L), l_72)) == 18446744073709551615UL)), 2))))), l_73[3])), g_66.f0) <= 0x7513D964400D43E6LL) < 0xC5DEL) == 0x0BL)), 0x0A87L)), (*l_64));
        -:   71:      }
        6:   72:      for (g_44 = 0; (g_44 >= 0); g_44 -= 1) {
        -:   73:        int32_t l_76[2];
        3:   74:        uint16_t *l_101 = &g_102;
        -:   75:        int i, j;
        9:   76:        for (i = 0; i < 2; i++)
        6:   77:          l_76[i] = 0xDB8BE448L;
        3:   78:        l_76[1] |= (g_75 = l_8[l_19][l_19]);
       3*:   79:        g_103 &= ((safe_sub_func_uint8_t_u_u((safe_lshift_func_uint16_t_u_u((l_76[1] && l_81), (safe_add_func_int64_t_s_s((*l_64), ((safe_add_func_int16_t_s_s((safe_mod_func_uint16_t_u_u((safe_div_func_int8_t_s_s(g_23[0][2], (safe_mod_func_uint16_t_u_u((((*l_101) = ((((safe_mod_func_int64_t_s_s(((safe_mul_func_uint32_t_u_u(l_96[0], (((((((l_97[0][0][4] ^ l_97[0][0][4]) | ((safe_div_func_int16_t_s_s(0x0D8CL, (-10L))) <= (*l_64))) < l_100), 1UL) & g_16[1]) != g_16[1]) == g_32[0]))) != g_42), (*l_64))) || g_75) && (*l_64)) ^ (*l_64))) | g_23[0][2]), g_23[0][2])))), g_23[0][3])), g_23[0][0])) | g_32[0]))))), g_32[2])) & l_70);
        -:   80:      }
        -:   81:    }
        1:   82:    l_104 = (void *)0;
        -:   83:  }
        1:   84:  return g_75;
        -:   85:}
        -:   86:
    #####:   87:static uint32_t func_4(uint32_t p_5, int32_t p_6, int16_t p_7) {
        -:   88:  uint64_t *const l_31[3] = {&g_32[0], &g_32[0], &g_32[0]};
        -:   89:  int16_t l_35[4];
        -:   90:  int i;
    #####:   91:  for (i = 0; i < 4; i++)
    #####:   92:    l_35[i] = 5L;
    #####:   93:  for (p_7 = (-6); (p_7 <= (-17)); p_7 = safe_sub_func_int8_t_s_s(p_7, 1)) {
        -:   94:    uint64_t *l_22[1];
    #####:   95:    int32_t *l_36 = &g_37;
    #####:   96:    int32_t **l_38 = &l_36;
        -:   97:    int i;
    #####:   98:    for (i = 0; i < 1; i++)
    #####:   99:      l_22[i] = (void *)0;
    #####:  100:    (*l_38) = (((g_23[0][2] = 0UL), (safe_rshift_func_uint64_t_u_s(p_7, ((safe_sub_func_int32_t_s_s((((g_16[1] | 0UL) ^ (safe_unary_minus_func_uint64_t_u((safe_rshift_func_uint64_t_u_u(((void *)0 != l_31[2]), (safe_lshift_func_int32_t_s_u(((*l_36) = (6L <= l_35[1])), 29))))))) != (-1L)), p_5)) ^ (-10L))))), (void *)0);
        -:  101:  }
    #####:  102:  return p_6;
        -:  103:}
        -:  104:
        1:  105:int main(int argc, char *argv[]) {
        -:  106:  int i, j;
        1:  107:  int print_hash_value = 0;
       1*:  108:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  109:    print_hash_value = 1;
        1:  110:  platform_main_begin();
        1:  111:  crc32_gentab();
        1:  112:  func_1();
        1:  113:  transparent_crc(g_15, "g_15", print_hash_value);
        5:  114:  for (i = 0; i < 4; i++) {
        4:  115:    transparent_crc(g_16[i], "g_16[i]", print_hash_value);
        4:  116:    if (print_hash_value)
    #####:  117:      printf("index = [%d]\n", i);
        -:  118:  }
        2:  119:  for (i = 0; i < 1; i++) {
        6:  120:    for (j = 0; j < 5; j++) {
        5:  121:      transparent_crc(g_23[i][j], "g_23[i][j]", print_hash_value);
        5:  122:      if (print_hash_value)
    #####:  123:        printf("index = [%d][%d]\n", i, j);
        -:  124:    }
        -:  125:  }
        4:  126:  for (i = 0; i < 3; i++) {
        3:  127:    transparent_crc(g_32[i], "g_32[i]", print_hash_value);
        3:  128:    if (print_hash_value)
    #####:  129:      printf("index = [%d]\n", i);
        -:  130:  }
        1:  131:  transparent_crc(g_37, "g_37", print_hash_value);
        1:  132:  transparent_crc(g_40, "g_40", print_hash_value);
        1:  133:  transparent_crc(g_41, "g_41", print_hash_value);
        1:  134:  transparent_crc(g_42, "g_42", print_hash_value);
        1:  135:  transparent_crc(g_43, "g_43", print_hash_value);
        1:  136:  transparent_crc(g_44, "g_44", print_hash_value);
        1:  137:  transparent_crc(g_66.f0, "g_66.f0", print_hash_value);
        1:  138:  transparent_crc(g_75, "g_75", print_hash_value);
        1:  139:  transparent_crc(g_102, "g_102", print_hash_value);
        1:  140:  transparent_crc(g_103, "g_103", print_hash_value);
        1:  141:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  142:  return 0;
        -:  143:}
