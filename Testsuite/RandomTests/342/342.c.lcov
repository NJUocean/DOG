/root/TSE2022/testsuite/RTEF/342/342.c:
    1|       |// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
    2|       |#include "csmith.h"
    3|       |
    4|       |static long __undefined;
    5|       |
    6|       |static uint16_t g_9 = 0xC61CL;
    7|       |static int32_t g_15 = (-3L);
    8|       |static uint16_t g_17 = 0x1B58L;
    9|       |static int32_t *g_26[4][2] = {{&g_15, &g_15}, {&g_15, &g_15}, {&g_15, &g_15}, {&g_15, &g_15}};
   10|       |static int32_t **volatile g_25[4][2][2] = {{{&g_26[2][0], &g_26[0][0]}, {&g_26[0][0], &g_26[2][0]}}, {{&g_26[0][0], &g_26[0][0]}, {&g_26[0][0], &g_26[2][0]}}, {{&g_26[0][0], &g_26[0][0]}, {&g_26[2][0], &g_26[0][0]}}, {{&g_26[0][0], &g_26[0][0]}, {&g_26[2][0], &g_26[0][0]}}};
   11|       |static int32_t **volatile g_27[5] = {&g_26[0][0], &g_26[0][0], &g_26[0][0], &g_26[0][0], &g_26[0][0]};
   12|       |static int32_t *volatile g_42 = (void *)0;
   13|       |static volatile int32_t g_52[3] = {0L, 0L, 0L};
   14|       |static uint64_t g_60 = 0UL;
   15|       |static int8_t g_61 = 0xE6L;
   16|       |static uint32_t g_63 = 4294967287UL;
   17|       |static const int16_t g_64 = (-8L);
   18|       |static volatile int32_t **g_70 = (void *)0;
   19|       |static uint32_t g_87 = 0xF13F3F2CL;
   20|       |static uint8_t g_95[5] = {1UL, 1UL, 1UL, 1UL, 1UL};
   21|       |static int64_t g_100[3][5] = {{0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL}, {0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL}, {0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL, 0x253ABC15DB8BE448LL}};
   22|       |static uint8_t g_117 = 0x96L;
   23|       |static int32_t *volatile g_120 = (void *)0;
   24|       |static int32_t g_122 = (-9L);
   25|       |static int32_t *volatile g_121 = &g_122;
   26|       |static int64_t *g_127 = &g_100[2][0];
   27|       |static int64_t **g_126 = &g_127;
   28|       |static int64_t ***g_125[2][4][1] = {{{(void *)0}, {&g_126}, {(void *)0}, {&g_126}}, {{(void *)0}, {&g_126}, {(void *)0}, {&g_126}}};
   29|       |static uint16_t g_139[4][3][1] = {{{1UL}, {0UL}, {1UL}}, {{0UL}, {1UL}, {0UL}}, {{1UL}, {0UL}, {1UL}}, {{0UL}, {1UL}, {0UL}}};
   30|       |static uint32_t g_163 = 0x73A16DF6L;
   31|       |static const volatile int64_t *volatile **volatile *volatile *g_176 = (void *)0;
   32|       |static int32_t g_186[5][1] = {{9L}, {0x68E68720L}, {9L}, {0x68E68720L}, {9L}};
   33|       |static int64_t *const **g_195[2][2] = {{(void *)0, (void *)0}, {(void *)0, (void *)0}};
   34|       |static int64_t ***g_196 = &g_126;
   35|       |
   36|       |static int8_t func_1(void);
   37|       |static int8_t func_2(int32_t p_3, int64_t p_4, int16_t p_5);
   38|       |
   39|      1|static int8_t func_1(void) {
   40|      1|  uint32_t l_8 = 0x1738AB65L;
   41|      1|  int32_t *l_14 = &g_15;
   42|      1|  uint16_t *l_16 = &g_17;
   43|      1|  int32_t **l_20 = &l_14;
   44|      1|  int32_t *l_21 = (void *)0;
   45|      1|  int16_t l_22 = 2L;
   46|      1|  int32_t l_23 = 0L;
   47|      1|  uint16_t l_24 = 1UL;
   48|      1|  int32_t l_43 = 1L;
   49|      1|  int32_t *l_71 = &g_15;
   50|      1|  uint32_t l_97 = 0UL;
   51|      1|  int64_t *l_107[2][4][4] = {{{&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}}, {{&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}}};
   52|      1|  uint32_t l_131 = 0x38682D76L;
   53|      1|  int64_t ***l_132[5][1][5] = {{{(void *)0, &g_126, (void *)0, &g_126, (void *)0}}, {{(void *)0, (void *)0, (void *)0, (void *)0, (void *)0}}, {{(void *)0, &g_126, (void *)0, &g_126, (void *)0}}, {{(void *)0, (void *)0, (void *)0, (void *)0, (void *)0}}, {{(void *)0, &g_126, (void *)0, &g_126, (void *)0}}};
   54|      1|  int64_t ****l_133[2];
   55|      1|  int64_t ***l_134 = &g_126;
   56|      1|  int8_t *l_136 = &g_61;
   57|      1|  uint64_t l_160 = 0xDD16BD07DBC3B145LL;
   58|      1|  int64_t *const *l_194 = (void *)0;
   59|      1|  int64_t *const **l_193 = &l_194;
   60|      1|  int i, j, k;
   61|      3|  for (i = 0; i < 2; i++)
   62|      2|    l_133[i] = &l_132[3][0][0];
   63|      1|  if ((0x50L == func_2((safe_rshift_func_int8_t_s_s(l_8, ((l_8 || ((((g_9 < ((safe_sub_func_int32_t_s_s((safe_lshift_func_int64_t_s_u((((*l_16) = (l_8 && ((*l_14) |= g_9))), (safe_add_func_uint32_t_u_u(((((*l_20) = &g_15) == l_21) > 8UL), 0x81720D70L))), g_9)), g_9)), (-5L))) | l_22) <= l_23) && g_15)) & l_24))), g_9, g_9))) {
   64|      0|    uint8_t l_39 = 0x00L;
   65|      0|    int16_t *l_40 = &l_22;
   66|      0|    uint16_t *l_58 = &g_9;
   67|      0|    uint64_t *l_59 = &g_60;
   68|      0|    int32_t l_62 = 0L;
   69|      0|    int32_t *l_65 = &l_43;
   70|      0|    l_43 ^= ((((safe_mod_func_int8_t_s_s(g_17, (safe_unary_minus_func_int8_t_s(((!(safe_sub_func_int8_t_s_s(((((((safe_sub_func_uint16_t_u_u((safe_add_func_uint64_t_u_u((((-1L) | (((*l_40) &= (&l_24 == (l_39, &l_24))), (*l_14))) <= 0x1425452EL), 9L)), (safe_unary_minus_func_int16_t_s((-1L))))) < (**l_20)) <= 1L), (*l_20)) == (void *)0) > 0x3333DB9622CFB647LL), 0xF9L))) <= g_15))))), g_9) ^ (*l_14)) != (**l_20));
   71|      0|    (*l_65) &= ((safe_sub_func_uint64_t_u_u((g_63 = (l_62 = ((safe_div_func_uint64_t_u_u((l_39 | (safe_sub_func_uint8_t_u_u((safe_rshift_func_int64_t_s_s(g_9, (g_52[2] && 0x2DL))), (safe_mul_func_int8_t_s_s((0x33BDL >= (&g_26[1][0] != (void *)0)), ((safe_lshift_func_uint64_t_u_u(((*l_59) = (~((&g_9 == l_58) == (*l_14)))), 42)) || 0xD0D794A3L)))))), l_39)) || g_61))), l_39)), g_64);
   72|      1|  } else {
   73|      1|    int16_t *l_94 = (void *)0;
   74|      1|    int32_t l_96 = 4L;
   75|      1|    int16_t *l_98 = &l_22;
   76|      1|    int64_t *l_99[5][2][5] = {{{&g_100[0][3], &g_100[0][3], &g_100[0][1], &g_100[0][1], &g_100[0][3]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}}, {{&g_100[0][3], &g_100[0][1], &g_100[0][1], &g_100[0][3], &g_100[0][3]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}}, {{&g_100[0][3], &g_100[0][3], &g_100[0][1], &g_100[0][1], &g_100[0][3]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}}, {{&g_100[0][3], &g_100[0][1], &g_100[0][1], &g_100[0][3], &g_100[0][3]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}}, {{&g_100[0][3], &g_100[0][3], &g_100[0][1], &g_100[0][1], &g_100[0][3]}, {&g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1], &g_100[0][1]}}};
   77|      1|    int32_t l_101 = (-1L);
   78|      1|    int32_t **l_103 = (void *)0;
   79|      1|    int32_t ***l_102 = &l_103;
   80|      1|    int64_t **l_124 = &l_99[1][0][3];
   81|      1|    int64_t ***l_123 = &l_124;
   82|      1|    int i, j, k;
   83|      1|  lbl_128:
   84|      1|    (*l_14) = 0xC2FCEC4EL;
   85|      1|    if ((((safe_rshift_func_uint32_t_u_s((((safe_mul_func_uint8_t_u_u((g_70 == ((*l_102) = (l_20 = ((l_71 != (((+(safe_mul_func_uint8_t_u_u(255UL, 0UL))), (safe_mod_func_int8_t_s_s((((**l_20) = 6L) == (safe_mod_func_int64_t_s_s((safe_lshift_func_uint64_t_u_s(((1L >= ((-4L) != ((l_96 = (g_100[0][1] &= (((*l_98) |= (safe_lshift_func_uint16_t_u_u(((safe_div_func_int32_t_s_s(((g_87 = 1L) & (safe_mod_func_uint8_t_u_u((safe_mul_func_int16_t_s_s((safe_div_func_int32_t_s_s(((g_95[2] = (g_63 == 0x18E14F04B5A03F75LL)), 0x9F1341B0L), g_52[1])), l_96)), 0x20L))), l_97)), 65529UL), g_64))) != l_96))) > l_101))), g_64), g_64)), g_17))), g_61))), &l_101)), &l_14)))), g_17)), g_100[2][2]) || g_63), 18)), 0UL) != (-5L))) {
   86|      1|      int32_t l_106 = (-7L);
   87|      1|      int64_t *l_108 = &g_100[2][3];
   88|      1|      int64_t **l_109 = &l_108;
   89|      1|      uint8_t *l_116[3];
   90|      1|      int32_t l_118[5][2] = {{0xE576ABB3L, 0xE576ABB3L}, {0xE576ABB3L, 0xE576ABB3L}, {0xE576ABB3L, 0xE576ABB3L}, {0xE576ABB3L, 0xE576ABB3L}, {0xE576ABB3L, 0xE576ABB3L}};
   91|      1|      uint16_t l_119[5][5][2] = {{{0xE0CEL, 0x3C3AL}, {0x4ACFL, 0x4ACFL}, {0xDB58L, 65535UL}, {0xA20DL, 0xCEEFL}, {0xA972L, 2UL}}, {{0x3C3AL, 0xA972L}, {0xA929L, 3UL}, {0xA929L, 0xA972L}, {0x3C3AL, 2UL}, {0xA972L, 0xCEEFL}}, {{0xA20DL, 65535UL}, {0xDB58L, 0x4ACFL}, {0x4ACFL, 0x3C3AL}, {0xE0CEL, 0x3C3AL}, {0x4ACFL, 0x4ACFL}}, {{0xDB58L, 65535UL}, {0xA20DL, 0xCEEFL}, {0xA972L, 2UL}, {0x3C3AL, 0xA972L}, {0xA929L, 0xA972L}}, {{0xCEEFL, 0xDB58L}, {0xE0CEL, 0UL}, {0xDB58L, 0x3C3AL}, {0xA929L, 2UL}, {65535UL, 3UL}}};
   92|      1|      int i, j, k;
   93|      4|      for (i = 0; i < 3; i++)
   94|      3|        l_116[i] = &g_117;
   95|      1|      (*g_121) &= (safe_rshift_func_uint16_t_u_u(l_106, (((l_107[0][3][3] == ((*l_109) = l_108)) == (safe_rshift_func_int64_t_s_u(g_100[1][4], (safe_lshift_func_uint8_t_u_s((***l_102), g_95[0]))))) | (safe_mod_func_uint16_t_u_u((((l_106 && (g_61 < ((l_118[2][0] &= (g_117 |= (((***l_102) >= g_63), g_63))) > l_119[4][1][0]))) & 0x3EL) >= (***l_102)), g_17)))));
   96|      1|      g_125[1][1][0] = l_123;
   97|      1|    } else {
   98|      0|      if (l_8)
   99|      0|        goto lbl_128;
  100|      1|    }
  101|      1|  }
  102|      1|  if (((((safe_lshift_func_int16_t_s_u(l_131, 4)) < ((l_134 = l_132[3][0][0]) == &g_126)) > (*l_71)) < ((((void *)0 == &l_132[3][0][0]) == ((*l_136) |= (!(*l_71)))) <= g_63))) {
  103|      1|    int64_t l_161 = 2L;
  104|      1|    int32_t l_166 = 1L;
  105|      4|    for (l_43 = 2; (l_43 >= 0); l_43 -= 1) {
  106|      3|      int16_t l_164 = 1L;
  107|      3|      const int64_t ***const l_170 = (void *)0;
  108|      3|      const int64_t ***const *l_169 = &l_170;
  109|      3|      const int64_t ***const **l_171 = &l_169;
  110|      3|      int64_t **l_185 = (void *)0;
  111|      3|      int32_t *l_187[4][2][1] = {{{&l_43}, {&l_166}}, {{&l_43}, {&l_166}}, {{&l_43}, {&l_166}}, {{&l_43}, {&l_166}}};
  112|      3|      int32_t **volatile *l_192 = &g_27[2];
  113|      3|      int i, j, k;
  114|     12|      for (g_61 = 0; (g_61 <= 2); g_61 += 1) {
  115|      9|        int64_t *const **l_143 = (void *)0;
  116|      9|        int64_t *const ***l_142 = &l_143;
  117|      9|        int16_t *l_162[2];
  118|      9|        int32_t l_165 = 0x471D0ACDL;
  119|      9|        int i, j;
  120|     27|        for (i = 0; i < 2; i++)
  121|     18|          l_162[i] = &l_22;
  122|      9|        l_166 |= ((g_100[l_43][g_61] <= (safe_lshift_func_uint32_t_u_u(g_139[0][1][0], 20))) && ((safe_add_func_int8_t_s_s((&g_125[1][1][0] == l_142), (safe_add_func_uint32_t_u_u((((((g_139[0][1][0] <= (safe_rshift_func_int64_t_s_s((safe_add_func_int64_t_s_s(((safe_sub_func_int16_t_s_s(g_139[3][2][0], (safe_mul_func_int64_t_s_s(((safe_add_func_int16_t_s_s((g_163 = (safe_add_func_uint64_t_u_u((65528UL <= g_87), ((*g_127) ^= ((safe_mod_func_int16_t_s_s((l_160 < 0xD63D9F3AL), g_17)) == l_161))))), 1L)) >= 0xDB1EL), (*l_14))))), g_100[l_43][g_61]), g_63)), 36))), g_64), g_100[l_43][g_61]), l_164), 0xA899DE23L), l_165)))) >= g_117));
  123|      9|      }
  124|      3|      if ((((safe_add_func_uint32_t_u_u(4294967295UL, 4294967289UL)) < (g_95[2] | ((l_164 <= (((*l_171) = l_169) != &l_132[3][0][0])), (safe_add_func_int8_t_s_s((safe_mul_func_int16_t_s_s((g_186[3][0] = (g_176 != ((safe_rshift_func_int16_t_s_u((safe_mul_func_uint8_t_u_u(((l_185 = ((((((0x7C25DAE8L > (safe_div_func_int16_t_s_s(((safe_add_func_uint8_t_u_u(((l_161 | g_117) > l_161), 0UL)) != 1UL), g_95[2]))) & g_122) != l_164), l_164) || (-1L)), (void *)0)) != (void *)0), 0x39L)), 7)), (void *)0))), 65535UL)), 249UL))))) ^ (-8L))) {
  125|      3|        l_187[2][0][0] = l_187[2][1][0];
  126|      3|        (*l_20) = (*l_20);
  127|      3|      } else {
  128|      0|        uint32_t l_190 = 0xFD5CC310L;
  129|      0|        const int32_t *l_191 = (void *)0;
  130|      0|        (**l_20) ^= (safe_sub_func_int32_t_s_s(0x7A26FF32L, l_190));
  131|      0|        l_191 = l_191;
  132|      0|      }
  133|     18|      for (g_61 = 4; (g_61 >= 0); g_61 -= 1) {
  134|     15|        l_192 = &g_27[1];
  135|     15|        (**l_192) = (*l_20);
  136|     15|      }
  137|      3|    }
  138|      1|  } else {
  139|      0|    (*l_20) = (*l_20);
  140|      0|    (*l_14) = ((g_195[1][0] = l_193) != (g_196 = &g_126));
  141|      0|  }
  142|      1|  return g_64;
  143|      1|}
  144|       |
  145|      1|static int8_t func_2(int32_t p_3, int64_t p_4, int16_t p_5) {
  146|      1|  int32_t **l_28 = &g_26[1][0];
  147|      1|  (*l_28) = &g_15;
  148|      1|  return g_15;
  149|      1|}
  150|       |
  151|      1|int main(int argc, char *argv[]) {
  152|      1|  int i, j, k;
  153|      1|  int print_hash_value = 0;
  154|      1|  if (argc == 2 && strcmp(argv[1], "1") == 0)
  155|      0|    print_hash_value = 1;
  156|      1|  platform_main_begin();
  157|      1|  crc32_gentab();
  158|      1|  func_1();
  159|      1|  transparent_crc(g_9, "g_9", print_hash_value);
  160|      1|  transparent_crc(g_15, "g_15", print_hash_value);
  161|      1|  transparent_crc(g_17, "g_17", print_hash_value);
  162|      4|  for (i = 0; i < 3; i++) {
  163|      3|    transparent_crc(g_52[i], "g_52[i]", print_hash_value);
  164|      3|    if (print_hash_value)
  165|      0|      printf("index = [%d]\n", i);
  166|      3|  }
  167|      1|  transparent_crc(g_60, "g_60", print_hash_value);
  168|      1|  transparent_crc(g_61, "g_61", print_hash_value);
  169|      1|  transparent_crc(g_63, "g_63", print_hash_value);
  170|      1|  transparent_crc(g_64, "g_64", print_hash_value);
  171|      1|  transparent_crc(g_87, "g_87", print_hash_value);
  172|      6|  for (i = 0; i < 5; i++) {
  173|      5|    transparent_crc(g_95[i], "g_95[i]", print_hash_value);
  174|      5|    if (print_hash_value)
  175|      0|      printf("index = [%d]\n", i);
  176|      5|  }
  177|      4|  for (i = 0; i < 3; i++) {
  178|     18|    for (j = 0; j < 5; j++) {
  179|     15|      transparent_crc(g_100[i][j], "g_100[i][j]", print_hash_value);
  180|     15|      if (print_hash_value)
  181|      0|        printf("index = [%d][%d]\n", i, j);
  182|     15|    }
  183|      3|  }
  184|      1|  transparent_crc(g_117, "g_117", print_hash_value);
  185|      1|  transparent_crc(g_122, "g_122", print_hash_value);
  186|      5|  for (i = 0; i < 4; i++) {
  187|     16|    for (j = 0; j < 3; j++) {
  188|     24|      for (k = 0; k < 1; k++) {
  189|     12|        transparent_crc(g_139[i][j][k], "g_139[i][j][k]", print_hash_value);
  190|     12|        if (print_hash_value)
  191|      0|          printf("index = [%d][%d][%d]\n", i, j, k);
  192|     12|      }
  193|     12|    }
  194|      4|  }
  195|      1|  transparent_crc(g_163, "g_163", print_hash_value);
  196|      6|  for (i = 0; i < 5; i++) {
  197|     10|    for (j = 0; j < 1; j++) {
  198|      5|      transparent_crc(g_186[i][j], "g_186[i][j]", print_hash_value);
  199|      5|      if (print_hash_value)
  200|      0|        printf("index = [%d][%d]\n", i, j);
  201|      5|    }
  202|      5|  }
  203|      1|  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
  204|      1|  return 0;
  205|      1|}

/root/TSE2022/testsuite/RTEF/runtime/csmith.h:
    1|       |/* -*- mode: C -*-
    2|       | *
    3|       | * Copyright (c) 2007-2011, 2013, 2014 The University of Utah
    4|       | * All rights reserved.
    5|       | *
    6|       | * This file is part of `csmith', a random generator of C programs.
    7|       | *
    8|       | * Redistribution and use in source and binary forms, with or without
    9|       | * modification, are permitted provided that the following conditions are met:
   10|       | *
   11|       | *   * Redistributions of source code must retain the above copyright notice,
   12|       | *     this list of conditions and the following disclaimer.
   13|       | *
   14|       | *   * Redistributions in binary form must reproduce the above copyright
   15|       | *     notice, this list of conditions and the following disclaimer in the
   16|       | *     documentation and/or other materials provided with the distribution.
   17|       | *
   18|       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   19|       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   20|       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   21|       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   22|       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   23|       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   24|       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   25|       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   26|       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   27|       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   28|       | * POSSIBILITY OF SUCH DAMAGE.
   29|       | */
   30|       |
   31|       |#ifndef RANDOM_RUNTIME_H
   32|       |#define RANDOM_RUNTIME_H
   33|       |
   34|       |#ifdef CSMITH_MINIMAL
   35|       |#include "csmith_minimal.h"
   36|       |#else
   37|       |
   38|       |/*****************************************************************************/
   39|       |
   40|       |#include <string.h>
   41|       |#include <float.h>
   42|       |#include <math.h>
   43|       |
   44|       |#define __STDC_LIMIT_MACROS
   45|       |#include "random_inc.h"
   46|       |
   47|       |static uint32_t crc32_tab[256];
   48|       |static uint32_t crc32_context = 0xFFFFFFFFUL;
   49|       |
   50|       |static void 
   51|       |crc32_gentab (void)
   52|      1|{
   53|      1|	uint32_t crc;
   54|      1|	const uint32_t poly = 0xEDB88320UL;
   55|      1|	int i, j;
   56|      1|	
   57|    257|	for (i = 0; i < 256; i++) {
   58|    256|		crc = i;
   59|  2.30k|		for (j = 8; j > 0; j--) {
   60|  2.04k|			if (crc & 1) {
   61|  1.02k|				crc = (crc >> 1) ^ poly;
   62|  1.02k|			} else {
   63|  1.02k|				crc >>= 1;
   64|  1.02k|			}
   65|  2.04k|		}
   66|    256|		crc32_tab[i] = crc;
   67|    256|	}
   68|      1|}
   69|       |
   70|       |static void 
   71|    408|crc32_byte (uint8_t b) {
   72|    408|	crc32_context = 
   73|    408|		((crc32_context >> 8) & 0x00FFFFFF) ^ 
   74|    408|		crc32_tab[(crc32_context ^ b) & 0xFF];
   75|    408|}
   76|       |
   77|       |#if defined(__SPLAT__) || defined(NO_LONGLONG)
   78|       |static void 
   79|       |crc32_8bytes (uint32_t val)
   80|       |{
   81|       |	crc32_byte ((val>>0) & 0xff);
   82|       |	crc32_byte ((val>>8) & 0xff);
   83|       |	crc32_byte ((val>>16) & 0xff);
   84|       |	crc32_byte ((val>>24) & 0xff);
   85|       |}
   86|       |
   87|       |static void 
   88|       |transparent_crc (uint32_t val, char* vname, int flag)
   89|       |{
   90|       |	crc32_8bytes(val);
   91|       |	if (flag) {
   92|       |  		printf("...checksum after hashing %s : %X\n", vname, crc32_context ^ 0xFFFFFFFFU);
   93|       |	}
   94|       |}
   95|       |#else
   96|       |static void 
   97|       |crc32_8bytes (uint64_t val)
   98|     51|{
   99|     51|	crc32_byte ((val>>0) & 0xff);
  100|     51|	crc32_byte ((val>>8) & 0xff);
  101|     51|	crc32_byte ((val>>16) & 0xff);
  102|     51|	crc32_byte ((val>>24) & 0xff);
  103|     51|	crc32_byte ((val>>32) & 0xff);
  104|     51|	crc32_byte ((val>>40) & 0xff);
  105|     51|	crc32_byte ((val>>48) & 0xff);
  106|     51|	crc32_byte ((val>>56) & 0xff);
  107|     51|}
  108|       |
  109|       |static void 
  110|       |transparent_crc (uint64_t val, char* vname, int flag)
  111|     51|{
  112|     51|	crc32_8bytes(val);
  113|     51|	if (flag) {
  114|      0|  		printf("...checksum after hashing %s : %lX\n", vname, crc32_context ^ 0xFFFFFFFFUL);
  115|      0|	}
  116|     51|}
  117|       |
  118|       |#endif
  119|       |
  120|       |static void 
  121|       |transparent_crc_bytes (char *ptr, int nbytes, char* vname, int flag)
  122|      0|{
  123|      0|    int i;
  124|      0|    for (i=0; i<nbytes; i++) {
  125|      0|        crc32_byte(ptr[i]);
  126|      0|    }
  127|      0|	if (flag) {
  128|      0|  		printf("...checksum after hashing %s : %lX\n", vname, crc32_context ^ 0xFFFFFFFFUL);
  129|      0|	}
  130|      0|}
  131|       |
  132|       |/*****************************************************************************/
  133|       |
  134|       |#endif
  135|       |
  136|       |#endif /* RANDOM_RUNTIME_H */
  137|       |
  138|       |/*
  139|       | * Local Variables:
  140|       | * c-basic-offset: 4
  141|       | * tab-width: 4
  142|       | * End:
  143|       | */
  144|       |
  145|       |/* End of file. */

/root/TSE2022/testsuite/RTEF/runtime/platform_generic.h:
    1|       |/* -*- mode: C -*-
    2|       | *
    3|       | * Copyright (c) 2007, 2008, 2011, 2013 The University of Utah
    4|       | * All rights reserved.
    5|       | *
    6|       | * This file is part of `csmith', a random generator of C programs.
    7|       | *
    8|       | * Redistribution and use in source and binary forms, with or without
    9|       | * modification, are permitted provided that the following conditions are met:
   10|       | *
   11|       | *   * Redistributions of source code must retain the above copyright notice,
   12|       | *     this list of conditions and the following disclaimer.
   13|       | *
   14|       | *   * Redistributions in binary form must reproduce the above copyright
   15|       | *     notice, this list of conditions and the following disclaimer in the
   16|       | *     documentation and/or other materials provided with the distribution.
   17|       | *
   18|       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   19|       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   20|       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   21|       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   22|       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   23|       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   24|       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   25|       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   26|       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   27|       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   28|       | * POSSIBILITY OF SUCH DAMAGE.
   29|       | */
   30|       |
   31|       |#ifndef PLATFORM_GENERIC_H
   32|       |#define PLATFORM_GENERIC_H
   33|       |
   34|       |/*****************************************************************************/
   35|       |
   36|       |#ifdef STANDALONE
   37|       |extern int printf (const char *, ...);
   38|       |#else
   39|       |#include <stdio.h>
   40|       |#endif
   41|       |
   42|       |static void
   43|       |platform_main_begin(void)
   44|      1|{
   45|      1|	/* Nothing to do. */
   46|      1|}
   47|       |
   48|       |static void
   49|       |platform_main_end(uint32_t crc, int flag)
   50|      1|{
   51|       |#if defined (__FRAMAC)
   52|       |    Frama_C_dump_assert_each();
   53|       |#endif
   54|      1|
   55|      1|#ifndef NOT_PRINT_CHECKSUM
   56|      1|	printf ("checksum = %X\n", crc);
   57|      1|#endif
   58|      1|
   59|       |#if defined (LOG_WRAPPERS)
   60|       |	{
   61|       |		int i, first;
   62|       |
   63|       |		printf ("executed wrappers: ");
   64|       |		first = 1;
   65|       |		for (i=1; i<N_WRAP+1; i++) {
   66|       |			if (__executed_checks[i]) {
   67|       |				if (!first) {
   68|       |					printf (",");
   69|       |				} else {
   70|       |					first = 0;
   71|       |				}
   72|       |				printf ("%d", i);
   73|       |			}
   74|       |		}
   75|       |		printf ("\n");
   76|       |
   77|       |		printf ("dead wrappers: ");
   78|       |		first = 1;
   79|       |		for (i=1; i<N_WRAP+1; i++) {
   80|       |			if (!__executed_checks[i]) {
   81|       |				if (!first) {
   82|       |					printf (",");
   83|       |				} else {
   84|       |					first = 0;
   85|       |				}
   86|       |				printf ("%d", i);
   87|       |			}
   88|       |		}
   89|       |		printf ("\n");
   90|       |
   91|       |		printf ("wrappers that failed at least once: ");
   92|       |		first = 1;
   93|       |		for (i=1; i<N_WRAP+1; i++) {
   94|       |			if (__failed_checks[i]) {
   95|       |				if (!first) {
   96|       |					printf (",");
   97|       |				} else {
   98|       |					first = 0;
   99|       |				}
  100|       |				printf ("%d", i);
  101|       |			}
  102|       |		}
  103|       |		printf ("\n");
  104|       |
  105|       |		printf ("wrappers that never failed (or never executed): ");
  106|       |		first = 1;
  107|       |		for (i=1; i<N_WRAP+1; i++) {
  108|       |			if (!__failed_checks[i]) {
  109|       |				if (!first) {
  110|       |					printf (",");
  111|       |				} else {
  112|       |					first = 0;
  113|       |				}
  114|       |				printf ("%d", i);
  115|       |			}
  116|       |		}
  117|       |		printf ("\n");
  118|       |	}
  119|       |#endif
  120|      1|}
  121|       |
  122|       |#define MB (1<<20)
  123|       |
  124|       |/*****************************************************************************/
  125|       |
  126|       |#endif /* PLATFORM_GENERIC_H */
  127|       |
  128|       |/*
  129|       | * Local Variables:
  130|       | * c-basic-offset: 4
  131|       | * tab-width: 4
  132|       | * End:
  133|       | */
  134|       |
  135|       |/* End of file. */

/root/TSE2022/testsuite/RTEF/runtime/random_inc.h:
    1|       |/* -*- mode: C -*-
    2|       | *
    3|       | * Copyright (c) 2007-2010, 2011 The University of Utah
    4|       | * All rights reserved.
    5|       | *
    6|       | * This file is part of `csmith', a random generator of C programs.
    7|       | *
    8|       | * Redistribution and use in source and binary forms, with or without
    9|       | * modification, are permitted provided that the following conditions are met:
   10|       | *
   11|       | *   * Redistributions of source code must retain the above copyright notice,
   12|       | *     this list of conditions and the following disclaimer.
   13|       | *
   14|       | *   * Redistributions in binary form must reproduce the above copyright
   15|       | *     notice, this list of conditions and the following disclaimer in the
   16|       | *     documentation and/or other materials provided with the distribution.
   17|       | *
   18|       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   19|       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   20|       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   21|       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   22|       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   23|       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   24|       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   25|       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   26|       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   27|       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   28|       | * POSSIBILITY OF SUCH DAMAGE.
   29|       | */
   30|       |
   31|       |#ifndef RANDOM_INC_H
   32|       |#define RANDOM_INC_H
   33|       |
   34|       |
   35|       |#if defined(STANDALONE)
   36|       |  #if defined(_MSC_VER)
   37|       |    #include <limits.h>
   38|       |    #include "windows/stdint.h"
   39|       |  #elif defined (IA32_ARCH)
   40|       |    #include "stdint_ia32.h"
   41|       |  #elif defined (IA64_ARCH)
   42|       |    #include "stdint_ia64.h"
   43|       |  #elif defined (MSP430)
   44|       |    #include "stdint_msp430.h"
   45|       |  #elif defined (AVR_ARCH)
   46|       |    #include "stdint_avr.h"
   47|       |  #else
   48|       |    #include "stdint_ia32.h"
   49|       |  #endif
   50|       |#else
   51|       |  #include <limits.h>
   52|       |  #if defined(_MSC_VER)
   53|       |    #include "windows/stdint.h"
   54|       |  #else
   55|       |    #include <stdint.h>
   56|       |  #endif
   57|       |#endif
   58|       |
   59|       |#include <assert.h>
   60|       |
   61|       |/*****************************************************************************/
   62|       |
   63|       |#ifndef DEPUTY
   64|       |#define COUNT(n)
   65|       |#define TC
   66|       |#define SAFE
   67|       |#endif
   68|       |
   69|       |/*****************************************************************************/
   70|       |
   71|       |#ifdef LOG_WRAPPERS
   72|       |#include "wrapper.h"
   73|       |char __failed_checks[N_WRAP+1];
   74|       |char __executed_checks[N_WRAP+1];
   75|       |#define UNDEFINED(__val) (__failed_checks[index]=1,(__val))
   76|       |#define LOG_INDEX , int index
   77|       |#define LOG_EXEC __executed_checks[index]=1;
   78|       |#else
   79|      9|#define UNDEFINED(__val) (__val)
   80|       |#define LOG_INDEX
   81|       |#define LOG_EXEC
   82|       |#endif
   83|       |
   84|       |#if defined(AVR_ARCH)
   85|       |#include "platform_avr.h"
   86|       |#elif defined (MSP430)
   87|       |#include "platform_msp430.h"
   88|       |#else
   89|       |#include "platform_generic.h"
   90|       |#endif
   91|       |
   92|       |#define STATIC static
   93|       |
   94|       |#if defined (USE_MATH_MACROS_NOTMP)
   95|       |#include "safe_math_macros_notmp.h"
   96|       |#elif defined (USE_MATH_MACROS)
   97|       |#include "safe_math_macros.h"
   98|       |#else
   99|       |#define FUNC_NAME(x) (safe_##x)
  100|       |#include "safe_math.h"
  101|       |#undef FUNC_NAME
  102|       |#endif
  103|       |
  104|       |#define INT_BIT (sizeof(int)*CHAR_BIT)
  105|       |#define _CSMITH_BITFIELD(x) (((x)>INT_BIT)?((x)%INT_BIT):(x))
  106|       |
  107|       |#ifdef TCC
  108|       |
  109|       |void* memcpy(void* dest, const void* src, size_t count) {
  110|       |  char* dst8 = (char*)dest;
  111|       |  char* src8 = (char*)src;
  112|       |  
  113|       |  while (count--) {
  114|       |    *dst8++ = *src8++;
  115|       |  }
  116|       |  return dest;
  117|       |}
  118|       |
  119|       |void *memset(void *s, int c, size_t n)
  120|       |{
  121|       |    unsigned char* p=s;
  122|       |    while(n--)
  123|       |        *p++ = (unsigned char)c;
  124|       |    return s;
  125|       |}
  126|       |
  127|       |#endif
  128|       |
  129|       |#endif // RANDOM_INC_H

/root/TSE2022/testsuite/RTEF/runtime/safe_math.h:
    1|       |
    2|       |#ifndef SAFE_MATH_H
    3|       |#define SAFE_MATH_H
    4|       |
    5|       |
    6|       |
    7|       |
    8|       |
    9|       |
   10|       |
   11|       |
   12|       |
   13|       |STATIC int8_t
   14|       |FUNC_NAME(unary_minus_func_int8_t_s)(int8_t si LOG_INDEX)
   15|      0|{
   16|      0|  LOG_EXEC
   17|      0|  return 
   18|      0|#ifndef UNSAFE
   19|       |#if (INT8_MAX>=INT_MAX)
   20|       |    (si==INT8_MIN) ?
   21|       |    (UNDEFINED(si)) :
   22|       |#endif
   23|      0|#endif
   24|      0|    -si;
   25|      0|}
   26|       |
   27|       |STATIC int8_t
   28|       |FUNC_NAME(add_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   29|      4|{
   30|      4|  LOG_EXEC
   31|      4|  return 
   32|      4|#ifndef UNSAFE
   33|       |#if (INT8_MAX>=INT_MAX)
   34|       |    (((si1>0) && (si2>0) && (si1 > (INT8_MAX-si2))) || ((si1<0) && (si2<0) && (si1 < (INT8_MIN-si2)))) ?
   35|       |    (UNDEFINED(si1)) :
   36|       |#endif
   37|      4|#endif
   38|      4|    (si1 + si2);
   39|      4|}
   40|       |
   41|       |STATIC int8_t
   42|       |FUNC_NAME(sub_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   43|      0|{
   44|      0|  LOG_EXEC
   45|      0|  return 
   46|      0|#ifndef UNSAFE
   47|       |#if (INT8_MAX>=INT_MAX)
   48|       |    (((si1^si2) & (((si1 ^ ((si1^si2) & (~INT8_MAX)))-si2)^si2)) < 0) ? 
   49|       |    (UNDEFINED(si1)) : 
   50|       |#endif
   51|      0|#endif
   52|      0|    (si1 - si2);
   53|      0|}
   54|       |
   55|       |STATIC int8_t
   56|       |FUNC_NAME(mul_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   57|      0|{
   58|      0|  LOG_EXEC
   59|      0|  return 
   60|      0|#ifndef UNSAFE
   61|       |#if (INT8_MAX>=INT_MAX)
   62|       |    (((si1 > 0) && (si2 > 0) && (si1 > (INT8_MAX / si2))) || ((si1 > 0) && (si2 <= 0) && (si2 < (INT8_MIN / si1))) || ((si1 <= 0) && (si2 > 0) && (si1 < (INT8_MIN / si2))) || ((si1 <= 0) && (si2 <= 0) && (si1 != 0) && (si2 < (INT8_MAX / si1)))) ? 
   63|       |    (UNDEFINED(si1)) : 
   64|       |#endif
   65|      0|#endif
   66|      0|    si1 * si2;
   67|      0|}
   68|       |
   69|       |STATIC int8_t
   70|       |FUNC_NAME(mod_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   71|      1|{
   72|      1|  LOG_EXEC
   73|      1|  return 
   74|      1|#ifndef UNSAFE
   75|      1|    ((si2 == 0) || ((si1 == INT8_MIN) && (si2 == (-1)))) ? 
   76|      0|    (UNDEFINED(si1)) : 
   77|      1|#endif
   78|      1|    (si1 % si2);
   79|      1|}
   80|       |
   81|       |STATIC int8_t
   82|       |FUNC_NAME(div_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   83|      0|{
   84|      0|  LOG_EXEC
   85|      0|  return 
   86|      0|#ifndef UNSAFE
   87|      0|    ((si2 == 0) || ((si1 == INT8_MIN) && (si2 == (-1)))) ? 
   88|      0|    (UNDEFINED(si1)) : 
   89|      0|#endif
   90|      0|    (si1 / si2);
   91|      0|}
   92|       |
   93|       |STATIC int8_t
   94|       |FUNC_NAME(lshift_func_int8_t_s_s)(int8_t left, int right LOG_INDEX)
   95|      0|{
   96|      0|  LOG_EXEC
   97|      0|  return 
   98|      0|#ifndef UNSAFE
   99|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32) || (left > (INT8_MAX >> ((int)right)))) ? 
  100|      0|    (UNDEFINED(left)) : 
  101|      0|#endif
  102|      0|    (left << ((int)right));
  103|      0|}
  104|       |
  105|       |STATIC int8_t
  106|       |FUNC_NAME(lshift_func_int8_t_s_u)(int8_t left, unsigned int right LOG_INDEX)
  107|      0|{
  108|      0|  LOG_EXEC
  109|      0|  return 
  110|      0|#ifndef UNSAFE
  111|      0|    ((left < 0) || (((unsigned int)right) >= 32) || (left > (INT8_MAX >> ((unsigned int)right)))) ? 
  112|      0|    (UNDEFINED(left)) : 
  113|      0|#endif
  114|      0|    (left << ((unsigned int)right));
  115|      0|}
  116|       |
  117|       |STATIC int8_t
  118|       |FUNC_NAME(rshift_func_int8_t_s_s)(int8_t left, int right LOG_INDEX)
  119|      1|{
  120|      1|  LOG_EXEC
  121|      1|  return 
  122|      1|#ifndef UNSAFE
  123|      1|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32))? 
  124|      0|    (UNDEFINED(left)) : 
  125|      1|#endif
  126|      1|    (left >> ((int)right));
  127|      1|}
  128|       |
  129|       |STATIC int8_t
  130|       |FUNC_NAME(rshift_func_int8_t_s_u)(int8_t left, unsigned int right LOG_INDEX)
  131|      0|{
  132|      0|  LOG_EXEC
  133|      0|  return 
  134|      0|#ifndef UNSAFE
  135|      0|    ((left < 0) || (((unsigned int)right) >= 32)) ? 
  136|      0|    (UNDEFINED(left)) : 
  137|      0|#endif
  138|      0|    (left >> ((unsigned int)right));
  139|      0|}
  140|       |
  141|       |
  142|       |
  143|       |STATIC int16_t
  144|       |FUNC_NAME(unary_minus_func_int16_t_s)(int16_t si LOG_INDEX)
  145|      0|{
  146|      0|  LOG_EXEC
  147|      0|  return 
  148|      0|#ifndef UNSAFE
  149|       |#if (INT16_MAX>=INT_MAX)
  150|       |    (si==INT16_MIN) ?
  151|       |    (UNDEFINED(si)) :
  152|       |#endif
  153|      0|#endif
  154|      0|    -si;
  155|      0|}
  156|       |
  157|       |STATIC int16_t
  158|       |FUNC_NAME(add_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  159|      1|{
  160|      1|  LOG_EXEC
  161|      1|  return 
  162|      1|#ifndef UNSAFE
  163|       |#if (INT16_MAX>=INT_MAX)
  164|       |    (((si1>0) && (si2>0) && (si1 > (INT16_MAX-si2))) || ((si1<0) && (si2<0) && (si1 < (INT16_MIN-si2)))) ?
  165|       |    (UNDEFINED(si1)) :
  166|       |#endif
  167|      1|#endif
  168|      1|    (si1 + si2);
  169|      1|}
  170|       |
  171|       |STATIC int16_t
  172|       |FUNC_NAME(sub_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  173|      1|{
  174|      1|  LOG_EXEC
  175|      1|  return 
  176|      1|#ifndef UNSAFE
  177|       |#if (INT16_MAX>=INT_MAX)
  178|       |    (((si1^si2) & (((si1 ^ ((si1^si2) & (~INT16_MAX)))-si2)^si2)) < 0) ? 
  179|       |    (UNDEFINED(si1)) : 
  180|       |#endif
  181|      1|#endif
  182|      1|    (si1 - si2);
  183|      1|}
  184|       |
  185|       |STATIC int16_t
  186|       |FUNC_NAME(mul_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  187|      4|{
  188|      4|  LOG_EXEC
  189|      4|  return 
  190|      4|#ifndef UNSAFE
  191|       |#if (INT16_MAX>=INT_MAX)
  192|       |    (((si1 > 0) && (si2 > 0) && (si1 > (INT16_MAX / si2))) || ((si1 > 0) && (si2 <= 0) && (si2 < (INT16_MIN / si1))) || ((si1 <= 0) && (si2 > 0) && (si1 < (INT16_MIN / si2))) || ((si1 <= 0) && (si2 <= 0) && (si1 != 0) && (si2 < (INT16_MAX / si1)))) ? 
  193|       |    (UNDEFINED(si1)) : 
  194|       |#endif
  195|      4|#endif
  196|      4|    si1 * si2;
  197|      4|}
  198|       |
  199|       |STATIC int16_t
  200|       |FUNC_NAME(mod_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  201|      1|{
  202|      1|  LOG_EXEC
  203|      1|  return 
  204|      1|#ifndef UNSAFE
  205|      1|    ((si2 == 0) || ((si1 == INT16_MIN) && (si2 == (-1)))) ? 
  206|      0|    (UNDEFINED(si1)) : 
  207|      1|#endif
  208|      1|    (si1 % si2);
  209|      1|}
  210|       |
  211|       |STATIC int16_t
  212|       |FUNC_NAME(div_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  213|      3|{
  214|      3|  LOG_EXEC
  215|      3|  return 
  216|      3|#ifndef UNSAFE
  217|      3|    ((si2 == 0) || ((si1 == INT16_MIN) && (si2 == (-1)))) ? 
  218|      3|    (UNDEFINED(si1)) : 
  219|      3|#endif
  220|      3|    (si1 / si2);
  221|      3|}
  222|       |
  223|       |STATIC int16_t
  224|       |FUNC_NAME(lshift_func_int16_t_s_s)(int16_t left, int right LOG_INDEX)
  225|      0|{
  226|      0|  LOG_EXEC
  227|      0|  return 
  228|      0|#ifndef UNSAFE
  229|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32) || (left > (INT16_MAX >> ((int)right)))) ? 
  230|      0|    (UNDEFINED(left)) : 
  231|      0|#endif
  232|      0|    (left << ((int)right));
  233|      0|}
  234|       |
  235|       |STATIC int16_t
  236|       |FUNC_NAME(lshift_func_int16_t_s_u)(int16_t left, unsigned int right LOG_INDEX)
  237|      1|{
  238|      1|  LOG_EXEC
  239|      1|  return 
  240|      1|#ifndef UNSAFE
  241|      1|    ((left < 0) || (((unsigned int)right) >= 32) || (left > (INT16_MAX >> ((unsigned int)right)))) ? 
  242|      1|    (UNDEFINED(left)) : 
  243|      1|#endif
  244|      1|    (left << ((unsigned int)right));
  245|      1|}
  246|       |
  247|       |STATIC int16_t
  248|       |FUNC_NAME(rshift_func_int16_t_s_s)(int16_t left, int right LOG_INDEX)
  249|      0|{
  250|      0|  LOG_EXEC
  251|      0|  return 
  252|      0|#ifndef UNSAFE
  253|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32))? 
  254|      0|    (UNDEFINED(left)) : 
  255|      0|#endif
  256|      0|    (left >> ((int)right));
  257|      0|}
  258|       |
  259|       |STATIC int16_t
  260|       |FUNC_NAME(rshift_func_int16_t_s_u)(int16_t left, unsigned int right LOG_INDEX)
  261|      3|{
  262|      3|  LOG_EXEC
  263|      3|  return 
  264|      3|#ifndef UNSAFE
  265|      3|    ((left < 0) || (((unsigned int)right) >= 32)) ? 
  266|      0|    (UNDEFINED(left)) : 
  267|      3|#endif
  268|      3|    (left >> ((unsigned int)right));
  269|      3|}
  270|       |
  271|       |
  272|       |
  273|       |STATIC int32_t
  274|       |FUNC_NAME(unary_minus_func_int32_t_s)(int32_t si LOG_INDEX)
  275|      0|{
  276|      0|  LOG_EXEC
  277|      0|  return 
  278|      0|#ifndef UNSAFE
  279|      0|#if (INT32_MAX>=INT_MAX)
  280|      0|    (si==INT32_MIN) ?
  281|      0|    (UNDEFINED(si)) :
  282|      0|#endif
  283|      0|#endif
  284|      0|    -si;
  285|      0|}
  286|       |
  287|       |STATIC int32_t
  288|       |FUNC_NAME(add_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  289|      0|{
  290|      0|  LOG_EXEC
  291|      0|  return 
  292|      0|#ifndef UNSAFE
  293|      0|#if (INT32_MAX>=INT_MAX)
  294|      0|    (((si1>0) && (si2>0) && (si1 > (INT32_MAX-si2))) || ((si1<0) && (si2<0) && (si1 < (INT32_MIN-si2)))) ?
  295|      0|    (UNDEFINED(si1)) :
  296|      0|#endif
  297|      0|#endif
  298|      0|    (si1 + si2);
  299|      0|}
  300|       |
  301|       |STATIC int32_t
  302|       |FUNC_NAME(sub_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  303|      0|{
  304|      0|  LOG_EXEC
  305|      0|  return 
  306|      0|#ifndef UNSAFE
  307|      0|#if (INT32_MAX>=INT_MAX)
  308|      0|    (((si1^si2) & (((si1 ^ ((si1^si2) & (~INT32_MAX)))-si2)^si2)) < 0) ? 
  309|      0|    (UNDEFINED(si1)) : 
  310|      0|#endif
  311|      0|#endif
  312|      0|    (si1 - si2);
  313|      0|}
  314|       |
  315|       |STATIC int32_t
  316|       |FUNC_NAME(mul_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  317|      0|{
  318|      0|  LOG_EXEC
  319|      0|  return 
  320|      0|#ifndef UNSAFE
  321|      0|#if (INT32_MAX>=INT_MAX)
  322|      0|    (((si1 > 0) && (si2 > 0) && (si1 > (INT32_MAX / si2))) || ((si1 > 0) && (si2 <= 0) && (si2 < (INT32_MIN / si1))) || ((si1 <= 0) && (si2 > 0) && (si1 < (INT32_MIN / si2))) || ((si1 <= 0) && (si2 <= 0) && (si1 != 0) && (si2 < (INT32_MAX / si1)))) ? 
  323|      0|    (UNDEFINED(si1)) : 
  324|      0|#endif
  325|      0|#endif
  326|      0|    si1 * si2;
  327|      0|}
  328|       |
  329|       |STATIC int32_t
  330|       |FUNC_NAME(mod_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  331|      0|{
  332|      0|  LOG_EXEC
  333|      0|  return 
  334|      0|#ifndef UNSAFE
  335|      0|    ((si2 == 0) || ((si1 == INT32_MIN) && (si2 == (-1)))) ? 
  336|      0|    (UNDEFINED(si1)) : 
  337|      0|#endif
  338|      0|    (si1 % si2);
  339|      0|}
  340|       |
  341|       |STATIC int32_t
  342|       |FUNC_NAME(div_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  343|      2|{
  344|      2|  LOG_EXEC
  345|      2|  return 
  346|      2|#ifndef UNSAFE
  347|      2|    ((si2 == 0) || ((si1 == INT32_MIN) && (si2 == (-1)))) ? 
  348|      2|    (UNDEFINED(si1)) : 
  349|      2|#endif
  350|      2|    (si1 / si2);
  351|      2|}
  352|       |
  353|       |STATIC int32_t
  354|       |FUNC_NAME(lshift_func_int32_t_s_s)(int32_t left, int right LOG_INDEX)
  355|      0|{
  356|      0|  LOG_EXEC
  357|      0|  return 
  358|      0|#ifndef UNSAFE
  359|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32) || (left > (INT32_MAX >> ((int)right)))) ? 
  360|      0|    (UNDEFINED(left)) : 
  361|      0|#endif
  362|      0|    (left << ((int)right));
  363|      0|}
  364|       |
  365|       |STATIC int32_t
  366|       |FUNC_NAME(lshift_func_int32_t_s_u)(int32_t left, unsigned int right LOG_INDEX)
  367|      0|{
  368|      0|  LOG_EXEC
  369|      0|  return 
  370|      0|#ifndef UNSAFE
  371|      0|    ((left < 0) || (((unsigned int)right) >= 32) || (left > (INT32_MAX >> ((unsigned int)right)))) ? 
  372|      0|    (UNDEFINED(left)) : 
  373|      0|#endif
  374|      0|    (left << ((unsigned int)right));
  375|      0|}
  376|       |
  377|       |STATIC int32_t
  378|       |FUNC_NAME(rshift_func_int32_t_s_s)(int32_t left, int right LOG_INDEX)
  379|      0|{
  380|      0|  LOG_EXEC
  381|      0|  return 
  382|      0|#ifndef UNSAFE
  383|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32))? 
  384|      0|    (UNDEFINED(left)) : 
  385|      0|#endif
  386|      0|    (left >> ((int)right));
  387|      0|}
  388|       |
  389|       |STATIC int32_t
  390|       |FUNC_NAME(rshift_func_int32_t_s_u)(int32_t left, unsigned int right LOG_INDEX)
  391|      0|{
  392|      0|  LOG_EXEC
  393|      0|  return 
  394|      0|#ifndef UNSAFE
  395|      0|    ((left < 0) || (((unsigned int)right) >= 32)) ? 
  396|      0|    (UNDEFINED(left)) : 
  397|      0|#endif
  398|      0|    (left >> ((unsigned int)right));
  399|      0|}
  400|       |
  401|       |#ifndef NO_LONGLONG
  402|       |
  403|       |
  404|       |STATIC int64_t
  405|       |FUNC_NAME(unary_minus_func_int64_t_s)(int64_t si LOG_INDEX)
  406|      0|{
  407|      0|  LOG_EXEC
  408|      0|  return 
  409|      0|#ifndef UNSAFE
  410|      0|#if (INT64_MAX>=INT_MAX)
  411|      0|    (si==INT64_MIN) ?
  412|      0|    (UNDEFINED(si)) :
  413|      0|#endif
  414|      0|#endif
  415|      0|    -si;
  416|      0|}
  417|       |
  418|       |STATIC int64_t
  419|       |FUNC_NAME(add_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  420|      1|{
  421|      1|  LOG_EXEC
  422|      1|  return 
  423|      1|#ifndef UNSAFE
  424|      1|#if (INT64_MAX>=INT_MAX)
  425|      1|    (((si1>0) && (si2>0) && (si1 > (INT64_MAX-si2))) || ((si1<0) && (si2<0) && (si1 < (INT64_MIN-si2)))) ?
  426|      0|    (UNDEFINED(si1)) :
  427|      1|#endif
  428|      1|#endif
  429|      1|    (si1 + si2);
  430|      1|}
  431|       |
  432|       |STATIC int64_t
  433|       |FUNC_NAME(sub_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  434|      0|{
  435|      0|  LOG_EXEC
  436|      0|  return 
  437|      0|#ifndef UNSAFE
  438|      0|#if (INT64_MAX>=INT_MAX)
  439|      0|    (((si1^si2) & (((si1 ^ ((si1^si2) & (~INT64_MAX)))-si2)^si2)) < 0) ? 
  440|      0|    (UNDEFINED(si1)) : 
  441|      0|#endif
  442|      0|#endif
  443|      0|    (si1 - si2);
  444|      0|}
  445|       |
  446|       |STATIC int64_t
  447|       |FUNC_NAME(mul_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  448|      1|{
  449|      1|  LOG_EXEC
  450|      1|  return 
  451|      1|#ifndef UNSAFE
  452|      1|#if (INT64_MAX>=INT_MAX)
  453|      1|    (((si1 > 0) && (si2 > 0) && (si1 > (INT64_MAX / si2))) || ((si1 > 0) && (si2 <= 0) && (si2 < (INT64_MIN / si1))) || ((si1 <= 0) && (si2 > 0) && (si1 < (INT64_MIN / si2))) || ((si1 <= 0) && (si2 <= 0) && (si1 != 0) && (si2 < (INT64_MAX / si1)))) ? 
  454|      0|    (UNDEFINED(si1)) : 
  455|      1|#endif
  456|      1|#endif
  457|      1|    si1 * si2;
  458|      1|}
  459|       |
  460|       |STATIC int64_t
  461|       |FUNC_NAME(mod_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  462|      1|{
  463|      1|  LOG_EXEC
  464|      1|  return 
  465|      1|#ifndef UNSAFE
  466|      1|    ((si2 == 0) || ((si1 == INT64_MIN) && (si2 == (-1)))) ? 
  467|      0|    (UNDEFINED(si1)) : 
  468|      1|#endif
  469|      1|    (si1 % si2);
  470|      1|}
  471|       |
  472|       |STATIC int64_t
  473|       |FUNC_NAME(div_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  474|      0|{
  475|      0|  LOG_EXEC
  476|      0|  return 
  477|      0|#ifndef UNSAFE
  478|      0|    ((si2 == 0) || ((si1 == INT64_MIN) && (si2 == (-1)))) ? 
  479|      0|    (UNDEFINED(si1)) : 
  480|      0|#endif
  481|      0|    (si1 / si2);
  482|      0|}
  483|       |
  484|       |STATIC int64_t
  485|       |FUNC_NAME(lshift_func_int64_t_s_s)(int64_t left, int right LOG_INDEX)
  486|      0|{
  487|      0|  LOG_EXEC
  488|      0|  return 
  489|      0|#ifndef UNSAFE
  490|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32) || (left > (INT64_MAX >> ((int)right)))) ? 
  491|      0|    (UNDEFINED(left)) : 
  492|      0|#endif
  493|      0|    (left << ((int)right));
  494|      0|}
  495|       |
  496|       |STATIC int64_t
  497|       |FUNC_NAME(lshift_func_int64_t_s_u)(int64_t left, unsigned int right LOG_INDEX)
  498|      0|{
  499|      0|  LOG_EXEC
  500|      0|  return 
  501|      0|#ifndef UNSAFE
  502|      0|    ((left < 0) || (((unsigned int)right) >= 32) || (left > (INT64_MAX >> ((unsigned int)right)))) ? 
  503|      0|    (UNDEFINED(left)) : 
  504|      0|#endif
  505|      0|    (left << ((unsigned int)right));
  506|      0|}
  507|       |
  508|       |STATIC int64_t
  509|       |FUNC_NAME(rshift_func_int64_t_s_s)(int64_t left, int right LOG_INDEX)
  510|      1|{
  511|      1|  LOG_EXEC
  512|      1|  return 
  513|      1|#ifndef UNSAFE
  514|      1|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32))? 
  515|      1|    (UNDEFINED(left)) : 
  516|      1|#endif
  517|      1|    (left >> ((int)right));
  518|      1|}
  519|       |
  520|       |STATIC int64_t
  521|       |FUNC_NAME(rshift_func_int64_t_s_u)(int64_t left, unsigned int right LOG_INDEX)
  522|      1|{
  523|      1|  LOG_EXEC
  524|      1|  return 
  525|      1|#ifndef UNSAFE
  526|      1|    ((left < 0) || (((unsigned int)right) >= 32)) ? 
  527|      0|    (UNDEFINED(left)) : 
  528|      1|#endif
  529|      1|    (left >> ((unsigned int)right));
  530|      1|}
  531|       |
  532|       |#endif
  533|       |
  534|       |
  535|       |
  536|       |
  537|       |
  538|       |STATIC uint8_t
  539|       |FUNC_NAME(unary_minus_func_uint8_t_u)(uint8_t ui LOG_INDEX)
  540|      0|{
  541|      0|  LOG_EXEC
  542|      0|  return -ui;
  543|      0|}
  544|       |
  545|       |STATIC uint8_t
  546|       |FUNC_NAME(add_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  547|      3|{
  548|      3|  LOG_EXEC
  549|      3|  return ui1 + ui2;
  550|      3|}
  551|       |
  552|       |STATIC uint8_t
  553|       |FUNC_NAME(sub_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  554|      0|{
  555|      0|  LOG_EXEC
  556|      0|  return ui1 - ui2;
  557|      0|}
  558|       |
  559|       |STATIC uint8_t
  560|       |FUNC_NAME(mul_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  561|      5|{
  562|      5|  LOG_EXEC
  563|      5|  return ((unsigned int)ui1) * ((unsigned int)ui2);
  564|      5|}
  565|       |
  566|       |STATIC uint8_t
  567|       |FUNC_NAME(mod_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  568|      1|{
  569|      1|  LOG_EXEC
  570|      1|  return 
  571|      1|#ifndef UNSAFE
  572|      1|    (ui2 == 0) ? 
  573|      0|    (UNDEFINED(ui1)) : 
  574|      1|#endif
  575|      1|    (ui1 % ui2);
  576|      1|}
  577|       |
  578|       |STATIC uint8_t
  579|       |FUNC_NAME(div_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  580|      0|{
  581|      0|  LOG_EXEC
  582|      0|  return 
  583|      0|#ifndef UNSAFE
  584|      0|    (ui2 == 0) ? 
  585|      0|    (UNDEFINED(ui1)) : 
  586|      0|#endif
  587|      0|    (ui1 / ui2);
  588|      0|}
  589|       |
  590|       |STATIC uint8_t
  591|       |FUNC_NAME(lshift_func_uint8_t_u_s)(uint8_t left, int right LOG_INDEX)
  592|      1|{
  593|      1|  LOG_EXEC
  594|      1|  return 
  595|      1|#ifndef UNSAFE
  596|      1|    ((((int)right) < 0) || (((int)right) >= 32) || (left > (UINT8_MAX >> ((int)right)))) ? 
  597|      0|    (UNDEFINED(left)) : 
  598|      1|#endif
  599|      1|    (left << ((int)right));
  600|      1|}
  601|       |
  602|       |STATIC uint8_t
  603|       |FUNC_NAME(lshift_func_uint8_t_u_u)(uint8_t left, unsigned int right LOG_INDEX)
  604|      0|{
  605|      0|  LOG_EXEC
  606|      0|  return 
  607|      0|#ifndef UNSAFE
  608|      0|    ((((unsigned int)right) >= 32) || (left > (UINT8_MAX >> ((unsigned int)right)))) ? 
  609|      0|    (UNDEFINED(left)) : 
  610|      0|#endif
  611|      0|    (left << ((unsigned int)right));
  612|      0|}
  613|       |
  614|       |STATIC uint8_t
  615|       |FUNC_NAME(rshift_func_uint8_t_u_s)(uint8_t left, int right LOG_INDEX)
  616|      0|{
  617|      0|  LOG_EXEC
  618|      0|  return 
  619|      0|#ifndef UNSAFE
  620|      0|    ((((int)right) < 0) || (((int)right) >= 32)) ? 
  621|      0|    (UNDEFINED(left)) : 
  622|      0|#endif
  623|      0|    (left >> ((int)right));
  624|      0|}
  625|       |
  626|       |STATIC uint8_t
  627|       |FUNC_NAME(rshift_func_uint8_t_u_u)(uint8_t left, unsigned int right LOG_INDEX)
  628|      0|{
  629|      0|  LOG_EXEC
  630|      0|  return 
  631|      0|#ifndef UNSAFE
  632|      0|    (((unsigned int)right) >= 32) ? 
  633|      0|    (UNDEFINED(left)) : 
  634|      0|#endif
  635|      0|    (left >> ((unsigned int)right));
  636|      0|}
  637|       |
  638|       |
  639|       |
  640|       |STATIC uint16_t
  641|       |FUNC_NAME(unary_minus_func_uint16_t_u)(uint16_t ui LOG_INDEX)
  642|      0|{
  643|      0|  LOG_EXEC
  644|      0|  return -ui;
  645|      0|}
  646|       |
  647|       |STATIC uint16_t
  648|       |FUNC_NAME(add_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  649|      0|{
  650|      0|  LOG_EXEC
  651|      0|  return ui1 + ui2;
  652|      0|}
  653|       |
  654|       |STATIC uint16_t
  655|       |FUNC_NAME(sub_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  656|      0|{
  657|      0|  LOG_EXEC
  658|      0|  return ui1 - ui2;
  659|      0|}
  660|       |
  661|       |STATIC uint16_t
  662|       |FUNC_NAME(mul_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  663|      0|{
  664|      0|  LOG_EXEC
  665|      0|  return ((unsigned int)ui1) * ((unsigned int)ui2);
  666|      0|}
  667|       |
  668|       |STATIC uint16_t
  669|       |FUNC_NAME(mod_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  670|      1|{
  671|      1|  LOG_EXEC
  672|      1|  return 
  673|      1|#ifndef UNSAFE
  674|      1|    (ui2 == 0) ? 
  675|      0|    (UNDEFINED(ui1)) : 
  676|      1|#endif
  677|      1|    (ui1 % ui2);
  678|      1|}
  679|       |
  680|       |STATIC uint16_t
  681|       |FUNC_NAME(div_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  682|      0|{
  683|      0|  LOG_EXEC
  684|      0|  return 
  685|      0|#ifndef UNSAFE
  686|      0|    (ui2 == 0) ? 
  687|      0|    (UNDEFINED(ui1)) : 
  688|      0|#endif
  689|      0|    (ui1 / ui2);
  690|      0|}
  691|       |
  692|       |STATIC uint16_t
  693|       |FUNC_NAME(lshift_func_uint16_t_u_s)(uint16_t left, int right LOG_INDEX)
  694|      0|{
  695|      0|  LOG_EXEC
  696|      0|  return 
  697|      0|#ifndef UNSAFE
  698|      0|    ((((int)right) < 0) || (((int)right) >= 32) || (left > (UINT16_MAX >> ((int)right)))) ? 
  699|      0|    (UNDEFINED(left)) : 
  700|      0|#endif
  701|      0|    (left << ((int)right));
  702|      0|}
  703|       |
  704|       |STATIC uint16_t
  705|       |FUNC_NAME(lshift_func_uint16_t_u_u)(uint16_t left, unsigned int right LOG_INDEX)
  706|      1|{
  707|      1|  LOG_EXEC
  708|      1|  return 
  709|      1|#ifndef UNSAFE
  710|      1|    ((((unsigned int)right) >= 32) || (left > (UINT16_MAX >> ((unsigned int)right)))) ? 
  711|      1|    (UNDEFINED(left)) : 
  712|      1|#endif
  713|      1|    (left << ((unsigned int)right));
  714|      1|}
  715|       |
  716|       |STATIC uint16_t
  717|       |FUNC_NAME(rshift_func_uint16_t_u_s)(uint16_t left, int right LOG_INDEX)
  718|      0|{
  719|      0|  LOG_EXEC
  720|      0|  return 
  721|      0|#ifndef UNSAFE
  722|      0|    ((((int)right) < 0) || (((int)right) >= 32)) ? 
  723|      0|    (UNDEFINED(left)) : 
  724|      0|#endif
  725|      0|    (left >> ((int)right));
  726|      0|}
  727|       |
  728|       |STATIC uint16_t
  729|       |FUNC_NAME(rshift_func_uint16_t_u_u)(uint16_t left, unsigned int right LOG_INDEX)
  730|      1|{
  731|      1|  LOG_EXEC
  732|      1|  return 
  733|      1|#ifndef UNSAFE
  734|      1|    (((unsigned int)right) >= 32) ? 
  735|      0|    (UNDEFINED(left)) : 
  736|      1|#endif
  737|      1|    (left >> ((unsigned int)right));
  738|      1|}
  739|       |
  740|       |
  741|       |
  742|       |STATIC uint32_t
  743|       |FUNC_NAME(unary_minus_func_uint32_t_u)(uint32_t ui LOG_INDEX)
  744|      0|{
  745|      0|  LOG_EXEC
  746|      0|  return -ui;
  747|      0|}
  748|       |
  749|       |STATIC uint32_t
  750|       |FUNC_NAME(add_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  751|      4|{
  752|      4|  LOG_EXEC
  753|      4|  return ui1 + ui2;
  754|      4|}
  755|       |
  756|       |STATIC uint32_t
  757|       |FUNC_NAME(sub_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  758|      0|{
  759|      0|  LOG_EXEC
  760|      0|  return ui1 - ui2;
  761|      0|}
  762|       |
  763|       |STATIC uint32_t
  764|       |FUNC_NAME(mul_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  765|      0|{
  766|      0|  LOG_EXEC
  767|      0|  return ((unsigned int)ui1) * ((unsigned int)ui2);
  768|      0|}
  769|       |
  770|       |STATIC uint32_t
  771|       |FUNC_NAME(mod_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  772|      0|{
  773|      0|  LOG_EXEC
  774|      0|  return 
  775|      0|#ifndef UNSAFE
  776|      0|    (ui2 == 0) ? 
  777|      0|    (UNDEFINED(ui1)) : 
  778|      0|#endif
  779|      0|    (ui1 % ui2);
  780|      0|}
  781|       |
  782|       |STATIC uint32_t
  783|       |FUNC_NAME(div_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  784|      0|{
  785|      0|  LOG_EXEC
  786|      0|  return 
  787|      0|#ifndef UNSAFE
  788|      0|    (ui2 == 0) ? 
  789|      0|    (UNDEFINED(ui1)) : 
  790|      0|#endif
  791|      0|    (ui1 / ui2);
  792|      0|}
  793|       |
  794|       |STATIC uint32_t
  795|       |FUNC_NAME(lshift_func_uint32_t_u_s)(uint32_t left, int right LOG_INDEX)
  796|      0|{
  797|      0|  LOG_EXEC
  798|      0|  return 
  799|      0|#ifndef UNSAFE
  800|      0|    ((((int)right) < 0) || (((int)right) >= 32) || (left > (UINT32_MAX >> ((int)right)))) ? 
  801|      0|    (UNDEFINED(left)) : 
  802|      0|#endif
  803|      0|    (left << ((int)right));
  804|      0|}
  805|       |
  806|       |STATIC uint32_t
  807|       |FUNC_NAME(lshift_func_uint32_t_u_u)(uint32_t left, unsigned int right LOG_INDEX)
  808|      9|{
  809|      9|  LOG_EXEC
  810|      9|  return 
  811|      9|#ifndef UNSAFE
  812|      9|    ((((unsigned int)right) >= 32) || (left > (UINT32_MAX >> ((unsigned int)right)))) ? 
  813|      0|    (UNDEFINED(left)) : 
  814|      9|#endif
  815|      9|    (left << ((unsigned int)right));
  816|      9|}
  817|       |
  818|       |STATIC uint32_t
  819|       |FUNC_NAME(rshift_func_uint32_t_u_s)(uint32_t left, int right LOG_INDEX)
  820|      1|{
  821|      1|  LOG_EXEC
  822|      1|  return 
  823|      1|#ifndef UNSAFE
  824|      1|    ((((int)right) < 0) || (((int)right) >= 32)) ? 
  825|      0|    (UNDEFINED(left)) : 
  826|      1|#endif
  827|      1|    (left >> ((int)right));
  828|      1|}
  829|       |
  830|       |STATIC uint32_t
  831|       |FUNC_NAME(rshift_func_uint32_t_u_u)(uint32_t left, unsigned int right LOG_INDEX)
  832|      0|{
  833|      0|  LOG_EXEC
  834|      0|  return 
  835|      0|#ifndef UNSAFE
  836|      0|    (((unsigned int)right) >= 32) ? 
  837|      0|    (UNDEFINED(left)) : 
  838|      0|#endif
  839|      0|    (left >> ((unsigned int)right));
  840|      0|}
  841|       |
  842|       |#ifndef NO_LONGLONG
  843|       |
  844|       |
  845|       |STATIC uint64_t
  846|       |FUNC_NAME(unary_minus_func_uint64_t_u)(uint64_t ui LOG_INDEX)
  847|      0|{
  848|      0|  LOG_EXEC
  849|      0|  return -ui;
  850|      0|}
  851|       |
  852|       |STATIC uint64_t
  853|       |FUNC_NAME(add_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  854|      1|{
  855|      1|  LOG_EXEC
  856|      1|  return ui1 + ui2;
  857|      1|}
  858|       |
  859|       |STATIC uint64_t
  860|       |FUNC_NAME(sub_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  861|      0|{
  862|      0|  LOG_EXEC
  863|      0|  return ui1 - ui2;
  864|      0|}
  865|       |
  866|       |STATIC uint64_t
  867|       |FUNC_NAME(mul_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  868|      0|{
  869|      0|  LOG_EXEC
  870|      0|  return ((unsigned long long)ui1) * ((unsigned long long)ui2);
  871|      0|}
  872|       |
  873|       |STATIC uint64_t
  874|       |FUNC_NAME(mod_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  875|      0|{
  876|      0|  LOG_EXEC
  877|      0|  return 
  878|      0|#ifndef UNSAFE
  879|      0|    (ui2 == 0) ? 
  880|      0|    (UNDEFINED(ui1)) : 
  881|      0|#endif
  882|      0|    (ui1 % ui2);
  883|      0|}
  884|       |
  885|       |STATIC uint64_t
  886|       |FUNC_NAME(div_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  887|      0|{
  888|      0|  LOG_EXEC
  889|      0|  return 
  890|      0|#ifndef UNSAFE
  891|      0|    (ui2 == 0) ? 
  892|      0|    (UNDEFINED(ui1)) : 
  893|      0|#endif
  894|      0|    (ui1 / ui2);
  895|      0|}
  896|       |
  897|       |STATIC uint64_t
  898|       |FUNC_NAME(lshift_func_uint64_t_u_s)(uint64_t left, int right LOG_INDEX)
  899|      1|{
  900|      1|  LOG_EXEC
  901|      1|  return 
  902|      1|#ifndef UNSAFE
  903|      1|    ((((int)right) < 0) || (((int)right) >= 32) || (left > (UINT64_MAX >> ((int)right)))) ? 
  904|      1|    (UNDEFINED(left)) : 
  905|      1|#endif
  906|      1|    (left << ((int)right));
  907|      1|}
  908|       |
  909|       |STATIC uint64_t
  910|       |FUNC_NAME(lshift_func_uint64_t_u_u)(uint64_t left, unsigned int right LOG_INDEX)
  911|      0|{
  912|      0|  LOG_EXEC
  913|      0|  return 
  914|      0|#ifndef UNSAFE
  915|      0|    ((((unsigned int)right) >= 32) || (left > (UINT64_MAX >> ((unsigned int)right)))) ? 
  916|      0|    (UNDEFINED(left)) : 
  917|      0|#endif
  918|      0|    (left << ((unsigned int)right));
  919|      0|}
  920|       |
  921|       |STATIC uint64_t
  922|       |FUNC_NAME(rshift_func_uint64_t_u_s)(uint64_t left, int right LOG_INDEX)
  923|      0|{
  924|      0|  LOG_EXEC
  925|      0|  return 
  926|      0|#ifndef UNSAFE
  927|      0|    ((((int)right) < 0) || (((int)right) >= 32)) ? 
  928|      0|    (UNDEFINED(left)) : 
  929|      0|#endif
  930|      0|    (left >> ((int)right));
  931|      0|}
  932|       |
  933|       |STATIC uint64_t
  934|       |FUNC_NAME(rshift_func_uint64_t_u_u)(uint64_t left, unsigned int right LOG_INDEX)
  935|      0|{
  936|      0|  LOG_EXEC
  937|      0|  return 
  938|      0|#ifndef UNSAFE
  939|      0|    (((unsigned int)right) >= 32) ? 
  940|      0|    (UNDEFINED(left)) : 
  941|      0|#endif
  942|      0|    (left >> ((unsigned int)right));
  943|      0|}
  944|       |
  945|       |#endif
  946|       |
  947|       |
  948|       |
  949|       |
  950|       |#ifdef __STDC__
  951|       |float fabsf(float);
  952|       |double fabs(double);
  953|       |
  954|       |
  955|       |STATIC float
  956|       |FUNC_NAME(add_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
  957|      0|{
  958|      0|  LOG_EXEC
  959|      0|  return 
  960|      0|#ifndef UNSAFE_FLOAT
  961|      0|    (fabsf((0.5f * sf1) + (0.5f * sf2)) > (0.5f * FLT_MAX)) ? 
  962|      0|    UNDEFINED(sf1) :
  963|      0|#endif
  964|      0|    (sf1 + sf2);
  965|      0|}
  966|       |
  967|       |STATIC float
  968|       |FUNC_NAME(sub_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
  969|      0|{
  970|      0|  LOG_EXEC
  971|      0|  return 
  972|      0|#ifndef UNSAFE_FLOAT
  973|      0|    (fabsf((0.5f * sf1) - (0.5f * sf2)) > (0.5f * FLT_MAX)) ? 
  974|      0|    UNDEFINED(sf1) :
  975|      0|#endif
  976|      0|    (sf1 - sf2);
  977|      0|}
  978|       |
  979|       |STATIC float
  980|       |FUNC_NAME(mul_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
  981|      0|{
  982|      0|  LOG_EXEC
  983|      0|  return
  984|      0|#ifndef UNSAFE_FLOAT
  985|      0|#ifdef __STDC__
  986|      0|    (fabsf((0x1.0p-100f * sf1) * (0x1.0p-28f * sf2)) > (0x1.0p-100f * (0x1.0p-28f * FLT_MAX))) ?
  987|      0|#else
  988|      0|    (fabsf((ldexpf(1.0, -100) * sf1) * (0x1.0p-28f * sf2)) > (ldexpf(1.0, -100) * (0x1.0p-28f * FLT_MAX))) ?
  989|      0|#endif
  990|      0|    UNDEFINED(sf1) :
  991|      0|#endif
  992|      0|    (sf1 * sf2);
  993|      0|}
  994|       |
  995|       |STATIC float
  996|       |FUNC_NAME(div_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
  997|      0|{
  998|      0|  LOG_EXEC
  999|      0|  return
 1000|      0|#ifndef UNSAFE_FLOAT
 1001|      0|#ifdef __STDC__
 1002|      0|    ((fabsf(sf2) < 1.0f) && (((sf2 == 0.0f) || (fabsf((0x1.0p-49f * sf1) / (0x1.0p100f * sf2))) > (0x1.0p-100f * (0x1.0p-49f * FLT_MAX))))) ?
 1003|      0|#else
 1004|      0|    ((fabsf(sf2) < 1.0f) && (((sf2 == 0.0f) || (fabsf((0x1.0p-49f * sf1) / (ldexpf(1.0, 100) * sf2))) > (ldexpf(1.0, -100) * (0x1.0p-49f * FLT_MAX))))) ?
 1005|      0|#endif
 1006|      0|    UNDEFINED(sf1) :
 1007|      0|#endif
 1008|      0|    (sf1 / sf2);
 1009|      0|}
 1010|       |
 1011|       |
 1012|       |
 1013|       |
 1014|       |STATIC double
 1015|       |FUNC_NAME(add_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1016|      0|{
 1017|      0|  LOG_EXEC
 1018|      0|  return 
 1019|      0|#ifndef UNSAFE_FLOAT
 1020|      0|    (fabs((0.5 * sf1) + (0.5 * sf2)) > (0.5 * DBL_MAX)) ? 
 1021|      0|    UNDEFINED(sf1) :
 1022|      0|#endif
 1023|      0|    (sf1 + sf2);
 1024|      0|}
 1025|       |
 1026|       |STATIC double
 1027|       |FUNC_NAME(sub_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1028|      0|{
 1029|      0|  LOG_EXEC
 1030|      0|  return 
 1031|      0|#ifndef UNSAFE_FLOAT
 1032|      0|    (fabs((0.5 * sf1) - (0.5 * sf2)) > (0.5 * DBL_MAX)) ? 
 1033|      0|    UNDEFINED(sf1) :
 1034|      0|#endif
 1035|      0|    (sf1 - sf2);
 1036|      0|}
 1037|       |
 1038|       |STATIC double
 1039|       |FUNC_NAME(mul_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1040|      0|{
 1041|      0|  LOG_EXEC
 1042|      0|  return
 1043|      0|#ifndef UNSAFE_FLOAT
 1044|      0|#ifdef __STDC__
 1045|      0|    (fabs((0x1.0p-100 * sf1) * (0x1.0p-924 * sf2)) > (0x1.0p-100 * (0x1.0p-924 * DBL_MAX))) ?
 1046|      0|#else
 1047|      0|    (fabs((ldexp(1.0, -100) * sf1) * (0x1.0p-924 * sf2)) > (ldexp(1.0, -100) * (0x1.0p-924 * DBL_MAX))) ?
 1048|      0|#endif
 1049|      0|    UNDEFINED(sf1) :
 1050|      0|#endif
 1051|      0|    (sf1 * sf2);
 1052|      0|}
 1053|       |
 1054|       |STATIC double
 1055|       |FUNC_NAME(div_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1056|      0|{
 1057|      0|  LOG_EXEC
 1058|      0|  return
 1059|      0|#ifndef UNSAFE_FLOAT
 1060|      0|#ifdef __STDC__
 1061|      0|    ((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((0x1.0p-974 * sf1) / (0x1.0p100 * sf2))) > (0x1.0p-100 * (0x1.0p-974 * DBL_MAX))))) ?
 1062|      0|#else
 1063|      0|    ((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((0x1.0p-974 * sf1) / (ldexp(1.0, 100) * sf2))) > (ldexp(1.0, -100) * (0x1.0p-974 * DBL_MAX))))) ?
 1064|      0|#endif
 1065|      0|    UNDEFINED(sf1) :
 1066|      0|#endif
 1067|      0|    (sf1 / sf2);
 1068|      0|}
 1069|       |
 1070|       |
 1071|       |#else
 1072|       |
 1073|       |
 1074|       |STATIC float
 1075|       |FUNC_NAME(add_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
 1076|       |{
 1077|       |  LOG_EXEC
 1078|       |  return 
 1079|       |#ifndef UNSAFE_FLOAT
 1080|       |    (fabsf((0.5f * sf1) + (0.5f * sf2)) > (0.5f * FLT_MAX)) ? 
 1081|       |    UNDEFINED(sf1) :
 1082|       |#endif
 1083|       |    (sf1 + sf2);
 1084|       |}
 1085|       |
 1086|       |STATIC float
 1087|       |FUNC_NAME(sub_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
 1088|       |{
 1089|       |  LOG_EXEC
 1090|       |  return 
 1091|       |#ifndef UNSAFE_FLOAT
 1092|       |    (fabsf((0.5f * sf1) - (0.5f * sf2)) > (0.5f * FLT_MAX)) ? 
 1093|       |    UNDEFINED(sf1) :
 1094|       |#endif
 1095|       |    (sf1 - sf2);
 1096|       |}
 1097|       |
 1098|       |STATIC float
 1099|       |FUNC_NAME(mul_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
 1100|       |{
 1101|       |  LOG_EXEC
 1102|       |  return
 1103|       |#ifndef UNSAFE_FLOAT
 1104|       |#ifdef __STDC__
 1105|       |    (fabsf((0x1.0p-100f * sf1) * (ldexpf(1.0, -28) * sf2)) > (0x1.0p-100f * (ldexpf(1.0, -28) * FLT_MAX))) ?
 1106|       |#else
 1107|       |    (fabsf((ldexpf(1.0, -100) * sf1) * (ldexpf(1.0, -28) * sf2)) > (ldexpf(1.0, -100) * (ldexpf(1.0, -28) * FLT_MAX))) ?
 1108|       |#endif
 1109|       |    UNDEFINED(sf1) :
 1110|       |#endif
 1111|       |    (sf1 * sf2);
 1112|       |}
 1113|       |
 1114|       |STATIC float
 1115|       |FUNC_NAME(div_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
 1116|       |{
 1117|       |  LOG_EXEC
 1118|       |  return
 1119|       |#ifndef UNSAFE_FLOAT
 1120|       |#ifdef __STDC__
 1121|       |    ((fabsf(sf2) < 1.0f) && (((sf2 == 0.0f) || (fabsf((ldexpf(1.0, -49) * sf1) / (0x1.0p100f * sf2))) > (0x1.0p-100f * (ldexpf(1.0, -49) * FLT_MAX))))) ?
 1122|       |#else
 1123|       |    ((fabsf(sf2) < 1.0f) && (((sf2 == 0.0f) || (fabsf((ldexpf(1.0, -49) * sf1) / (ldexpf(1.0, 100) * sf2))) > (ldexpf(1.0, -100) * (ldexpf(1.0, -49) * FLT_MAX))))) ?
 1124|       |#endif
 1125|       |    UNDEFINED(sf1) :
 1126|       |#endif
 1127|       |    (sf1 / sf2);
 1128|       |}
 1129|       |
 1130|       |
 1131|       |
 1132|       |
 1133|       |STATIC double
 1134|       |FUNC_NAME(add_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1135|       |{
 1136|       |  LOG_EXEC
 1137|       |  return 
 1138|       |#ifndef UNSAFE_FLOAT
 1139|       |    (fabs((0.5 * sf1) + (0.5 * sf2)) > (0.5 * DBL_MAX)) ? 
 1140|       |    UNDEFINED(sf1) :
 1141|       |#endif
 1142|       |    (sf1 + sf2);
 1143|       |}
 1144|       |
 1145|       |STATIC double
 1146|       |FUNC_NAME(sub_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1147|       |{
 1148|       |  LOG_EXEC
 1149|       |  return 
 1150|       |#ifndef UNSAFE_FLOAT
 1151|       |    (fabs((0.5 * sf1) - (0.5 * sf2)) > (0.5 * DBL_MAX)) ? 
 1152|       |    UNDEFINED(sf1) :
 1153|       |#endif
 1154|       |    (sf1 - sf2);
 1155|       |}
 1156|       |
 1157|       |STATIC double
 1158|       |FUNC_NAME(mul_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1159|       |{
 1160|       |  LOG_EXEC
 1161|       |  return
 1162|       |#ifndef UNSAFE_FLOAT
 1163|       |#ifdef __STDC__
 1164|       |    (fabs((0x1.0p-100 * sf1) * (ldexp(1.0, -924) * sf2)) > (0x1.0p-100 * (ldexp(1.0, -924) * DBL_MAX))) ?
 1165|       |#else
 1166|       |    (fabs((ldexp(1.0, -100) * sf1) * (ldexp(1.0, -924) * sf2)) > (ldexp(1.0, -100) * (ldexp(1.0, -924) * DBL_MAX))) ?
 1167|       |#endif
 1168|       |    UNDEFINED(sf1) :
 1169|       |#endif
 1170|       |    (sf1 * sf2);
 1171|       |}
 1172|       |
 1173|       |STATIC double
 1174|       |FUNC_NAME(div_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1175|       |{
 1176|       |  LOG_EXEC
 1177|       |  return
 1178|       |#ifndef UNSAFE_FLOAT
 1179|       |#ifdef __STDC__
 1180|       |    ((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((ldexp(1.0, -974) * sf1) / (0x1.0p100 * sf2))) > (0x1.0p-100 * (ldexp(1.0, -974) * DBL_MAX))))) ?
 1181|       |#else
 1182|       |    ((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((ldexp(1.0, -974) * sf1) / (ldexp(1.0, 100) * sf2))) > (ldexp(1.0, -100) * (ldexp(1.0, -974) * DBL_MAX))))) ?
 1183|       |#endif
 1184|       |    UNDEFINED(sf1) :
 1185|       |#endif
 1186|       |    (sf1 / sf2);
 1187|       |}
 1188|       |
 1189|       |
 1190|       |#endif
 1191|       |
 1192|       |
 1193|       |
 1194|       |
 1195|       |STATIC int32_t
 1196|       |FUNC_NAME(convert_func_float_to_int32_t)(float sf1 LOG_INDEX)
 1197|      0|{
 1198|      0|  LOG_EXEC
 1199|      0|  return 
 1200|      0|#ifndef UNSAFE_FLOAT
 1201|      0|    ((sf1 <= INT32_MIN) || (sf1 >= INT32_MAX)) ?
 1202|      0|    UNDEFINED(INT32_MAX) :
 1203|      0|#endif
 1204|      0|    ((int32_t)(sf1));
 1205|      0|}
 1206|       |
 1207|       |
 1208|       |
 1209|       |#endif

