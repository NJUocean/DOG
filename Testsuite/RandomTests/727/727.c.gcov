        -:    0:Source:727.c
        -:    0:Graph:727.gcno
        -:    0:Data:727.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:union U1 {
        -:    7:  const uint8_t f0;
        -:    8:  int16_t f1;
        -:    9:  uint64_t f2;
        -:   10:  uint8_t f3;
        -:   11:};
        -:   12:
        -:   13:static union U1 g_10 = {6UL};
        -:   14:static uint64_t g_23 = 18446744073709551615UL;
        -:   15:static int16_t g_27 = 1L;
        -:   16:static int32_t g_32 = 1L;
        -:   17:static volatile int64_t g_39 = 0x51D1A932DA3BB1D4LL;
        -:   18:static uint16_t g_40 = 0xE251L;
        -:   19:static int32_t *const volatile g_43 = &g_32;
        -:   20:static int32_t g_60 = 0xAF34C2E3L;
        -:   21:static int64_t g_61 = 0x5BCD5918CD8B12ACLL;
        -:   22:static int32_t **volatile g_65 = (void *)0;
        -:   23:static const int32_t **const volatile g_68 = (void *)0;
        -:   24:static int16_t *g_99 = &g_27;
        -:   25:static uint32_t g_115[4][2] = {{0x9E2023AEL, 0x9E2023AEL}, {0x9E2023AEL, 0x9E2023AEL}, {0x9E2023AEL, 0x9E2023AEL}, {0x9E2023AEL, 0x9E2023AEL}};
        -:   26:static uint8_t g_122 = 0x2DL;
        -:   27:static int16_t g_145[2][4][2] = {{{0x4686L, 0L}, {0L, 0x4686L}, {0x1016L, 1L}, {0x1016L, 0x4686L}}, {{0L, 0L}, {0x4686L, 0x1016L}, {1L, 0x1016L}, {0x4686L, 0L}}};
        -:   28:static volatile int32_t g_146[2][3][2] = {{{0x91B04C5DL, 0x91B04C5DL}, {0x91B04C5DL, 9L}, {0x38B95618L, 1L}}, {{9L, 1L}, {0x38B95618L, 9L}, {0x91B04C5DL, 0x91B04C5DL}}};
        -:   29:static volatile uint64_t g_147 = 5UL;
        -:   30:
        -:   31:static uint32_t func_1(void);
        -:   32:static int32_t func_4(const uint64_t p_5, uint32_t p_6, union U1 p_7, int64_t p_8);
        -:   33:
        1:   34:static uint32_t func_1(void) {
        1:   35:  const uint32_t l_9 = 0x95A97963L;
        1:   36:  uint64_t *l_19 = (void *)0;
        1:   37:  uint64_t *l_20 = (void *)0;
        1:   38:  uint64_t *l_21 = (void *)0;
        1:   39:  uint64_t *l_22 = &g_23;
        1:   40:  int16_t *l_26 = &g_27;
        1:   41:  int32_t l_28 = 0x638299FAL;
        1:   42:  int32_t *l_59 = &g_60;
        1:   43:  int32_t l_62 = 0x4BE5697AL;
        1:   44:  int8_t l_63[1][5][2] = {{{0x38L, 0x38L}, {0x38L, 0x38L}, {0x38L, 0x38L}, {0x38L, 0x38L}, {0x38L, 0x38L}}};
        -:   45:  int i, j, k;
       1*:   46:  l_62 = (safe_sub_func_uint64_t_u_u((((*l_59) &= func_4(l_9, l_9, g_10, (safe_sub_func_int8_t_s_s((((((safe_rshift_func_uint8_t_u_u((safe_sub_func_int8_t_s_s((((0L < ((0x41AC3DC99CDF9C77LL & (((*l_26) = (safe_sub_func_uint64_t_u_u((((*l_22) = 6UL) && (safe_sub_func_int32_t_s_s(l_9, (l_9 & (((((void *)0 != &g_23), &g_23) == (void *)0) >= g_23))))), 0L))), l_9)), g_27)) && g_27) >= g_10.f0), g_10.f0)), 4)) ^ l_28) == g_10.f0) < g_10.f0) >= g_10.f0), g_10.f0)))) | g_61), l_9));
        2:   47:  for (g_10.f2 = 0; (g_10.f2 <= 0); g_10.f2 += 1) {
        1:   48:    int32_t **l_64 = (void *)0;
        1:   49:    int32_t **l_66 = &l_59;
        1:   50:    int16_t *l_91 = &g_27;
        -:   51:    int16_t **l_96[3];
        1:   52:    int16_t l_142 = 0L;
        1:   53:    int32_t l_143 = 0xB96E4AE6L;
        1:   54:    int32_t l_144 = 0L;
        -:   55:    int i;
        4:   56:    for (i = 0; i < 3; i++)
        3:   57:      l_96[i] = &l_26;
        1:   58:    (*l_66) = &l_62;
        2:   59:    for (g_32 = 0; (g_32 <= 0); g_32 += 1) {
        1:   60:      union U1 l_71 = {0x98L};
        1:   61:      int16_t **l_87 = (void *)0;
        1:   62:      int16_t **l_88 = (void *)0;
        1:   63:      int16_t *l_89 = (void *)0;
        -:   64:      int16_t **l_90[2][1];
        1:   65:      int32_t l_126 = 0L;
        -:   66:      int i, j;
        3:   67:      for (i = 0; i < 2; i++) {
        4:   68:        for (j = 0; j < 1; j++)
        2:   69:          l_90[i][j] = (void *)0;
        -:   70:      }
        2:   71:      for (g_23 = 0; (g_23 <= 0); g_23 += 1) {
        1:   72:        const int32_t *l_67 = &g_60;
        1:   73:        const int32_t **l_69 = (void *)0;
        1:   74:        const int32_t **l_70 = &l_67;
        1:   75:        (*l_70) = l_67;
        -:   76:      }
        -:   77:    }
        -:   78:  }
        1:   79:  return g_146[0][1][0];
        -:   80:}
        -:   81:
        1:   82:static int32_t func_4(const uint64_t p_5, uint32_t p_6, union U1 p_7, int64_t p_8) {
        1:   83:  uint16_t l_34[5][3] = {{0x4D2CL, 0x4D2CL, 0xFF5FL}, {0x4D2CL, 0x4D2CL, 0xFF5FL}, {0x4D2CL, 0x4D2CL, 0xFF5FL}, {0x4D2CL, 0x4D2CL, 0xFF5FL}, {0x4D2CL, 0x4D2CL, 0xFF5FL}};
        1:   84:  int8_t l_57 = (-1L);
        -:   85:  int i, j;
        6:   86:  for (g_10.f1 = 7; (g_10.f1 != 12); ++g_10.f1) {
        5:   87:    int32_t *l_31 = &g_32;
        5:   88:    int32_t *l_33 = &g_32;
        5:   89:    int32_t *l_37 = (void *)0;
        -:   90:    int32_t *l_38[1];
        -:   91:    int i;
       10:   92:    for (i = 0; i < 1; i++)
        5:   93:      l_38[i] = &g_32;
        5:   94:    l_34[2][2]--;
        5:   95:    ++g_40;
        -:   96:  }
        -:   97:  if ((&g_23 != (g_23, &g_23))) {
        -:   98:    (*g_43) = l_34[2][2];
        -:   99:  } else {
        1:  100:    int16_t *l_47 = (void *)0;
        1:  101:    int16_t *l_48 = &g_10.f1;
        1:  102:    int32_t l_58[5][2] = {{(-6L), 0L}, {0xA000286FL, 0x7DFDEEAFL}, {0L, 0x7DFDEEAFL}, {0xA000286FL, 0L}, {(-6L), (-6L)}};
        -:  103:    int i, j;
        1:  104:    l_58[1][1] = ((safe_lshift_func_int64_t_s_s((safe_unary_minus_func_uint32_t_u(p_8)), ((void *)0 != &g_32))), ((((0x8A7E8B7DL <= (((*l_48) = 0x1010L) ^ (safe_mod_func_uint8_t_u_u(((safe_mul_func_int32_t_s_s(3L, (p_7, ((safe_add_func_int16_t_s_s(((((((safe_mod_func_int32_t_s_s(p_7.f0, 1UL)), &g_23) != (void *)0) | p_6) >= (-1L)) == p_7.f0), p_7.f0)) >= l_34[1][0])))) <= 0UL), l_57)))), 0L) >= 0x1CA9L) != l_58[1][1]));
        -:  105:  }
        1:  106:  return (*g_43);
        -:  107:}
        -:  108:
        1:  109:int main(int argc, char *argv[]) {
        -:  110:  int i, j, k;
        1:  111:  int print_hash_value = 0;
       1*:  112:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  113:    print_hash_value = 1;
        1:  114:  platform_main_begin();
        1:  115:  crc32_gentab();
        1:  116:  func_1();
        1:  117:  transparent_crc(g_10.f2, "g_10.f2", print_hash_value);
        1:  118:  transparent_crc(g_23, "g_23", print_hash_value);
        1:  119:  transparent_crc(g_27, "g_27", print_hash_value);
        1:  120:  transparent_crc(g_32, "g_32", print_hash_value);
        1:  121:  transparent_crc(g_39, "g_39", print_hash_value);
        1:  122:  transparent_crc(g_40, "g_40", print_hash_value);
        1:  123:  transparent_crc(g_60, "g_60", print_hash_value);
        1:  124:  transparent_crc(g_61, "g_61", print_hash_value);
        5:  125:  for (i = 0; i < 4; i++) {
       12:  126:    for (j = 0; j < 2; j++) {
        8:  127:      transparent_crc(g_115[i][j], "g_115[i][j]", print_hash_value);
        8:  128:      if (print_hash_value)
    #####:  129:        printf("index = [%d][%d]\n", i, j);
        -:  130:    }
        -:  131:  }
        1:  132:  transparent_crc(g_122, "g_122", print_hash_value);
        3:  133:  for (i = 0; i < 2; i++) {
       10:  134:    for (j = 0; j < 4; j++) {
       24:  135:      for (k = 0; k < 2; k++) {
       16:  136:        transparent_crc(g_145[i][j][k], "g_145[i][j][k]", print_hash_value);
       16:  137:        if (print_hash_value)
    #####:  138:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  139:      }
        -:  140:    }
        -:  141:  }
        3:  142:  for (i = 0; i < 2; i++) {
        8:  143:    for (j = 0; j < 3; j++) {
       18:  144:      for (k = 0; k < 2; k++) {
       12:  145:        transparent_crc(g_146[i][j][k], "g_146[i][j][k]", print_hash_value);
       12:  146:        if (print_hash_value)
    #####:  147:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  148:      }
        -:  149:    }
        -:  150:  }
        1:  151:  transparent_crc(g_147, "g_147", print_hash_value);
        1:  152:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  153:  return 0;
        -:  154:}
