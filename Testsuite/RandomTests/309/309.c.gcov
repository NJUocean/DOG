        -:    0:Source:309.c
        -:    0:Graph:309.gcno
        -:    0:Data:309.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:union U1 {
        -:    7:  volatile int64_t f0;
        -:    8:  int8_t f1;
        -:    9:};
        -:   10:
        -:   11:static uint64_t g_18 = 18446744073709551615UL;
        -:   12:static const volatile uint64_t g_20 = 0x79AE4F78D7CBAE8BLL;
        -:   13:static uint64_t *g_23 = (void *)0;
        -:   14:static uint32_t g_29 = 0xA6D786FFL;
        -:   15:static int64_t g_31 = (-4L);
        -:   16:static volatile union U1 g_36 = {0x80A2560131B3B333LL};
        -:   17:static int32_t g_48[3][2] = {{0x007B4AD2L, 0x007B4AD2L}, {0x007B4AD2L, 0x007B4AD2L}, {0x007B4AD2L, 0x007B4AD2L}};
        -:   18:static int64_t g_49 = 0xB4B20F959328DFE9LL;
        -:   19:static uint32_t g_73 = 0UL;
        -:   20:static int32_t g_76 = 0x505EE192L;
        -:   21:static int32_t g_78 = (-1L);
        -:   22:static int32_t *volatile g_77 = &g_78;
        -:   23:
        -:   24:static int16_t func_1(void);
        -:   25:static int16_t func_2(uint64_t p_3, uint32_t p_4);
        -:   26:
        1:   27:static int16_t func_1(void) {
        1:   28:  uint8_t l_5 = 0x45L;
        1:   29:  uint64_t *l_16 = (void *)0;
        1:   30:  uint64_t *l_17 = &g_18;
        1:   31:  const int32_t l_28 = 0L;
        1:   32:  int64_t *l_30 = &g_31;
        1:   33:  int32_t *l_53 = &g_48[0][0];
       1*:   34:  if ((func_2((((((*l_30) = (l_5 == (((safe_mul_func_int64_t_s_s((((safe_mod_func_uint64_t_u_u(((safe_mod_func_uint8_t_u_u(l_5, (safe_lshift_func_uint32_t_u_s(((safe_add_func_uint64_t_u_u(((*l_17) = l_5), (0xBC07C2076ACB8F2BLL ^ ((((safe_unary_minus_func_uint8_t_u(6UL)) & l_5), ((g_20, (safe_lshift_func_int64_t_s_u(((g_23 = (void *)0) != (((((safe_rshift_func_uint32_t_u_s((safe_mul_func_uint16_t_u_u((0x46BDL > 4UL), 4UL)), 3)) && 0L) & l_5) <= (-1L)), l_16)), l_28))) >= l_28)) > g_29)))) && 1L), 6)))) >= l_5), l_28)) & (-1L)) ^ g_29), l_28)), l_28) ^ g_29))) >= 0x6FC3314648A57461LL), 1UL), l_28), g_29) == g_29)) {
    #####:   35:    uint32_t l_52 = 18446744073709551615UL;
    #####:   36:    uint32_t *l_72 = &g_73;
        -:   37:    uint64_t l_74[3];
    #####:   38:    int32_t *l_75 = &g_76;
        -:   39:    int i;
    #####:   40:    for (i = 0; i < 3; i++)
    #####:   41:      l_74[i] = 0xADF13F3F2C75BC62LL;
    #####:   42:    (*l_75) &= (~(((((g_20 > (l_52 = l_5)), l_53) != &g_48[0][0]), (safe_mul_func_int8_t_s_s((safe_mod_func_uint8_t_u_u((safe_sub_func_uint16_t_u_u((((*l_72) = (safe_mul_func_int8_t_s_s(9L, ((safe_lshift_func_int64_t_s_s((safe_sub_func_int32_t_s_s((safe_div_func_uint64_t_u_u((((((safe_lshift_func_uint32_t_u_u((safe_lshift_func_uint8_t_u_s((0xB9E2BF2DCFCB68B6LL ^ l_52), 2)), ((*l_53) <= 0x1983L))), l_17) != l_16) < (*l_53)) && g_48[2][1]), l_52)), g_18)), g_48[0][0])) > 0x0A70L)))), 0x775EL), g_29)), 1L)), (-1L)))) & l_74[2]));
    #####:   43:    for (g_49 = 0; (g_49 <= 2); g_49 += 1) {
        -:   44:      int i;
    #####:   45:      if (l_74[g_49])
    #####:   46:        break;
    #####:   47:      (*g_77) &= ((*l_53), (*l_75));
        -:   48:    }
        -:   49:  } else {
        1:   50:    uint32_t l_81 = 0x341B0B2AL;
        1:   51:    for (g_78 = 0; (g_78 == (-3)); g_78 = safe_sub_func_int32_t_s_s(g_78, 5)) {
    #####:   52:      return l_81;
        -:   53:    }
        -:   54:  }
       1*:   55:  for (g_18 = 0; (g_18 > 20); g_18 = safe_add_func_int8_t_s_s(g_18, 2)) {
    #####:   56:    (*l_53) = 0x0AE94942L;
        -:   57:  }
        1:   58:  return g_73;
        -:   59:}
        -:   60:
        1:   61:static int16_t func_2(uint64_t p_3, uint32_t p_4) {
        -:   62:  const uint64_t *l_37[4];
        1:   63:  int32_t l_42 = 0x0B8B0E31L;
        1:   64:  int32_t l_43 = 0L;
        1:   65:  int64_t *l_45 = (void *)0;
        1:   66:  int64_t **l_44 = &l_45;
        1:   67:  int32_t *l_46 = (void *)0;
        1:   68:  int32_t *l_47 = &g_48[0][0];
        1:   69:  int32_t *l_50 = &l_42;
        -:   70:  int i;
        5:   71:  for (i = 0; i < 4; i++)
        4:   72:    l_37[i] = (void *)0;
        1:   73:  (*l_50) = (0L ^ (safe_div_func_uint16_t_u_u((safe_sub_func_int64_t_s_s(((g_36, l_37[3]) != &g_18), (&g_18 == (((void *)0 == &g_31), &p_3)))), ((g_49 = (((*l_47) |= ((((*l_44) = (((l_43 ^= (safe_sub_func_int8_t_s_s((safe_rshift_func_int8_t_s_s(((p_4 >= g_29) >= l_42), 5)), g_29))) != (-7L)), (void *)0)) == (void *)0) & l_42)) >= 0x350B8378L)) | (-1L)))));
        1:   74:  return g_49;
        -:   75:}
        -:   76:
        1:   77:int main(int argc, char *argv[]) {
        -:   78:  int i, j;
        1:   79:  int print_hash_value = 0;
       1*:   80:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   81:    print_hash_value = 1;
        1:   82:  platform_main_begin();
        1:   83:  crc32_gentab();
        1:   84:  func_1();
        1:   85:  transparent_crc(g_18, "g_18", print_hash_value);
        1:   86:  transparent_crc(g_20, "g_20", print_hash_value);
        1:   87:  transparent_crc(g_29, "g_29", print_hash_value);
        1:   88:  transparent_crc(g_31, "g_31", print_hash_value);
        1:   89:  transparent_crc(g_36.f0, "g_36.f0", print_hash_value);
        4:   90:  for (i = 0; i < 3; i++) {
        9:   91:    for (j = 0; j < 2; j++) {
        6:   92:      transparent_crc(g_48[i][j], "g_48[i][j]", print_hash_value);
        6:   93:      if (print_hash_value)
    #####:   94:        printf("index = [%d][%d]\n", i, j);
        -:   95:    }
        -:   96:  }
        1:   97:  transparent_crc(g_49, "g_49", print_hash_value);
        1:   98:  transparent_crc(g_73, "g_73", print_hash_value);
        1:   99:  transparent_crc(g_76, "g_76", print_hash_value);
        1:  100:  transparent_crc(g_78, "g_78", print_hash_value);
        1:  101:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  102:  return 0;
        -:  103:}
