        -:    0:Source:983.c
        -:    0:Graph:983.gcno
        -:    0:Data:983.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S0 {
        -:    9:  volatile int8_t f0;
        -:   10:  signed f1 : 4;
        -:   11:};
        -:   12:#pragma pack(pop)
        -:   13:
        -:   14:static volatile int64_t g_8[5][4] = {{(-1L), 0L, 5L, 5L}, {0x0CBEB969161D594DLL, 0x0CBEB969161D594DLL, (-1L), 5L}, {(-9L), 0L, (-9L), (-1L)}, {(-9L), (-1L), (-1L), (-9L)}, {0x0CBEB969161D594DLL, (-1L), 5L, (-1L)}};
        -:   15:static uint32_t g_11[3] = {0UL, 0UL, 0UL};
        -:   16:static uint64_t g_14 = 0x8CCEDB7758B39D20LL;
        -:   17:static uint32_t g_22 = 1UL;
        -:   18:static volatile struct S0 g_24 = {-4L, 3};
        -:   19:static volatile struct S0 g_25[5][5] = {{{0xEAL, 0}, {0L, 1}, {1L, -2}, {1L, -2}, {0L, 1}}, {{0x76L, -1}, {0x02L, -0}, {0x1FL, 0}, {0L, 1}, {-7L, -3}}, {{0x02L, -0}, {1L, -2}, {0x1FL, 0}, {0L, -3}, {0x1FL, 0}}, {{-7L, -3}, {-7L, -3}, {1L, -2}, {0x76L, -1}, {0x55L, -3}}, {{0x02L, -0}, {0x55L, -3}, {0xEAL, 0}, {0L, 1}, {0L, 1}}};
        -:   20:static volatile int32_t g_31 = 0x46158E9DL;
        -:   21:static volatile int32_t *g_30 = &g_31;
        -:   22:static uint32_t g_55 = 0x05BA845DL;
        -:   23:static uint64_t *g_61 = &g_14;
        -:   24:static uint64_t **g_60 = &g_61;
        -:   25:static uint64_t ***volatile g_59[3] = {&g_60, &g_60, &g_60};
        -:   26:
        -:   27:static const uint32_t func_1(void);
        -:   28:static uint64_t func_2(uint32_t p_3, uint8_t p_4, uint32_t p_5, int32_t p_6);
        -:   29:
        1:   30:static const uint32_t func_1(void) {
        1:   31:  uint32_t l_7 = 0x66E58D02L;
        1:   32:  int32_t l_12 = 0xC8A52B4BL;
        1:   33:  uint64_t *l_13 = &g_14;
        1:   34:  uint32_t *l_21 = &g_22;
        1:   35:  int32_t l_23 = 4L;
        1:   36:  uint64_t **l_58 = (void *)0;
       1*:   37:  if (((func_2(l_7, (g_8[4][0] <= 4294967292UL), (((safe_sub_func_int16_t_s_s(g_11[0], (((l_23 = ((((l_7 == g_11[0]) || ((l_12 = g_11[0]), g_11[0])) & ((*l_13)--)) || (l_12 = ((safe_div_func_int32_t_s_s((safe_sub_func_uint32_t_u_u(((*l_21) = (g_14 > 0UL)), l_7)), l_7)) > g_11[0])))) != 1L) ^ l_7))), 0UL) ^ 0x7218670FC24489BELL), l_7) <= g_11[1]), 0xE1D67A3DL)) {
       1*:   38:    for (g_14 = 0; (g_14 > 19); ++g_14) {
    #####:   39:      uint64_t l_33 = 0xC8BB6AF833954656LL;
    #####:   40:      int32_t *l_45 = &l_12;
    #####:   41:      for (l_12 = 0; (l_12 < (-7)); l_12 = safe_sub_func_int8_t_s_s(l_12, 4)) {
    #####:   42:        volatile int32_t **l_32 = &g_30;
    #####:   43:        (*l_32) = g_30;
    #####:   44:        if (l_33)
    #####:   45:          continue;
        -:   46:      }
    #####:   47:      (*l_45) ^= (safe_lshift_func_uint32_t_u_u(g_24.f1, (((*l_21) = 0UL) != (+((safe_add_func_int32_t_s_s((g_11[0] && 7UL), (((safe_sub_func_uint64_t_u_u(0x62D17F4926A67225LL, ((g_11[0], g_11[0]) > (safe_lshift_func_uint8_t_u_s((safe_lshift_func_int64_t_s_u((g_11[1] | 0xF9BDL), g_11[0])), 2))))) & 65535UL) < l_33))), 0x64FCL)))));
        -:   48:    }
       28:   49:    for (g_14 = 0; (g_14 <= 26); g_14++) {
       27:   50:      (*g_30) = 0x5545654AL;
       27:   51:      l_23 &= 8L;
        -:   52:    }
        -:   53:  } else {
        -:   54:    int32_t *l_52[3][1][5] = {{{&l_23, &l_23, &l_23, &l_23, &l_23}}, {{&l_23, &l_23, &l_23, &l_23, &l_23}}, {{&l_23, &l_23, &l_23, &l_23, &l_23}}};
        -:   55:    int i, j, k;
        -:   56:    for (g_22 = 0; (g_22 == 15); g_22++) {
        -:   57:      int32_t l_54 = (-7L);
        -:   58:      for (l_12 = 0; (l_12 == 26); l_12++) {
        -:   59:        int32_t **l_53 = &l_52[1][0][2];
        -:   60:        (*l_53) = l_52[0][0][0];
        -:   61:        (*g_30) = (*g_30);
        -:   62:      }
        -:   63:      ++g_55;
        -:   64:    }
        -:   65:  }
        1:   66:  l_58 = l_58;
        1:   67:  return l_12;
        -:   68:}
        -:   69:
        1:   70:static uint64_t func_2(uint32_t p_3, uint8_t p_4, uint32_t p_5, int32_t p_6) {
        1:   71:  g_25[4][0] = g_24;
        1:   72:  for (g_14 = 0; (g_14 <= 2); g_14 += 1) {
        -:   73:    int i;
        1:   74:    return g_11[g_14];
        -:   75:  }
    #####:   76:  return g_8[1][3];
        -:   77:}
        -:   78:
        1:   79:int main(int argc, char *argv[]) {
        -:   80:  int i, j;
        1:   81:  int print_hash_value = 0;
       1*:   82:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   83:    print_hash_value = 1;
        1:   84:  platform_main_begin();
        1:   85:  crc32_gentab();
        1:   86:  func_1();
        6:   87:  for (i = 0; i < 5; i++) {
       25:   88:    for (j = 0; j < 4; j++) {
       20:   89:      transparent_crc(g_8[i][j], "g_8[i][j]", print_hash_value);
       20:   90:      if (print_hash_value)
    #####:   91:        printf("index = [%d][%d]\n", i, j);
        -:   92:    }
        -:   93:  }
        4:   94:  for (i = 0; i < 3; i++) {
        3:   95:    transparent_crc(g_11[i], "g_11[i]", print_hash_value);
        3:   96:    if (print_hash_value)
    #####:   97:      printf("index = [%d]\n", i);
        -:   98:  }
        1:   99:  transparent_crc(g_14, "g_14", print_hash_value);
        1:  100:  transparent_crc(g_22, "g_22", print_hash_value);
        1:  101:  transparent_crc(g_24.f0, "g_24.f0", print_hash_value);
        1:  102:  transparent_crc(g_24.f1, "g_24.f1", print_hash_value);
        6:  103:  for (i = 0; i < 5; i++) {
       30:  104:    for (j = 0; j < 5; j++) {
       25:  105:      transparent_crc(g_25[i][j].f0, "g_25[i][j].f0", print_hash_value);
       25:  106:      transparent_crc(g_25[i][j].f1, "g_25[i][j].f1", print_hash_value);
       25:  107:      if (print_hash_value)
    #####:  108:        printf("index = [%d][%d]\n", i, j);
        -:  109:    }
        -:  110:  }
        1:  111:  transparent_crc(g_31, "g_31", print_hash_value);
        1:  112:  transparent_crc(g_55, "g_55", print_hash_value);
        1:  113:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  114:  return 0;
        -:  115:}
