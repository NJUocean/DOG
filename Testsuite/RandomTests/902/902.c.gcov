        -:    0:Source:902.c
        -:    0:Graph:902.gcno
        -:    0:Data:902.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:union U0 {
        -:    7:  volatile int32_t f0;
        -:    8:  volatile int8_t f1;
        -:    9:  int32_t f2;
        -:   10:  uint16_t f3;
        -:   11:  uint32_t f4;
        -:   12:};
        -:   13:
        -:   14:static int32_t g_4 = 0xE29EA414L;
        -:   15:static volatile int32_t g_10 = 0L;
        -:   16:static volatile uint64_t g_13 = 18446744073709551615UL;
        -:   17:static union U0 g_26 = {9L};
        -:   18:static uint32_t g_34 = 4294967288UL;
        -:   19:static volatile uint8_t g_38 = 0xC7L;
        -:   20:static uint32_t g_42 = 0xAB10E3A1L;
        -:   21:static const uint32_t g_54 = 2UL;
        -:   22:static const uint32_t *g_53 = &g_54;
        -:   23:static const int32_t *g_59[4][5][4] = {{{(void *)0, (void *)0, &g_4, &g_4}, {&g_4, &g_4, &g_4, &g_4}, {(void *)0, (void *)0, (void *)0, &g_4}, {&g_4, &g_4, (void *)0, &g_4}, {(void *)0, (void *)0, &g_4, &g_4}}, {{&g_4, &g_4, &g_4, &g_4}, {(void *)0, (void *)0, (void *)0, &g_4}, {&g_4, &g_4, (void *)0, &g_4}, {(void *)0, (void *)0, &g_4, &g_4}, {&g_4, &g_4, &g_4, &g_4}}, {{(void *)0, (void *)0, (void *)0, &g_4}, {&g_4, &g_4, (void *)0, &g_4}, {(void *)0, (void *)0, &g_4, &g_4}, {&g_4, &g_4, &g_4, &g_4}, {(void *)0, (void *)0, (void *)0, &g_4}}, {{&g_4, &g_4, (void *)0, &g_4}, {(void *)0, (void *)0, &g_4, &g_4}, {&g_4, &g_4, &g_4, &g_4}, {(void *)0, (void *)0, (void *)0, &g_4}, {&g_4, &g_4, (void *)0, &g_4}}};
        -:   24:static const int32_t *volatile *volatile g_58 = &g_59[3][1][3];
        -:   25:static const int32_t *volatile *volatile *volatile g_60[5] = {&g_58, &g_58, &g_58, &g_58, &g_58};
        -:   26:static int32_t g_69 = 0xFA27C819L;
        -:   27:static uint8_t g_84 = 0x04L;
        -:   28:static int64_t g_108 = (-9L);
        -:   29:static int64_t g_110 = 0x47606124FAE1B8E0LL;
        -:   30:static volatile union U0 g_144 = {0L};
        -:   31:static volatile union U0 *g_143 = &g_144;
        -:   32:static volatile union U0 **g_142 = &g_143;
        -:   33:static volatile int8_t g_160[3] = {0xD1L, 0xD1L, 0xD1L};
        -:   34:static volatile uint32_t g_162 = 0UL;
        -:   35:
        -:   36:static int16_t func_1(void);
        -:   37:static uint64_t func_21(int32_t *p_22, int16_t p_23, int32_t *p_24, int8_t p_25);
        -:   38:
        1:   39:static int16_t func_1(void) {
        1:   40:  uint64_t l_2 = 0xC19C5A654FDDD3F4LL;
        1:   41:  int32_t l_7 = 0x3026D8D3L;
        1:   42:  int32_t l_8 = 0xB785B647L;
        1:   43:  int32_t l_9 = 0xD5467356L;
        1:   44:  int32_t l_11 = 0L;
        1:   45:  int32_t l_12 = 1L;
        -:   46:  int32_t l_16[1];
        -:   47:  int16_t l_56[3][1][3];
        1:   48:  const int32_t *volatile *volatile l_62[1][4] = {{&g_59[3][1][3], &g_59[3][1][3], &g_59[3][1][3], &g_59[3][1][3]}};
        1:   49:  uint32_t l_71 = 0x42BED38BL;
        1:   50:  uint8_t *l_83 = &g_84;
        1:   51:  union U0 *l_112 = &g_26;
        1:   52:  uint64_t l_140 = 0UL;
        -:   53:  int i, j, k;
        2:   54:  for (i = 0; i < 1; i++)
        1:   55:    l_16[i] = (-1L);
        4:   56:  for (i = 0; i < 3; i++) {
        6:   57:    for (j = 0; j < 1; j++) {
       12:   58:      for (k = 0; k < 3; k++)
        9:   59:        l_56[i][j][k] = 1L;
        -:   60:    }
        -:   61:  }
        1:   62:  if (l_2) {
        1:   63:    int32_t *l_3 = &g_4;
        1:   64:    int32_t *l_5 = (void *)0;
        1:   65:    int32_t *l_6[4][3] = {{(void *)0, (void *)0, (void *)0}, {&g_4, &g_4, &g_4}, {(void *)0, (void *)0, (void *)0}, {&g_4, &g_4, &g_4}};
        -:   66:    int i, j;
        1:   67:    --g_13;
        -:   68:  } else {
    #####:   69:    int8_t l_32 = (-1L);
    #####:   70:    int16_t l_43 = (-8L);
    #####:   71:    union U0 **l_113 = &l_112;
    #####:   72:    for (l_11 = 0; (l_11 <= 0); l_11 += 1) {
    #####:   73:      int32_t *l_31 = &l_9;
    #####:   74:      uint32_t *l_33 = &g_34;
    #####:   75:      uint8_t *l_41[3][3] = {{(void *)0, (void *)0, (void *)0}, {(void *)0, (void *)0, (void *)0}, {(void *)0, (void *)0, (void *)0}};
    #####:   76:      int32_t l_70 = (-1L);
        -:   77:      int i, j;
        -:   78:    }
    #####:   79:    (*l_113) = l_112;
        -:   80:  }
        6:   81:  for (l_7 = 4; (l_7 >= 0); l_7 -= 1) {
        5:   82:    uint64_t l_124 = 0x6F9888A1598D8379LL;
        5:   83:    uint32_t *l_139 = &g_34;
        5:   84:    int32_t *l_141 = &g_4;
        5:   85:    uint8_t *l_146 = &g_84;
        -:   86:    int i;
       5*:   87:    if ((safe_div_func_uint8_t_u_u((safe_mod_func_uint32_t_u_u(8UL, ((*l_141) = (safe_add_func_int16_t_s_s((safe_div_func_int32_t_s_s((safe_mul_func_uint8_t_u_u(l_124, (l_124, (safe_add_func_int8_t_s_s(g_38, (l_124 || ((((safe_sub_func_int32_t_s_s((safe_div_func_uint64_t_u_u(((safe_div_func_uint8_t_u_u((safe_add_func_uint32_t_u_u(((l_16[0] == (safe_div_func_int8_t_s_s(((g_110 < l_9) <= ((*l_139) = ((safe_mul_func_int64_t_s_s(g_108, l_124)) != 0xE6BA5C88L))), g_110))) & l_124), l_140)), 8UL)) ^ 18446744073709551610UL), l_124)), 0x9C01F846L)) == 0x32677FA2621F7AE5LL), l_8) ^ g_54))))))), (-1L))), l_12))))), g_69))) {
    #####:   88:      for (g_13 = 0; g_13 < 5; g_13 += 1) {
    #####:   89:        g_60[g_13] = &g_58;
        -:   90:      }
        -:   91:    } else {
        5:   92:      int32_t *l_145 = &g_69;
        5:   93:      (*l_145) |= (g_4 ^= (g_13 < (g_142 != (void *)0)));
        -:   94:    }
       30:   95:    for (l_2 = 0; (l_2 <= 4); l_2 += 1) {
       25:   96:      uint8_t *const l_147 = &g_84;
       25:   97:      int32_t *l_148 = &g_4;
       25:   98:      int32_t l_149 = 0xC9769B25L;
       25:   99:      int32_t *l_150 = (void *)0;
       25:  100:      int32_t *l_151 = &l_9;
       25:  101:      int32_t *l_152 = &l_9;
       25:  102:      int32_t *l_153 = &l_9;
       25:  103:      int32_t *l_154 = (void *)0;
       25:  104:      int32_t *l_155 = (void *)0;
       25:  105:      int32_t *l_156 = (void *)0;
       25:  106:      int32_t *l_157 = (void *)0;
       25:  107:      int32_t *l_158 = (void *)0;
       25:  108:      int32_t *l_159 = &g_69;
       25:  109:      int32_t *l_161 = &l_149;
       25:  110:      g_4 = (l_146 != l_147);
       25:  111:      g_162--;
        -:  112:    }
        -:  113:  }
        1:  114:  return g_38;
        -:  115:}
        -:  116:
    #####:  117:static uint64_t func_21(int32_t *p_22, int16_t p_23, int32_t *p_24, int8_t p_25) {
    #####:  118:  int32_t *l_35 = &g_4;
    #####:  119:  int32_t *l_36 = &g_4;
        -:  120:  int32_t *l_37[1];
        -:  121:  int i;
    #####:  122:  for (i = 0; i < 1; i++)
    #####:  123:    l_37[i] = &g_4;
    #####:  124:  ++g_38;
    #####:  125:  return g_26.f0;
        -:  126:}
        -:  127:
        1:  128:int main(int argc, char *argv[]) {
        -:  129:  int i, j, k;
        1:  130:  int print_hash_value = 0;
       1*:  131:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  132:    print_hash_value = 1;
        1:  133:  platform_main_begin();
        1:  134:  crc32_gentab();
        1:  135:  func_1();
        1:  136:  transparent_crc(g_4, "g_4", print_hash_value);
        1:  137:  transparent_crc(g_10, "g_10", print_hash_value);
        1:  138:  transparent_crc(g_13, "g_13", print_hash_value);
        1:  139:  transparent_crc(g_26.f0, "g_26.f0", print_hash_value);
        1:  140:  transparent_crc(g_34, "g_34", print_hash_value);
        1:  141:  transparent_crc(g_38, "g_38", print_hash_value);
        1:  142:  transparent_crc(g_42, "g_42", print_hash_value);
        1:  143:  transparent_crc(g_54, "g_54", print_hash_value);
        1:  144:  transparent_crc(g_69, "g_69", print_hash_value);
        1:  145:  transparent_crc(g_84, "g_84", print_hash_value);
        1:  146:  transparent_crc(g_108, "g_108", print_hash_value);
        1:  147:  transparent_crc(g_110, "g_110", print_hash_value);
        1:  148:  transparent_crc(g_144.f0, "g_144.f0", print_hash_value);
        4:  149:  for (i = 0; i < 3; i++) {
        3:  150:    transparent_crc(g_160[i], "g_160[i]", print_hash_value);
        3:  151:    if (print_hash_value)
    #####:  152:      printf("index = [%d]\n", i);
        -:  153:  }
        1:  154:  transparent_crc(g_162, "g_162", print_hash_value);
        1:  155:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  156:  return 0;
        -:  157:}
