        -:    0:Source:807.c
        -:    0:Graph:807.gcno
        -:    0:Data:807.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S0 {
        -:    9:  uint32_t f0;
        -:   10:  const int64_t f1;
        -:   11:  volatile int64_t f2;
        -:   12:};
        -:   13:#pragma pack(pop)
        -:   14:
        -:   15:static volatile int32_t g_3 = 0x835A23E8L;
        -:   16:static volatile int32_t g_4 = (-7L);
        -:   17:static int32_t g_5 = 0L;
        -:   18:static int32_t g_9 = 0xB7C7008BL;
        -:   19:static int32_t *volatile g_8 = &g_9;
        -:   20:static struct S0 g_10 = {1UL, 0L, -6L};
        -:   21:static int32_t g_28 = 0x9ED5B606L;
        -:   22:static int64_t g_33[3][1] = {{0L}, {0L}, {0L}};
        -:   23:static int16_t g_36[2][2][3] = {{{1L, 1L, 1L}, {1L, 1L, 1L}}, {{1L, 1L, 1L}, {1L, 1L, 1L}}};
        -:   24:
        -:   25:static int64_t func_1(void);
        -:   26:static int32_t func_11(int16_t p_12, int32_t p_13, int64_t p_14, int32_t *const p_15);
        -:   27:
        1:   28:static int64_t func_1(void) {
        -:   29:  int32_t l_2[3][1];
        -:   30:  int32_t *l_49[1];
        -:   31:  int i, j;
        4:   32:  for (i = 0; i < 3; i++) {
        6:   33:    for (j = 0; j < 1; j++)
        3:   34:      l_2[i][j] = 1L;
        -:   35:  }
        2:   36:  for (i = 0; i < 1; i++)
        1:   37:    l_49[i] = (void *)0;
       1*:   38:  for (g_5 = 0; (g_5 <= 0); g_5 += 1) {
        1:   39:    uint64_t l_7 = 0UL;
        1:   40:    if ((+l_7)) {
    #####:   41:      uint16_t l_24 = 1UL;
    #####:   42:      int32_t l_40 = (-4L);
    #####:   43:      for (l_7 = 0; (l_7 <= 0); l_7 += 1) {
    #####:   44:        uint32_t l_41 = 1UL;
        -:   45:        int i, j;
    #####:   46:        (*g_8) &= (l_2[(l_7 + 1)][l_7] = (l_2[(l_7 + 2)][l_7] || l_2[1][0]));
    #####:   47:        (*g_8) = (((l_40 = (g_10, func_11((((&g_5 == ((((((safe_mul_func_int16_t_s_s((safe_add_func_uint16_t_u_u((safe_add_func_uint8_t_u_u(254UL, g_3)), g_10.f1)), (&g_9 == &g_9))) && (safe_div_func_uint32_t_u_u((8L && l_24), (*g_8)))), g_10.f1) && g_10.f2) && l_7), (void *)0)), g_10.f2) > l_2[2][0]), g_10.f1, l_7, &l_2[2][0]))) && g_36[1][0][2]), l_41);
        -:   48:      }
        -:   49:    } else {
        1:   50:      return g_3;
        -:   51:    }
        -:   52:  }
    #####:   53:  (*g_8) = ((safe_mod_func_int64_t_s_s(((*g_8), ((+(safe_sub_func_uint8_t_u_u(g_4, (safe_mod_func_int8_t_s_s(1L, g_9))))) == g_36[1][0][2])), l_2[0][0])) > g_9);
    #####:   54:  return g_36[1][0][2];
        -:   55:}
        -:   56:
    #####:   57:static int32_t func_11(int16_t p_12, int32_t p_13, int64_t p_14, int32_t *const p_15) {
    #####:   58:  int64_t l_34 = 1L;
    #####:   59:  int32_t l_35 = 1L;
    #####:   60:  for (g_9 = 0; (g_9 < 4); ++g_9) {
    #####:   61:    int32_t *l_27 = &g_28;
    #####:   62:    int32_t *l_29 = &g_28;
    #####:   63:    int32_t *l_30 = &g_28;
    #####:   64:    int32_t *l_31 = &g_28;
        -:   65:    int32_t *l_32[2];
    #####:   66:    uint32_t l_37 = 0xCEA59F7CL;
        -:   67:    int i;
    #####:   68:    for (i = 0; i < 2; i++)
    #####:   69:      l_32[i] = &g_28;
    #####:   70:    l_37--;
        -:   71:  }
    #####:   72:  return l_34;
        -:   73:}
        -:   74:
        1:   75:int main(int argc, char *argv[]) {
        -:   76:  int i, j, k;
        1:   77:  int print_hash_value = 0;
       1*:   78:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   79:    print_hash_value = 1;
        1:   80:  platform_main_begin();
        1:   81:  crc32_gentab();
        1:   82:  func_1();
        1:   83:  transparent_crc(g_3, "g_3", print_hash_value);
        1:   84:  transparent_crc(g_4, "g_4", print_hash_value);
        1:   85:  transparent_crc(g_5, "g_5", print_hash_value);
        1:   86:  transparent_crc(g_9, "g_9", print_hash_value);
        1:   87:  transparent_crc(g_10.f0, "g_10.f0", print_hash_value);
        1:   88:  transparent_crc(g_10.f1, "g_10.f1", print_hash_value);
        1:   89:  transparent_crc(g_10.f2, "g_10.f2", print_hash_value);
        1:   90:  transparent_crc(g_28, "g_28", print_hash_value);
        4:   91:  for (i = 0; i < 3; i++) {
        6:   92:    for (j = 0; j < 1; j++) {
        3:   93:      transparent_crc(g_33[i][j], "g_33[i][j]", print_hash_value);
        3:   94:      if (print_hash_value)
    #####:   95:        printf("index = [%d][%d]\n", i, j);
        -:   96:    }
        -:   97:  }
        3:   98:  for (i = 0; i < 2; i++) {
        6:   99:    for (j = 0; j < 2; j++) {
       16:  100:      for (k = 0; k < 3; k++) {
       12:  101:        transparent_crc(g_36[i][j][k], "g_36[i][j][k]", print_hash_value);
       12:  102:        if (print_hash_value)
    #####:  103:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  104:      }
        -:  105:    }
        -:  106:  }
        1:  107:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  108:  return 0;
        -:  109:}
