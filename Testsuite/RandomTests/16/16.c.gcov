        -:    0:Source:16.c
        -:    0:Graph:16.gcno
        -:    0:Data:16.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S0 {
        -:    9:  volatile unsigned f0 : 11;
        -:   10:  volatile unsigned f1 : 20;
        -:   11:  const unsigned f2 : 6;
        -:   12:  uint32_t f3;
        -:   13:  volatile unsigned f4 : 1;
        -:   14:};
        -:   15:#pragma pack(pop)
        -:   16:
        -:   17:union U1 {
        -:   18:  int32_t f0;
        -:   19:  uint64_t f1;
        -:   20:};
        -:   21:
        -:   22:union U3 {
        -:   23:  uint32_t f0;
        -:   24:  int32_t f1;
        -:   25:  signed f2 : 3;
        -:   26:  uint64_t f3;
        -:   27:};
        -:   28:
        -:   29:union U5 {
        -:   30:  volatile uint8_t f0;
        -:   31:  int64_t f1;
        -:   32:  const signed f2 : 10;
        -:   33:};
        -:   34:
        -:   35:static int32_t g_2 = 0x2ABBF9ACL;
        -:   36:static int32_t g_5 = 0x9D585ED0L;
        -:   37:static uint8_t g_19 = 1UL;
        -:   38:static volatile uint8_t g_36 = 246UL;
        -:   39:static volatile uint8_t *g_35 = &g_36;
        -:   40:static uint8_t g_38 = 255UL;
        -:   41:static union U3 g_41 = {3UL};
        -:   42:static uint32_t g_45 = 4294967295UL;
        -:   43:static int32_t g_46[2][3][1] = {{{0x22A22728L}, {0xA251ABE7L}, {0x22A22728L}}, {{0xA251ABE7L}, {0x22A22728L}, {0xA251ABE7L}}};
        -:   44:static uint64_t g_48[4] = {18446744073709551607UL, 18446744073709551607UL, 18446744073709551607UL, 18446744073709551607UL};
        -:   45:static int32_t g_56 = 0x8A6652F5L;
        -:   46:static volatile int16_t g_60 = 0xE74DL;
        -:   47:static uint8_t g_61 = 0xFCL;
        -:   48:static int32_t **volatile g_64 = (void *)0;
        -:   49:static int32_t *g_66 = &g_56;
        -:   50:static int32_t **volatile g_65 = &g_66;
        -:   51:static volatile struct S0 g_77 = {43, 803, 7, 0x49C99C4DL, 0};
        -:   52:static union U5 g_78 = {0x0EL};
        -:   53:static int32_t g_95 = 0x86155BF9L;
        -:   54:static int32_t g_98[3][2][2] = {{{8L, (-1L)}, {(-1L), 8L}}, {{(-6L), (-6L)}, {(-6L), 8L}}, {{(-1L), (-1L)}, {8L, (-1L)}}};
        -:   55:static int32_t g_100 = 0L;
        -:   56:
        -:   57:static uint32_t func_1(void);
        -:   58:static int32_t *func_8(const uint8_t p_9, const union U1 p_10, int32_t *p_11, int32_t *p_12);
        -:   59:
        1:   60:static uint32_t func_1(void) {
        1:   61:  const union U1 l_14 = {0x061A6520L};
        1:   62:  int32_t l_101 = (-1L);
       13:   63:  for (g_2 = 0; (g_2 != 12); g_2++) {
       12:   64:    int8_t l_20 = 0xE8L;
       12:   65:    uint16_t l_28 = 65526UL;
       12:   66:    uint8_t *l_37 = &g_38;
      12*:   67:    for (g_5 = (-17); (g_5 > 1); ++g_5) {
    #####:   68:      const int16_t l_13 = 0xCC47L;
    #####:   69:      union U3 l_17 = {4294967295UL};
    #####:   70:      uint8_t *l_18 = &g_19;
    #####:   71:      int64_t *l_91 = &g_78.f1;
    #####:   72:      int32_t *l_94 = &g_95;
    #####:   73:      uint32_t l_96 = 18446744073709551615UL;
    #####:   74:      int32_t *l_97 = &g_98[2][0][1];
    #####:   75:      int32_t *l_99 = &g_100;
    #####:   76:      (*g_65) = func_8(l_13, l_14, (((safe_mod_func_uint8_t_u_u((g_2, (l_17, ((*l_37) = (((l_20 = ((*l_18) = 255UL)) | g_2) != (safe_mul_func_int64_t_s_s((safe_lshift_func_int16_t_s_u((safe_unary_minus_func_uint8_t_u(g_2)), 13)), (safe_mod_func_int16_t_s_s((l_28, (safe_rshift_func_int64_t_s_s((safe_lshift_func_int64_t_s_u((safe_mod_func_int8_t_s_s(((g_35 == l_37) < g_38), 0xB4L)), g_2)), l_14.f0))), l_17.f0)))))))), g_2)) && g_5), (void *)0), &g_5);
    #####:   77:      l_101 = ((*l_99) &= ((*l_97) &= (l_17.f0 && (safe_mul_func_int32_t_s_s((safe_add_func_uint16_t_u_u(g_61, g_41.f0)), (!(safe_add_func_uint32_t_u_u(((((!(((*l_94) &= ((safe_mul_func_int64_t_s_s(l_17.f0, (((0x9823L | (g_77, (g_78, ((safe_mod_func_uint64_t_u_u((safe_mod_func_uint64_t_u_u(((safe_mul_func_int8_t_s_s((safe_lshift_func_int64_t_s_s((((safe_lshift_func_int32_t_s_s((safe_mul_func_uint32_t_u_u(((((*l_91) = g_56) >= (safe_lshift_func_uint16_t_u_u(65530UL, 1))) | l_14.f0), 0x0E8981CCL)), (**g_65))) > g_56) == 3UL), 17)), g_45)) == g_48[3]), g_5)), 4UL)) >= 0xBEBCL)))) && l_28), l_20))) <= g_41.f0)) < 4294967292UL)), g_95) || l_96), (*l_94)), g_19))))))));
        -:   78:    }
        -:   79:  }
        1:   80:  return g_98[2][0][1];
        -:   81:}
        -:   82:
    #####:   83:static int32_t *func_8(const uint8_t p_9, const union U1 p_10, int32_t *p_11, int32_t *p_12) {
    #####:   84:  int16_t l_42 = 8L;
    #####:   85:  uint32_t *l_43 = (void *)0;
        -:   86:  uint32_t *l_44[3];
    #####:   87:  uint64_t *l_47 = &g_48[3];
    #####:   88:  int32_t l_59[5][3][1] = {{{0x9FD593B8L}, {0x9FD593B8L}, {0x6969E96CL}}, {{0x9FD593B8L}, {0x9FD593B8L}, {0x6969E96CL}}, {{0x9FD593B8L}, {0x9FD593B8L}, {0x6969E96CL}}, {{0x9FD593B8L}, {0x9FD593B8L}, {0x6969E96CL}}, {{0x9FD593B8L}, {0x9FD593B8L}, {0x6969E96CL}}};
        -:   89:  int i, j, k;
    #####:   90:  for (i = 0; i < 3; i++)
    #####:   91:    l_44[i] = &g_45;
    #####:   92:  if (((((safe_mod_func_int64_t_s_s((((*p_12) <= (g_41, g_2)) <= (g_45 &= l_42)), (++(*l_47)))) || (p_11 != (l_44[1] = &g_45))), ((safe_add_func_uint8_t_u_u(l_42, (((safe_lshift_func_uint32_t_u_u(((void *)0 != p_12), 31)) > g_46[1][1][0]) || (*g_35)))) | g_48[0])), g_38)) {
    #####:   93:    int32_t *l_55 = &g_56;
    #####:   94:    int32_t *l_57 = &g_56;
        -:   95:    int32_t *l_58[3];
        -:   96:    int i;
    #####:   97:    for (i = 0; i < 3; i++)
    #####:   98:      l_58[i] = &g_56;
    #####:   99:    g_61++;
        -:  100:  } else {
    #####:  101:    return &g_5;
        -:  102:  }
    #####:  103:  return &g_2;
        -:  104:}
        -:  105:
        1:  106:int main(int argc, char *argv[]) {
        -:  107:  int i, j, k;
        1:  108:  int print_hash_value = 0;
       1*:  109:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  110:    print_hash_value = 1;
        1:  111:  platform_main_begin();
        1:  112:  crc32_gentab();
        1:  113:  func_1();
        1:  114:  transparent_crc(g_2, "g_2", print_hash_value);
        1:  115:  transparent_crc(g_5, "g_5", print_hash_value);
        1:  116:  transparent_crc(g_19, "g_19", print_hash_value);
        1:  117:  transparent_crc(g_36, "g_36", print_hash_value);
        1:  118:  transparent_crc(g_38, "g_38", print_hash_value);
        1:  119:  transparent_crc(g_41.f0, "g_41.f0", print_hash_value);
        1:  120:  transparent_crc(g_45, "g_45", print_hash_value);
        3:  121:  for (i = 0; i < 2; i++) {
        8:  122:    for (j = 0; j < 3; j++) {
       12:  123:      for (k = 0; k < 1; k++) {
        6:  124:        transparent_crc(g_46[i][j][k], "g_46[i][j][k]", print_hash_value);
        6:  125:        if (print_hash_value)
    #####:  126:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  127:      }
        -:  128:    }
        -:  129:  }
        5:  130:  for (i = 0; i < 4; i++) {
        4:  131:    transparent_crc(g_48[i], "g_48[i]", print_hash_value);
        4:  132:    if (print_hash_value)
    #####:  133:      printf("index = [%d]\n", i);
        -:  134:  }
        1:  135:  transparent_crc(g_56, "g_56", print_hash_value);
        1:  136:  transparent_crc(g_60, "g_60", print_hash_value);
        1:  137:  transparent_crc(g_61, "g_61", print_hash_value);
        1:  138:  transparent_crc(g_77.f0, "g_77.f0", print_hash_value);
        1:  139:  transparent_crc(g_77.f1, "g_77.f1", print_hash_value);
        1:  140:  transparent_crc(g_77.f2, "g_77.f2", print_hash_value);
        1:  141:  transparent_crc(g_77.f3, "g_77.f3", print_hash_value);
        1:  142:  transparent_crc(g_77.f4, "g_77.f4", print_hash_value);
        1:  143:  transparent_crc(g_95, "g_95", print_hash_value);
        4:  144:  for (i = 0; i < 3; i++) {
        9:  145:    for (j = 0; j < 2; j++) {
       18:  146:      for (k = 0; k < 2; k++) {
       12:  147:        transparent_crc(g_98[i][j][k], "g_98[i][j][k]", print_hash_value);
       12:  148:        if (print_hash_value)
    #####:  149:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  150:      }
        -:  151:    }
        -:  152:  }
        1:  153:  transparent_crc(g_100, "g_100", print_hash_value);
        1:  154:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  155:  return 0;
        -:  156:}
