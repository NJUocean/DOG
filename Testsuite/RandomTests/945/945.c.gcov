        -:    0:Source:945.c
        -:    0:Graph:945.gcno
        -:    0:Data:945.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S1 {
        -:    9:  volatile uint16_t f0;
        -:   10:  uint32_t f1;
        -:   11:};
        -:   12:#pragma pack(pop)
        -:   13:
        -:   14:struct S2 {
        -:   15:  const signed f0 : 17;
        -:   16:  unsigned f1 : 2;
        -:   17:};
        -:   18:
        -:   19:static uint32_t g_5[5][1] = {{4294967291UL}, {4294967295UL}, {4294967291UL}, {4294967295UL}, {4294967291UL}};
        -:   20:static uint8_t g_23 = 1UL;
        -:   21:static uint32_t g_38 = 4294967293UL;
        -:   22:static int8_t g_40[5] = {1L, 1L, 1L, 1L, 1L};
        -:   23:static uint16_t g_41[4][5] = {{0xF5D3L, 0xF5D3L, 0x4A4EL, 0x4A4EL, 0xF5D3L}, {65535UL, 1UL, 65535UL, 1UL, 65535UL}, {0xF5D3L, 0x4A4EL, 0x4A4EL, 0xF5D3L, 0xF5D3L}, {2UL, 1UL, 2UL, 1UL, 2UL}};
        -:   24:static uint64_t g_43 = 0x2039CE85662B132DLL;
        -:   25:static int32_t *volatile g_60 = (void *)0;
        -:   26:static int32_t g_62[1][3][2] = {{{0xF5B60AA0L, 0xF5B60AA0L}, {0xF5B60AA0L, 0xF5B60AA0L}, {0xF5B60AA0L, 0xF5B60AA0L}}};
        -:   27:static int32_t g_65[3] = {(-1L), (-1L), (-1L)};
        -:   28:static int32_t *volatile g_64 = &g_65[2];
        -:   29:static int16_t g_120[5][2][5] = {{{3L, (-1L), 0x03F0L, (-1L), 3L}, {1L, (-1L), (-1L), 1L, 1L}}, {{0xAAF5L, (-1L), 0xAAF5L, 0x2F8DL, 0xAAF5L}, {1L, 1L, (-1L), (-1L), 1L}}, {{3L, 0x2F8DL, 0x03F0L, 0x2F8DL, 3L}, {1L, (-1L), (-1L), 1L, 1L}}, {{0xAAF5L, 0x2F8DL, 0xAAF5L, (-1L), 0xAAF5L}, {1L, 1L, (-1L), (-1L), 1L}}, {{3L, (-1L), 0x03F0L, (-1L), 3L}, {1L, (-1L), (-1L), 1L, 1L}}};
        -:   30:static const volatile uint32_t *const *g_122 = (void *)0;
        -:   31:static volatile struct S1 g_126 = {0xFF75L, 0xEE60D347L};
        -:   32:static int32_t g_129 = 0x9BB75F8FL;
        -:   33:
        -:   34:static struct S1 func_1(void);
        -:   35:static int32_t func_2(uint16_t p_3, int32_t p_4);
        -:   36:
        1:   37:static struct S1 func_1(void) {
        1:   38:  uint8_t l_8 = 0xC2L;
        1:   39:  uint8_t *l_22 = &g_23;
        1:   40:  uint8_t *l_36 = (void *)0;
        1:   41:  uint8_t *l_37 = (void *)0;
        -:   42:  int8_t *l_39[3][1];
        1:   43:  uint64_t *l_42 = &g_43;
        1:   44:  int32_t *l_128 = &g_129;
        -:   45:  int i, j;
        4:   46:  for (i = 0; i < 3; i++) {
        6:   47:    for (j = 0; j < 1; j++)
        3:   48:      l_39[i][j] = &g_40[2];
        -:   49:  }
       1*:   50:  (*l_128) ^= func_2(g_5[4][0], (safe_lshift_func_int64_t_s_u((l_8 != (safe_mod_func_uint64_t_u_u(((*l_42) = (0x8F9C25B054DBBE56LL < (safe_mul_func_int8_t_s_s(((safe_rshift_func_int64_t_s_s(9L, 58)) || (g_41[2][2] = (((g_40[2] ^= (safe_mod_func_int8_t_s_s((safe_rshift_func_uint16_t_u_u(((0xC7D24B5E495761BELL | (((g_5[3][0] < ((~((*l_22)++)) != (((l_8 | (g_38 = (safe_div_func_int8_t_s_s((safe_sub_func_uint8_t_u_u((safe_add_func_int16_t_s_s(((safe_sub_func_int32_t_s_s(((l_8 <= (safe_add_func_int64_t_s_s(g_5[3][0], l_8))) && g_5[4][0]), l_8)) == g_5[4][0]), l_8)), l_8)), g_5[2][0])))) != 0x6AL) <= 0xD77FC7DF39F3C5A4LL))) ^ g_5[2][0]) && 0xDAD4F6C5533F2A6ALL)) == g_5[3][0]), 1)), g_5[4][0]))) > 0xC9L) == g_5[3][0]))), g_5[4][0])))), 18446744073709551615UL))), 56)));
        1:   51:  return g_126;
        -:   52:}
        -:   53:
        1:   54:static int32_t func_2(uint16_t p_3, int32_t p_4) {
        1:   55:  uint16_t l_47 = 0xE3C1L;
        -:   56:  uint8_t *l_82[4][3][5];
        1:   57:  int64_t l_98 = 7L;
        1:   58:  uint8_t l_99 = 247UL;
        1:   59:  struct S2 l_107 = {-53, 0};
        -:   60:  int i, j, k;
        5:   61:  for (i = 0; i < 4; i++) {
       16:   62:    for (j = 0; j < 3; j++) {
       72:   63:      for (k = 0; k < 5; k++)
       60:   64:        l_82[i][j][k] = &g_23;
        -:   65:    }
        -:   66:  }
        1:   67:  if (p_3) {
        -:   68:    uint32_t l_46[1];
        1:   69:    uint16_t *l_50 = &g_41[2][2];
        1:   70:    uint32_t *l_55 = (void *)0;
        1:   71:    uint32_t *l_56 = &g_5[4][0];
        1:   72:    int8_t *l_57 = &g_40[2];
        -:   73:    int i;
        2:   74:    for (i = 0; i < 1; i++)
        1:   75:      l_46[i] = 18446744073709551615UL;
       1*:   76:    if ((safe_div_func_int16_t_s_s((l_46[0] || ((((((void *)0 == &g_23) <= l_47), (((*l_57) = (safe_mod_func_int32_t_s_s(((((*l_50) ^= 0UL) > (safe_mod_func_uint64_t_u_u(((((*l_56) = (((safe_mod_func_int8_t_s_s((g_5[4][0], ((0x2307D3E67B33DF12LL > 0xFBB05D09421A0E57LL) && (g_23 || p_4))), 0xF5L)) || g_40[2]) != p_3)) > p_4) >= 0x34L), p_4))), p_4), 0x9A24791AL))), p_4)) || 18446744073709551612UL) <= 0xA3L)), 0x68FBL))) {
    #####:   77:      int32_t *l_61 = &g_62[0][2][0];
    #####:   78:      (*l_61) |= (safe_lshift_func_uint32_t_u_s(g_5[4][0], 10));
        -:   79:    } else {
        1:   80:      int32_t *l_63 = &g_62[0][2][0];
        1:   81:      (*g_64) = ((*l_63) = l_46[0]);
        -:   82:    }
        -:   83:  } else {
    #####:   84:    int32_t l_95 = 0x6112DD26L;
    #####:   85:    uint32_t *l_108 = &g_5[1][0];
    #####:   86:    uint32_t *l_109 = &g_5[4][0];
    #####:   87:    for (l_47 = 0; (l_47 > 7); ++l_47) {
    #####:   88:      uint64_t *l_71 = &g_43;
    #####:   89:      int32_t l_94 = 0xF95C78EDL;
    #####:   90:      uint16_t *l_96 = (void *)0;
    #####:   91:      uint16_t *l_97 = &g_41[1][1];
    #####:   92:      int32_t l_100 = 0x5289E610L;
    #####:   93:      for (p_4 = 4; (p_4 >= 1); p_4 -= 1) {
        -:   94:        int i;
    #####:   95:        if (g_40[p_4])
    #####:   96:          break;
        -:   97:      }
    #####:   98:      if (((!(l_100 = ((g_40[2] & (safe_mul_func_uint64_t_u_u(((*l_71) = l_47), (safe_lshift_func_uint16_t_u_s(((safe_rshift_func_uint32_t_u_s(((safe_div_func_uint64_t_u_u((safe_mul_func_uint8_t_u_u((safe_mul_func_uint8_t_u_u(((void *)0 == l_82[2][2][3]), (safe_mul_func_uint8_t_u_u(((((*l_97) |= ((safe_div_func_uint8_t_u_u((((p_4 | ((p_3, (+(safe_mul_func_int16_t_s_s((65528UL && (safe_lshift_func_uint32_t_u_u(p_4, (safe_lshift_func_int8_t_s_s(((((0xA7E6D091L >= 0xD6B41A24L) < (-4L)) ^ (*g_64)), g_65[2]), g_40[2]))))), l_94)))) >= p_4)) | 5UL) != g_38), l_94)) & l_95)) <= (-7L)) & 0L), g_5[4][0])))), (-1L))), l_98)) && p_4), 10)) > 0xA77380A6A08C46E7LL), l_94))))) ^ l_99))) < l_95)) {
    #####:   99:        uint32_t **l_103 = (void *)0;
    #####:  100:        uint32_t **l_104 = (void *)0;
    #####:  101:        uint32_t *l_106 = &g_5[4][0];
    #####:  102:        uint32_t **l_105 = &l_106;
    #####:  103:        int32_t *l_110 = (void *)0;
    #####:  104:        int32_t *l_111 = &l_100;
    #####:  105:        (*l_111) = (safe_rshift_func_uint64_t_u_s(0UL, (((*l_105) = &g_38) == (l_109 = (l_107, l_108)))));
        -:  106:      } else {
    #####:  107:        int16_t *l_118 = (void *)0;
    #####:  108:        int16_t *l_119 = &g_120[1][0][0];
    #####:  109:        int64_t l_125 = 1L;
    #####:  110:        int32_t *l_127 = &l_94;
    #####:  111:        (*l_127) |= ((safe_rshift_func_uint8_t_u_u(((safe_mod_func_uint64_t_u_u(((safe_rshift_func_int16_t_s_s(((*l_119) = p_4), (((!p_3), ((void *)0 == g_122)) && ((*l_97) = ((safe_mod_func_uint32_t_u_u(l_125, ((((g_23 != g_41[0][0]), ((*l_71) &= g_23)), (g_126, l_100)), 0x3F5A7A75L))) & l_107.f0))))) < l_100), g_40[3])) <= g_40[2]), p_3)) < g_65[1]);
        -:  112:      }
        -:  113:    }
        -:  114:  }
        1:  115:  return (*g_64);
        -:  116:}
        -:  117:
        1:  118:int main(int argc, char *argv[]) {
        -:  119:  int i, j, k;
        1:  120:  int print_hash_value = 0;
       1*:  121:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  122:    print_hash_value = 1;
        1:  123:  platform_main_begin();
        1:  124:  crc32_gentab();
        1:  125:  func_1();
        6:  126:  for (i = 0; i < 5; i++) {
       10:  127:    for (j = 0; j < 1; j++) {
        5:  128:      transparent_crc(g_5[i][j], "g_5[i][j]", print_hash_value);
        5:  129:      if (print_hash_value)
    #####:  130:        printf("index = [%d][%d]\n", i, j);
        -:  131:    }
        -:  132:  }
        1:  133:  transparent_crc(g_23, "g_23", print_hash_value);
        1:  134:  transparent_crc(g_38, "g_38", print_hash_value);
        6:  135:  for (i = 0; i < 5; i++) {
        5:  136:    transparent_crc(g_40[i], "g_40[i]", print_hash_value);
        5:  137:    if (print_hash_value)
    #####:  138:      printf("index = [%d]\n", i);
        -:  139:  }
        5:  140:  for (i = 0; i < 4; i++) {
       24:  141:    for (j = 0; j < 5; j++) {
       20:  142:      transparent_crc(g_41[i][j], "g_41[i][j]", print_hash_value);
       20:  143:      if (print_hash_value)
    #####:  144:        printf("index = [%d][%d]\n", i, j);
        -:  145:    }
        -:  146:  }
        1:  147:  transparent_crc(g_43, "g_43", print_hash_value);
        2:  148:  for (i = 0; i < 1; i++) {
        4:  149:    for (j = 0; j < 3; j++) {
        9:  150:      for (k = 0; k < 2; k++) {
        6:  151:        transparent_crc(g_62[i][j][k], "g_62[i][j][k]", print_hash_value);
        6:  152:        if (print_hash_value)
    #####:  153:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  154:      }
        -:  155:    }
        -:  156:  }
        4:  157:  for (i = 0; i < 3; i++) {
        3:  158:    transparent_crc(g_65[i], "g_65[i]", print_hash_value);
        3:  159:    if (print_hash_value)
    #####:  160:      printf("index = [%d]\n", i);
        -:  161:  }
        6:  162:  for (i = 0; i < 5; i++) {
       15:  163:    for (j = 0; j < 2; j++) {
       60:  164:      for (k = 0; k < 5; k++) {
       50:  165:        transparent_crc(g_120[i][j][k], "g_120[i][j][k]", print_hash_value);
       50:  166:        if (print_hash_value)
    #####:  167:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  168:      }
        -:  169:    }
        -:  170:  }
        1:  171:  transparent_crc(g_126.f0, "g_126.f0", print_hash_value);
        1:  172:  transparent_crc(g_126.f1, "g_126.f1", print_hash_value);
        1:  173:  transparent_crc(g_129, "g_129", print_hash_value);
        1:  174:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  175:  return 0;
        -:  176:}
