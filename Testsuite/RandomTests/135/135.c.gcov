        -:    0:Source:135.c
        -:    0:Graph:135.gcno
        -:    0:Data:135.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:static int32_t g_2 = 0x6AF1124FL;
        -:    7:static volatile int32_t g_7[1] = {(-1L)};
        -:    8:static volatile int32_t g_8 = 0x5912491EL;
        -:    9:static volatile int32_t g_9 = (-10L);
        -:   10:static volatile int32_t g_10 = 0x9C9FB37BL;
        -:   11:static int32_t g_11 = (-6L);
        -:   12:static volatile int32_t g_14 = 7L;
        -:   13:static volatile int32_t g_15 = 0L;
        -:   14:static volatile int32_t g_16[5][2][2] = {{{0xD4E70302L, (-1L)}, {0x6C312FBBL, (-1L)}}, {{(-1L), (-1L)}, {0x6C312FBBL, (-1L)}}, {{0xD4E70302L, 0xD4E70302L}, {0xD4E70302L, (-1L)}}, {{0x6C312FBBL, (-1L)}, {(-1L), (-1L)}}, {{0x6C312FBBL, (-1L)}, {0xD4E70302L, 0xD4E70302L}}};
        -:   15:static int32_t g_17 = 0x33037736L;
        -:   16:
        -:   17:static int32_t func_1(void);
        -:   18:
        1:   19:static int32_t func_1(void) {
        1:   20:lbl_18:
        1:   21:  for (g_2 = 0; (g_2 == 11); ++g_2) {
    #####:   22:    return g_2;
        -:   23:  }
       1*:   24:  for (g_2 = (-28); (g_2 >= (-26)); g_2 = safe_add_func_int16_t_s_s(g_2, 1)) {
    #####:   25:    for (g_11 = 0; (g_11 >= 4); g_11 = safe_add_func_int8_t_s_s(g_11, 6)) {
    #####:   26:      volatile int32_t *l_19 = (void *)0;
    #####:   27:      for (g_17 = 0; (g_17 >= 0); g_17 -= 1) {
        -:   28:        int i;
    #####:   29:        if (g_2)
    #####:   30:          goto lbl_18;
    #####:   31:        l_19 = &g_7[g_17];
        -:   32:      }
        -:   33:    }
        -:   34:  }
        1:   35:  return g_8;
        -:   36:}
        -:   37:
        1:   38:int main(int argc, char *argv[]) {
        -:   39:  int i, j, k;
        1:   40:  int print_hash_value = 0;
       1*:   41:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   42:    print_hash_value = 1;
        1:   43:  platform_main_begin();
        1:   44:  crc32_gentab();
        1:   45:  func_1();
        1:   46:  transparent_crc(g_2, "g_2", print_hash_value);
        2:   47:  for (i = 0; i < 1; i++) {
        1:   48:    transparent_crc(g_7[i], "g_7[i]", print_hash_value);
        1:   49:    if (print_hash_value)
    #####:   50:      printf("index = [%d]\n", i);
        -:   51:  }
        1:   52:  transparent_crc(g_8, "g_8", print_hash_value);
        1:   53:  transparent_crc(g_9, "g_9", print_hash_value);
        1:   54:  transparent_crc(g_10, "g_10", print_hash_value);
        1:   55:  transparent_crc(g_11, "g_11", print_hash_value);
        1:   56:  transparent_crc(g_14, "g_14", print_hash_value);
        1:   57:  transparent_crc(g_15, "g_15", print_hash_value);
        6:   58:  for (i = 0; i < 5; i++) {
       15:   59:    for (j = 0; j < 2; j++) {
       30:   60:      for (k = 0; k < 2; k++) {
       20:   61:        transparent_crc(g_16[i][j][k], "g_16[i][j][k]", print_hash_value);
       20:   62:        if (print_hash_value)
    #####:   63:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:   64:      }
        -:   65:    }
        -:   66:  }
        1:   67:  transparent_crc(g_17, "g_17", print_hash_value);
        1:   68:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:   69:  return 0;
        -:   70:}
