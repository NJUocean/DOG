        -:    0:Source:715.c
        -:    0:Graph:715.gcno
        -:    0:Data:715.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S0 {
        -:    9:  signed f0 : 17;
        -:   10:  uint16_t f1;
        -:   11:  int8_t f2;
        -:   12:  uint64_t f3;
        -:   13:  volatile int16_t f4;
        -:   14:};
        -:   15:#pragma pack(pop)
        -:   16:
        -:   17:#pragma pack(push)
        -:   18:#pragma pack(1)
        -:   19:struct S1 {
        -:   20:  volatile signed f0 : 27;
        -:   21:};
        -:   22:#pragma pack(pop)
        -:   23:
        -:   24:static int32_t g_13 = 5L;
        -:   25:static volatile struct S0 g_14 = {284, 0x064BL, 0xE0L, 0xC36FE5AB06C0E263LL, 3L};
        -:   26:static uint64_t g_17 = 0x71A6E483BBB66EFELL;
        -:   27:static int8_t g_21 = 0x57L;
        -:   28:static int16_t g_22 = 0x211EL;
        -:   29:static uint8_t g_23 = 246UL;
        -:   30:static int32_t g_25 = 0x188B9ABCL;
        -:   31:static int8_t g_28[2] = {0x4BL, 0x4BL};
        -:   32:static int32_t g_29 = 8L;
        -:   33:static volatile int16_t g_30[3] = {(-3L), (-3L), (-3L)};
        -:   34:static struct S1 g_34 = {3100};
        -:   35:static struct S1 *volatile g_35 = &g_34;
        -:   36:static uint32_t g_51 = 0xD623911DL;
        -:   37:static const struct S1 g_63 = {-9867};
        -:   38:static int64_t g_72 = 0x9521466050866D82LL;
        -:   39:
        -:   40:static struct S0 func_1(void);
        -:   41:static struct S1 func_2(uint8_t p_3, uint32_t p_4, int8_t p_5, const int32_t p_6, const int32_t p_7);
        -:   42:
        1:   43:static struct S0 func_1(void) {
        1:   44:  uint16_t l_8 = 0x6957L;
        1:   45:  int32_t l_20 = 8L;
        1:   46:  int32_t l_43 = 0L;
        1:   47:  int32_t l_44 = 0xDA0BF3FDL;
        1:   48:  int32_t l_45 = 0L;
        1:   49:  int32_t l_46 = 0xE4D50110L;
        1:   50:  int32_t l_47 = 0L;
        1:   51:  int32_t l_48 = (-3L);
        1:   52:  int32_t l_49 = 0xB921586CL;
        1:   53:  int32_t l_50 = 0xFA607100L;
        1:   54:  int8_t l_68 = 0L;
        1:   55:lbl_82:
       1*:   56:  (*g_35) = func_2(l_8, ((((((safe_mod_func_uint64_t_u_u((((safe_sub_func_int32_t_s_s(((l_8 && ((((g_13 |= 8UL), g_14), g_13), (safe_mul_func_int16_t_s_s(l_8, (g_22 = (g_21 |= ((--g_17) < (((((l_20 <= (l_20 != g_14.f4)), g_14.f2) | 4294967295UL) || 6L) == l_8)))))))), g_14.f4), 0x420EA1BCL)), 0x6D56A426232C2A4ELL) ^ 0x0971CF717C925701LL), 0xE20EEB4983CA3077LL)) <= (-1L)) | g_23) || l_8) != g_23) ^ g_23), l_8, l_20, l_20);
       24:   57:  for (g_22 = 0; (g_22 >= (-22)); --g_22) {
       23:   58:    int64_t l_38 = 0xF39352A55CCBD95DLL;
       23:   59:    int32_t *l_39 = &l_20;
       23:   60:    int32_t *l_40 = (void *)0;
       23:   61:    int32_t *l_41 = &g_29;
       23:   62:    int32_t *l_42[3][5] = {{&g_25, &l_20, &l_20, &g_25, &l_20}, {(void *)0, (void *)0, &l_20, (void *)0, (void *)0}, {&l_20, &g_25, &l_20, &l_20, &g_25}};
       23:   63:    uint16_t l_69 = 0xF18CL;
        -:   64:    int i, j;
       23:   65:    ++g_51;
      23*:   66:    if ((safe_sub_func_uint8_t_u_u((safe_sub_func_uint16_t_u_u((safe_mod_func_uint32_t_u_u((safe_lshift_func_int64_t_s_u((!0x18L), 2)), (g_63, (((void *)0 == l_42[2][0]) & (safe_lshift_func_int8_t_s_u(g_14.f4, (safe_mod_func_int8_t_s_s((l_20 || (g_21 | (l_68 && ((g_28[1] > 0x88C1B93FB8B7E04BLL) < l_69)))), l_44)))))))), 0xCF9CL)), (*l_41)))) {
      23*:   67:      for (l_8 = 0; (l_8 == 38); l_8++) {
    #####:   68:        uint16_t l_73 = 0xAC72L;
    #####:   69:        l_73--;
        -:   70:      }
        -:   71:    } else {
    #####:   72:      uint64_t l_78 = 0x7A87E153341C0C23LL;
    #####:   73:      int8_t *l_79 = &g_28[1];
    #####:   74:      (*l_41) ^= (safe_mod_func_int8_t_s_s(((*l_79) = l_78), (-1L)));
    #####:   75:      for (l_44 = 1; (l_44 <= (-10)); l_44--) {
    #####:   76:        if (l_78)
    #####:   77:          goto lbl_82;
        -:   78:      }
        -:   79:    }
        -:   80:  }
        1:   81:  return g_14;
        -:   82:}
        -:   83:
        1:   84:static struct S1 func_2(uint8_t p_3, uint32_t p_4, int8_t p_5, const int32_t p_6, const int32_t p_7) {
        1:   85:  int32_t *l_24 = &g_25;
        1:   86:  int32_t *l_26 = (void *)0;
        -:   87:  int32_t *l_27[1];
        1:   88:  uint32_t l_31 = 0xB60A95A2L;
        -:   89:  int i;
        2:   90:  for (i = 0; i < 1; i++)
        1:   91:    l_27[i] = &g_25;
        1:   92:  l_31--;
        1:   93:  return g_34;
        -:   94:}
        -:   95:
        1:   96:int main(int argc, char *argv[]) {
        -:   97:  int i;
        1:   98:  int print_hash_value = 0;
       1*:   99:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  100:    print_hash_value = 1;
        1:  101:  platform_main_begin();
        1:  102:  crc32_gentab();
        1:  103:  func_1();
        1:  104:  transparent_crc(g_13, "g_13", print_hash_value);
        1:  105:  transparent_crc(g_14.f0, "g_14.f0", print_hash_value);
        1:  106:  transparent_crc(g_14.f1, "g_14.f1", print_hash_value);
        1:  107:  transparent_crc(g_14.f2, "g_14.f2", print_hash_value);
        1:  108:  transparent_crc(g_14.f3, "g_14.f3", print_hash_value);
        1:  109:  transparent_crc(g_14.f4, "g_14.f4", print_hash_value);
        1:  110:  transparent_crc(g_17, "g_17", print_hash_value);
        1:  111:  transparent_crc(g_21, "g_21", print_hash_value);
        1:  112:  transparent_crc(g_22, "g_22", print_hash_value);
        1:  113:  transparent_crc(g_23, "g_23", print_hash_value);
        1:  114:  transparent_crc(g_25, "g_25", print_hash_value);
        3:  115:  for (i = 0; i < 2; i++) {
        2:  116:    transparent_crc(g_28[i], "g_28[i]", print_hash_value);
        2:  117:    if (print_hash_value)
    #####:  118:      printf("index = [%d]\n", i);
        -:  119:  }
        1:  120:  transparent_crc(g_29, "g_29", print_hash_value);
        4:  121:  for (i = 0; i < 3; i++) {
        3:  122:    transparent_crc(g_30[i], "g_30[i]", print_hash_value);
        3:  123:    if (print_hash_value)
    #####:  124:      printf("index = [%d]\n", i);
        -:  125:  }
        1:  126:  transparent_crc(g_34.f0, "g_34.f0", print_hash_value);
        1:  127:  transparent_crc(g_51, "g_51", print_hash_value);
        1:  128:  transparent_crc(g_63.f0, "g_63.f0", print_hash_value);
        1:  129:  transparent_crc(g_72, "g_72", print_hash_value);
        1:  130:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  131:  return 0;
        -:  132:}
