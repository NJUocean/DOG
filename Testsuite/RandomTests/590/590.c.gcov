        -:    0:Source:590.c
        -:    0:Graph:590.gcno
        -:    0:Data:590.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:static int8_t g_3 = 7L;
        -:    7:static int32_t g_7 = (-5L);
        -:    8:static volatile int32_t g_8 = (-1L);
        -:    9:static uint16_t g_10[1] = {1UL};
        -:   10:static volatile int16_t g_21[1][2][4] = {{{0xFAE0L, 0xFAE0L, 0xFAE0L, 0xFAE0L}, {0xFAE0L, 0xFAE0L, 0xFAE0L, 0xFAE0L}}};
        -:   11:static volatile int16_t g_22 = 0L;
        -:   12:static volatile int64_t g_24 = 5L;
        -:   13:static uint8_t g_25 = 0x8BL;
        -:   14:
        -:   15:static int16_t func_1(void);
        -:   16:
        1:   17:static int16_t func_1(void) {
        1:   18:  uint8_t l_2 = 1UL;
        1:   19:  int32_t l_16 = (-9L);
        1:   20:  int32_t l_17 = 0xBF5E4D8DL;
        1:   21:  int32_t l_18 = 0x7511ECBFL;
        1:   22:  int32_t l_20[5] = {0x5423B19DL, 0x5423B19DL, 0x5423B19DL, 0x5423B19DL, 0x5423B19DL};
        -:   23:  int i;
        1:   24:  if (l_2) {
        1:   25:    return g_3;
        -:   26:  } else {
    #####:   27:    int16_t l_9 = (-1L);
    #####:   28:    int32_t *l_13 = &g_7;
    #####:   29:    int32_t *l_14 = &g_7;
        -:   30:    int32_t *l_15[5];
    #####:   31:    int32_t l_19 = 0x38D679BDL;
    #####:   32:    int8_t l_23 = 0x4AL;
        -:   33:    int i;
    #####:   34:    for (i = 0; i < 5; i++)
    #####:   35:      l_15[i] = (void *)0;
    #####:   36:    for (l_2 = (-10); (l_2 < 9); l_2 = safe_add_func_uint16_t_u_u(l_2, 5)) {
    #####:   37:      int32_t *l_6[5][2] = {{&g_7, &g_7}, {&g_7, &g_7}, {&g_7, &g_7}, {&g_7, &g_7}, {&g_7, &g_7}};
        -:   38:      int i, j;
    #####:   39:      --g_10[0];
        -:   40:    }
    #####:   41:    --g_25;
        -:   42:  }
    #####:   43:  return g_7;
        -:   44:}
        -:   45:
        1:   46:int main(int argc, char *argv[]) {
        -:   47:  int i, j, k;
        1:   48:  int print_hash_value = 0;
       1*:   49:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   50:    print_hash_value = 1;
        1:   51:  platform_main_begin();
        1:   52:  crc32_gentab();
        1:   53:  func_1();
        1:   54:  transparent_crc(g_3, "g_3", print_hash_value);
        1:   55:  transparent_crc(g_7, "g_7", print_hash_value);
        1:   56:  transparent_crc(g_8, "g_8", print_hash_value);
        2:   57:  for (i = 0; i < 1; i++) {
        1:   58:    transparent_crc(g_10[i], "g_10[i]", print_hash_value);
        1:   59:    if (print_hash_value)
    #####:   60:      printf("index = [%d]\n", i);
        -:   61:  }
        2:   62:  for (i = 0; i < 1; i++) {
        3:   63:    for (j = 0; j < 2; j++) {
       10:   64:      for (k = 0; k < 4; k++) {
        8:   65:        transparent_crc(g_21[i][j][k], "g_21[i][j][k]", print_hash_value);
        8:   66:        if (print_hash_value)
    #####:   67:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:   68:      }
        -:   69:    }
        -:   70:  }
        1:   71:  transparent_crc(g_22, "g_22", print_hash_value);
        1:   72:  transparent_crc(g_24, "g_24", print_hash_value);
        1:   73:  transparent_crc(g_25, "g_25", print_hash_value);
        1:   74:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:   75:  return 0;
        -:   76:}
