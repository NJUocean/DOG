        -:    0:Source:967.c
        -:    0:Graph:967.gcno
        -:    0:Data:967.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S0 {
        -:    9:  unsigned f0 : 2;
        -:   10:  const signed f1 : 15;
        -:   11:};
        -:   12:#pragma pack(pop)
        -:   13:
        -:   14:struct S1 {
        -:   15:  volatile int8_t f0;
        -:   16:  volatile int32_t f1;
        -:   17:};
        -:   18:
        -:   19:struct S2 {
        -:   20:  int8_t f0;
        -:   21:};
        -:   22:
        -:   23:union U3 {
        -:   24:  volatile struct S1 f0;
        -:   25:  int32_t f1;
        -:   26:  const int8_t f2;
        -:   27:};
        -:   28:
        -:   29:static volatile int32_t g_2 = (-8L);
        -:   30:static int32_t g_3 = 0x4888999DL;
        -:   31:static uint32_t g_17 = 0x4B28ED4AL;
        -:   32:static struct S1 g_20 = {1L, 0L};
        -:   33:static volatile uint32_t *g_21 = (void *)0;
        -:   34:static struct S2 g_28[3][5] = {{{5L}, {0xE2L}, {5L}, {5L}, {0xE2L}}, {{0xE2L}, {5L}, {5L}, {0xE2L}, {5L}}, {{0xE2L}, {0xE2L}, {0x4AL}, {0xE2L}, {0xE2L}}};
        -:   35:static struct S1 *volatile g_31 = &g_20;
        -:   36:static int32_t g_33 = 1L;
        -:   37:static uint32_t g_48 = 5UL;
        -:   38:static uint32_t *g_47 = &g_48;
        -:   39:static int32_t g_62[1][1] = {{(-8L)}};
        -:   40:static volatile union U3 g_65 = {{1L, 0x8E434042L}};
        -:   41:static uint16_t g_69 = 1UL;
        -:   42:static struct S2 *volatile g_90 = (void *)0;
        -:   43:
        -:   44:static int32_t func_1(void);
        -:   45:static int32_t func_6(const uint32_t p_7, struct S0 p_8, uint32_t p_9, int32_t p_10);
        -:   46:
        1:   47:static int32_t func_1(void) {
        1:   48:  int64_t l_25 = (-1L);
        1:   49:  uint32_t *const l_49 = &g_48;
        1:   50:  uint16_t *l_66 = (void *)0;
        1:   51:  uint16_t *l_67 = (void *)0;
        1:   52:  uint16_t *l_68 = &g_69;
        1:   53:  const int64_t l_72 = 0x36DE1F29A3A768FBLL;
        1:   54:  int32_t l_73 = (-6L);
        1:   55:  struct S2 l_89 = {-1L};
        2:   56:  for (g_3 = 0; (g_3 <= 18); g_3 = safe_add_func_uint32_t_u_u(g_3, 7)) {
        2:   57:    uint32_t *l_15 = (void *)0;
        2:   58:    uint32_t *l_16 = &g_17;
        2:   59:    struct S0 l_22 = {0, -146};
        2:   60:    int32_t *l_36 = &g_33;
        2:   61:    int32_t l_37[2][5][5] = {{{(-1L), 0x38140A97L, 0x38140A97L, (-1L), 0x104ACD6BL}, {(-7L), (-10L), 0xA0D7C8A3L, 0x8DAD4F6CL, 0x104ACD6BL}, {0x38140A97L, (-7L), 0L, 0x1F64DB2AL, 0L}, {0x1F64DB2AL, 0x1F64DB2AL, 0x104ACD6BL, 0x8DAD4F6CL, 0xA0D7C8A3L}, {0x7FC7DF39L, 0x45180735L, 0x104ACD6BL, (-1L), 0x38140A97L}}, {{0xD73C12D4L, 0x104ACD6BL, 0L, 0x104ACD6BL, 0xD73C12D4L}, {0x45180735L, 0x533F2A6AL, 0L, (-10L), 0x104ACD6BL}, {0x45180735L, 0x104ACD6BL, (-1L), 0x38140A97L, 0x38140A97L}, {(-10L), 0x8DAD4F6CL, (-10L), 0x533F2A6AL, 0x104ACD6BL}, {0xD73C12D4L, 0x38140A97L, 0x104ACD6BL, 0x533F2A6AL, (-10L)}}};
        -:   62:    int i, j, k;
        2:   63:    l_37[0][4][0] &= ((*l_36) = func_6((safe_rshift_func_int64_t_s_u((safe_lshift_func_uint32_t_u_u(((*l_16)++), ((void *)0 != l_16))), (g_20, (l_15 != g_21)))), l_22, ((safe_mod_func_int64_t_s_s(l_25, (safe_mod_func_uint16_t_u_u((((l_22.f1, g_28[2][0]), (void *)0) != g_21), l_22.f1)))) >= g_3), g_3));
        2:   64:    if (g_3)
        1:   65:      break;
        -:   66:  }
       1*:   67:  if ((safe_mul_func_int32_t_s_s((safe_lshift_func_int16_t_s_s((g_17, 1L), 8)), (+((safe_rshift_func_int8_t_s_u((-5L), (safe_lshift_func_uint32_t_u_u(((g_47 = (void *)0) != l_49), ((safe_sub_func_uint64_t_u_u(((((safe_lshift_func_uint32_t_u_s((l_25 && ((safe_div_func_int32_t_s_s(((safe_mul_func_uint16_t_u_u(l_25, ((*l_68) = ((safe_mod_func_int16_t_s_s((((g_62[0][0] = g_3) ^ ((safe_add_func_int64_t_s_s((g_65, g_3), 0xB1D005767A065BBDLL)) < l_25)) || g_62[0][0]), g_33)) < l_25)))) != 1L), l_25)) >= l_25)), 25)) & (-1L)) ^ g_28[2][0].f0) != l_25), l_25)) ^ 0x6AF5756627F1A9F1LL))))), l_25))))) {
        1:   68:    uint32_t *l_74 = (void *)0;
       1*:   69:    for (l_25 = 0; (l_25 == 29); l_25 = safe_add_func_uint64_t_u_u(l_25, 4)) {
    #####:   70:      int16_t l_81 = 1L;
    #####:   71:      int32_t l_82 = (-1L);
    #####:   72:      uint64_t l_85 = 0x0880F5C685B35A07LL;
    #####:   73:      int8_t *l_86 = &g_28[2][0].f0;
    #####:   74:      int32_t *l_87 = &g_33;
    #####:   75:      (*l_87) |= ((g_28[2][0] = g_28[2][0]), (l_72 == (l_73 | (((void *)0 != l_74) ^ ((*l_86) = (safe_add_func_uint16_t_u_u((((safe_div_func_int16_t_s_s((safe_sub_func_uint64_t_u_u((l_81 ^ (l_82 = 0L)), (((safe_sub_func_int64_t_s_s(((((g_2, &g_33) != l_49) < l_81) || g_65.f0.f0), 0x65F1F474372BB134LL)) > l_85) && 4L))), 0x7FCEL)) && l_72) && l_73), l_81)))))));
    #####:   76:      (*l_87) ^= (safe_unary_minus_func_int64_t_s(g_65.f0.f1));
        -:   77:    }
        -:   78:  } else {
    #####:   79:    const int32_t *l_94 = (void *)0;
    #####:   80:    if (g_20.f0) {
    #####:   81:      g_28[2][0] = l_89;
        -:   82:    } else {
    #####:   83:      const int32_t *l_93 = &g_3;
    #####:   84:      l_94 = ((safe_mod_func_int16_t_s_s(g_69, (l_89.f0 | g_65.f0.f1))), l_93);
    #####:   85:      for (g_69 = (-14); (g_69 <= 52); g_69 = safe_add_func_uint32_t_u_u(g_69, 1)) {
    #####:   86:        g_3 = g_69;
        -:   87:      }
        -:   88:    }
        -:   89:  }
        1:   90:  return l_72;
        -:   91:}
        -:   92:
        2:   93:static int32_t func_6(const uint32_t p_7, struct S0 p_8, uint32_t p_9, int32_t p_10) {
        2:   94:  int8_t l_35 = 0xEEL;
        2:   95:  if ((g_2 <= (safe_unary_minus_func_int8_t_s(p_8.f1)))) {
        -:   96:    struct S1 *l_30[3];
        -:   97:    int i;
    #####:   98:    for (i = 0; i < 3; i++)
    #####:   99:      l_30[i] = &g_20;
    #####:  100:    (*g_31) = g_20;
    #####:  101:    return g_20.f1;
        -:  102:  } else {
        2:  103:    int32_t *l_32 = &g_33;
        2:  104:    int32_t l_34[2][3][1] = {{{0x1636717BL}, {0x1E33ECDCL}, {0x1636717BL}}, {{0x1E33ECDCL}, {0x1636717BL}, {0x1E33ECDCL}}};
        -:  105:    int i, j, k;
        2:  106:    l_34[0][1][0] = ((*l_32) = p_10);
        -:  107:  }
        2:  108:  return l_35;
        -:  109:}
        -:  110:
        1:  111:int main(int argc, char *argv[]) {
        -:  112:  int i, j;
        1:  113:  int print_hash_value = 0;
       1*:  114:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  115:    print_hash_value = 1;
        1:  116:  platform_main_begin();
        1:  117:  crc32_gentab();
        1:  118:  func_1();
        1:  119:  transparent_crc(g_2, "g_2", print_hash_value);
        1:  120:  transparent_crc(g_3, "g_3", print_hash_value);
        1:  121:  transparent_crc(g_17, "g_17", print_hash_value);
        1:  122:  transparent_crc(g_20.f0, "g_20.f0", print_hash_value);
        1:  123:  transparent_crc(g_20.f1, "g_20.f1", print_hash_value);
        4:  124:  for (i = 0; i < 3; i++) {
       18:  125:    for (j = 0; j < 5; j++) {
       15:  126:      transparent_crc(g_28[i][j].f0, "g_28[i][j].f0", print_hash_value);
       15:  127:      if (print_hash_value)
    #####:  128:        printf("index = [%d][%d]\n", i, j);
        -:  129:    }
        -:  130:  }
        1:  131:  transparent_crc(g_33, "g_33", print_hash_value);
        1:  132:  transparent_crc(g_48, "g_48", print_hash_value);
        2:  133:  for (i = 0; i < 1; i++) {
        2:  134:    for (j = 0; j < 1; j++) {
        1:  135:      transparent_crc(g_62[i][j], "g_62[i][j]", print_hash_value);
        1:  136:      if (print_hash_value)
    #####:  137:        printf("index = [%d][%d]\n", i, j);
        -:  138:    }
        -:  139:  }
        1:  140:  transparent_crc(g_65.f0.f0, "g_65.f0.f0", print_hash_value);
        1:  141:  transparent_crc(g_65.f0.f1, "g_65.f0.f1", print_hash_value);
        1:  142:  transparent_crc(g_69, "g_69", print_hash_value);
        1:  143:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  144:  return 0;
        -:  145:}
