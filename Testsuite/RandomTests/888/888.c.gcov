        -:    0:Source:888.c
        -:    0:Graph:888.gcno
        -:    0:Data:888.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:union U2 {
        -:    7:  volatile unsigned f0 : 2;
        -:    8:};
        -:    9:
        -:   10:static volatile int16_t g_2 = 0xAE5AL;
        -:   11:static int64_t g_9 = 0x9BACC5D9B4E94F93LL;
        -:   12:static uint32_t g_12[2] = {8UL, 8UL};
        -:   13:static int32_t g_14 = 0L;
        -:   14:static int32_t g_19 = 0L;
        -:   15:static uint64_t g_20 = 0x2324015FB26C4F32LL;
        -:   16:static union U2 g_23[2][5] = {{{0xCDF8ABFFL}, {0xCDF8ABFFL}, {0xCDF8ABFFL}, {0xCDF8ABFFL}, {0xCDF8ABFFL}}, {{0xCDF8ABFFL}, {0xCDF8ABFFL}, {0xCDF8ABFFL}, {0xCDF8ABFFL}, {0xCDF8ABFFL}}};
        -:   17:
        -:   18:static union U2 func_1(void);
        -:   19:static uint16_t func_3(uint32_t p_4, const int32_t p_5, const int64_t p_6);
        -:   20:
        1:   21:static union U2 func_1(void) {
        1:   22:  int32_t l_10 = 1L;
        1:   23:  uint32_t *l_11 = &g_12[0];
        -:   24:  int32_t *l_18[5];
        -:   25:  int i;
        6:   26:  for (i = 0; i < 5; i++)
        5:   27:    l_18[i] = &l_10;
        1:   28:  if ((((-1L) >= g_2) >= func_3(((*l_11) = (safe_add_func_int8_t_s_s(g_9, l_10))), g_9, g_9))) {
    #####:   29:    int32_t *l_16 = &g_14;
    #####:   30:    int32_t **l_15 = &l_16;
    #####:   31:    (*l_15) = &g_14;
        -:   32:  } else {
        1:   33:    int32_t *l_17 = &g_14;
        1:   34:    (*l_17) = 0xE24307A3L;
        -:   35:  }
        1:   36:  --g_20;
        1:   37:  return g_23[0][1];
        -:   38:}
        -:   39:
        1:   40:static uint16_t func_3(uint32_t p_4, const int32_t p_5, const int64_t p_6) {
        3:   41:  for (p_4 = 0; (p_4 <= 1); p_4 += 1) {
        2:   42:    int32_t *l_13 = &g_14;
        -:   43:    int i;
        2:   44:    (*l_13) |= g_12[p_4];
        2:   45:    (*l_13) = g_12[0];
        -:   46:  }
        1:   47:  return g_9;
        -:   48:}
        -:   49:
        1:   50:int main(int argc, char *argv[]) {
        -:   51:  int i, j;
        1:   52:  int print_hash_value = 0;
       1*:   53:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   54:    print_hash_value = 1;
        1:   55:  platform_main_begin();
        1:   56:  crc32_gentab();
        1:   57:  func_1();
        1:   58:  transparent_crc(g_2, "g_2", print_hash_value);
        1:   59:  transparent_crc(g_9, "g_9", print_hash_value);
        3:   60:  for (i = 0; i < 2; i++) {
        2:   61:    transparent_crc(g_12[i], "g_12[i]", print_hash_value);
        2:   62:    if (print_hash_value)
    #####:   63:      printf("index = [%d]\n", i);
        -:   64:  }
        1:   65:  transparent_crc(g_14, "g_14", print_hash_value);
        1:   66:  transparent_crc(g_19, "g_19", print_hash_value);
        1:   67:  transparent_crc(g_20, "g_20", print_hash_value);
        3:   68:  for (i = 0; i < 2; i++) {
       12:   69:    for (j = 0; j < 5; j++) {
       10:   70:      transparent_crc(g_23[i][j].f0, "g_23[i][j].f0", print_hash_value);
       10:   71:      if (print_hash_value)
    #####:   72:        printf("index = [%d][%d]\n", i, j);
        -:   73:    }
        -:   74:  }
        1:   75:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:   76:  return 0;
        -:   77:}
