        -:    0:Source:805.c
        -:    0:Graph:805.gcno
        -:    0:Data:805.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:union U0 {
        -:    7:  int64_t f0;
        -:    8:  int32_t f1;
        -:    9:  int64_t f2;
        -:   10:};
        -:   11:
        -:   12:union U1 {
        -:   13:  volatile int32_t f0;
        -:   14:};
        -:   15:
        -:   16:union U2 {
        -:   17:  int64_t f0;
        -:   18:  const int32_t f1;
        -:   19:  int8_t f2;
        -:   20:};
        -:   21:
        -:   22:static int32_t g_5[1][2] = {{1L, 1L}};
        -:   23:static uint32_t g_9 = 0x76881957L;
        -:   24:static int32_t *g_11 = &g_5[0][1];
        -:   25:static int32_t **volatile g_10 = &g_11;
        -:   26:static int32_t **volatile g_12[2][4][3] = {{{&g_11, (void *)0, (void *)0}, {&g_11, &g_11, &g_11}, {&g_11, &g_11, &g_11}, {&g_11, &g_11, &g_11}}, {{(void *)0, (void *)0, (void *)0}, {&g_11, &g_11, &g_11}, {(void *)0, &g_11, &g_11}, {&g_11, &g_11, &g_11}}};
        -:   27:static int32_t **const volatile g_13 = &g_11;
        -:   28:static int32_t g_14 = 4L;
        -:   29:static volatile union U1 g_16 = {0x0E2632C5L};
        -:   30:static uint8_t g_26[1] = {248UL};
        -:   31:static int32_t g_29 = 0xE20EEB49L;
        -:   32:static int32_t *volatile g_28 = &g_29;
        -:   33:static union U0 g_44 = {-1L};
        -:   34:static union U0 *volatile g_43 = &g_44;
        -:   35:static union U2 g_50 = {-3L};
        -:   36:
        -:   37:static union U1 func_1(void);
        -:   38:static int32_t *const func_2(int32_t *p_3);
        -:   39:
        1:   40:static union U1 func_1(void) {
        1:   41:  int32_t *l_4 = &g_5[0][1];
        1:   42:  int32_t **l_31 = &l_4;
        1:   43:  union U0 l_38 = {0L};
        1:   44:  (*l_31) = func_2(l_4);
        1:   45:  if ((**g_10)) {
        -:   46:    int32_t *l_32[5];
        -:   47:    int i;
        6:   48:    for (i = 0; i < 5; i++)
        5:   49:      l_32[i] = &g_29;
        1:   50:    l_32[1] = (*g_10);
        1:   51:    (**l_31) ^= (&g_9 != (void *)0);
        -:   52:  } else {
        -:   53:    int8_t l_35[3];
    #####:   54:    uint8_t *l_39 = (void *)0;
    #####:   55:    uint8_t *l_40 = &g_26[0];
    #####:   56:    union U0 *l_49 = &l_38;
    #####:   57:    int32_t l_66 = 0x0E3F56F6L;
        -:   58:    int i;
    #####:   59:    for (i = 0; i < 3; i++)
    #####:   60:      l_35[i] = 1L;
    #####:   61:    (**l_31) = (safe_mul_func_uint8_t_u_u((((((l_35[1] <= (*g_11)) < ((((g_16.f0, g_5[0][1]) || ((*l_40) = (l_38, 0UL))), g_5[0][0]) | g_14)), 4294967295UL) == 0x6E8CFB99L) ^ 1UL), g_9));
    #####:   62:    for (g_29 = 11; (g_29 >= 13); g_29 = safe_add_func_int64_t_s_s(g_29, 7)) {
    #####:   63:      int16_t l_56 = (-10L);
    #####:   64:      int32_t l_57[4] = {0xD3F5771BL, 0xD3F5771BL, 0xD3F5771BL, 0xD3F5771BL};
    #####:   65:      uint8_t l_58 = 0xD1L;
    #####:   66:      int32_t *l_63 = &l_38.f1;
    #####:   67:      int32_t *l_64 = (void *)0;
        -:   68:      int32_t *l_65[3];
        -:   69:      int i;
    #####:   70:      for (i = 0; i < 3; i++)
    #####:   71:        l_65[i] = &l_38.f1;
    #####:   72:      g_43 = g_43;
    #####:   73:      (*g_11) = (safe_div_func_int16_t_s_s((safe_sub_func_uint32_t_u_u((((*g_43), l_49) != (g_50, &g_44)), (safe_lshift_func_uint64_t_u_u(((l_66 |= (((*l_40) = (safe_mod_func_uint32_t_u_u((!(l_57[3] &= l_56)), (l_56 | l_58)))) != ((safe_sub_func_int64_t_s_s((safe_rshift_func_int8_t_s_u(g_5[0][1], 3)), (l_58 || 0x85L))) != g_14))), g_26[0]), 15)))), 0xDB9DL));
        -:   74:    }
        -:   75:  }
        1:   76:  return g_16;
        -:   77:}
        -:   78:
        1:   79:static int32_t *const func_2(int32_t *p_3) {
        1:   80:  uint32_t *l_8 = &g_9;
        1:   81:  int32_t *const l_30 = &g_5[0][0];
        1:   82:  if ((g_5[0][0] == (safe_lshift_func_uint32_t_u_u(((*l_8) = g_5[0][0]), 10)))) {
    #####:   83:    int8_t l_17 = 6L;
    #####:   84:    (*g_10) = &g_5[0][1];
    #####:   85:    for (g_9 = 0; (g_9 <= 0); g_9 += 1) {
    #####:   86:      int8_t l_18 = 2L;
    #####:   87:      union U0 l_22 = {-1L};
    #####:   88:      int32_t *l_25 = &g_5[0][0];
    #####:   89:      int32_t l_27 = (-8L);
    #####:   90:      (*g_13) = p_3;
    #####:   91:      for (g_14 = 0; (g_14 >= 0); g_14 -= 1) {
        -:   92:        int i, j;
    #####:   93:        l_17 ^= ((~g_5[g_9][(g_14 + 1)]), (g_16, 1L));
    #####:   94:        (*g_28) = ((*p_3) = ((**g_10) > (((l_18, ((1UL || 9UL) >= (-1L))) ^ (safe_add_func_uint64_t_u_u((g_14 || (+0x67BBL)), ((l_22, (safe_mul_func_int8_t_s_s(((((((g_5[g_9][(g_14 + 1)], p_3) == l_25) || g_14), g_26[0]), l_17) >= l_27), (*l_25)))) || 1UL)))) != g_5[g_9][g_14])));
        -:   95:      }
        -:   96:    }
        -:   97:  } else {
        1:   98:    (*p_3) ^= 0x07758A8CL;
        -:   99:  }
        1:  100:  return l_30;
        -:  101:}
        -:  102:
        1:  103:int main(int argc, char *argv[]) {
        -:  104:  int i, j, k;
        1:  105:  int print_hash_value = 0;
       1*:  106:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  107:    print_hash_value = 1;
        1:  108:  platform_main_begin();
        1:  109:  crc32_gentab();
        1:  110:  func_1();
        2:  111:  for (i = 0; i < 1; i++) {
        3:  112:    for (j = 0; j < 2; j++) {
        2:  113:      transparent_crc(g_5[i][j], "g_5[i][j]", print_hash_value);
        2:  114:      if (print_hash_value)
    #####:  115:        printf("index = [%d][%d]\n", i, j);
        -:  116:    }
        -:  117:  }
        1:  118:  transparent_crc(g_9, "g_9", print_hash_value);
        1:  119:  transparent_crc(g_14, "g_14", print_hash_value);
        1:  120:  transparent_crc(g_16.f0, "g_16.f0", print_hash_value);
        2:  121:  for (i = 0; i < 1; i++) {
        1:  122:    transparent_crc(g_26[i], "g_26[i]", print_hash_value);
        1:  123:    if (print_hash_value)
    #####:  124:      printf("index = [%d]\n", i);
        -:  125:  }
        1:  126:  transparent_crc(g_29, "g_29", print_hash_value);
        1:  127:  transparent_crc(g_44.f0, "g_44.f0", print_hash_value);
        1:  128:  transparent_crc(g_50.f0, "g_50.f0", print_hash_value);
        1:  129:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  130:  return 0;
        -:  131:}
