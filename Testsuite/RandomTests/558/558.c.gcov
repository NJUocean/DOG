        -:    0:Source:558.c
        -:    0:Graph:558.gcno
        -:    0:Data:558.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S2 {
        -:    9:  volatile int64_t f0;
        -:   10:  unsigned f1 : 9;
        -:   11:  uint8_t f2;
        -:   12:  uint64_t f3;
        -:   13:  uint8_t f4;
        -:   14:};
        -:   15:#pragma pack(pop)
        -:   16:
        -:   17:union U4 {
        -:   18:  int32_t f0;
        -:   19:  const unsigned f1 : 8;
        -:   20:  const int16_t f2;
        -:   21:  volatile int64_t f3;
        -:   22:  volatile uint64_t f4;
        -:   23:};
        -:   24:
        -:   25:static uint64_t g_20[4] = {0xB88CDF8ABFF5ECCELL, 0xB88CDF8ABFF5ECCELL, 0xB88CDF8ABFF5ECCELL, 0xB88CDF8ABFF5ECCELL};
        -:   26:static int32_t g_28 = 0x9B45C761L;
        -:   27:static volatile union U4 g_30 = {0x34D89BB6L};
        -:   28:static const volatile union U4 *volatile g_29[1][2] = {{&g_30, &g_30}};
        -:   29:static uint64_t g_32 = 0UL;
        -:   30:static uint8_t g_34[1][3] = {{0x76L, 0x76L, 0x76L}};
        -:   31:static union U4 g_36 = {-5L};
        -:   32:static const union U4 *g_35[5] = {&g_36, &g_36, &g_36, &g_36, &g_36};
        -:   33:static union U4 g_39 = {0x0386B9BDL};
        -:   34:static union U4 g_40 = {1L};
        -:   35:static union U4 *g_38[3][3] = {{&g_39, &g_39, &g_39}, {&g_40, &g_40, &g_40}, {&g_39, &g_39, &g_39}};
        -:   36:static union U4 g_42 = {-9L};
        -:   37:static union U4 g_43[1][5][4] = {{{{1L}, {0xF936BB35L}, {1L}, {0xF936BB35L}}, {{1L}, {0xF936BB35L}, {1L}, {0xF936BB35L}}, {{1L}, {0xF936BB35L}, {1L}, {0xF936BB35L}}, {{1L}, {0xF936BB35L}, {1L}, {0xF936BB35L}}, {{1L}, {0xF936BB35L}, {1L}, {0xF936BB35L}}}};
        -:   38:static struct S2 g_46 = {8L, 6, 255UL, 18446744073709551615UL, 9UL};
        -:   39:static volatile union U4 *g_48 = (void *)0;
        -:   40:static volatile union U4 **volatile g_47 = &g_48;
        -:   41:
        -:   42:static int32_t func_1(void);
        -:   43:static struct S2 func_2(const union U4 *p_3, const uint16_t p_4, union U4 *p_5, union U4 *p_6);
        -:   44:
        1:   45:static int32_t func_1(void) {
        1:   46:  int16_t l_15 = 0x4326L;
        1:   47:  int32_t l_21[4][3][4] = {{{2L, 1L, 2L, 1L}, {2L, 1L, 2L, 1L}, {2L, 1L, 2L, 1L}}, {{2L, 1L, 2L, 1L}, {2L, 1L, 2L, 1L}, {2L, 1L, 2L, 1L}}, {{2L, 1L, 2L, 1L}, {2L, 1L, 2L, 1L}, {2L, 1L, 2L, 1L}}, {{2L, 1L, 2L, 1L}, {2L, 1L, 2L, 1L}, {2L, 1L, 2L, 1L}}};
        1:   48:  int32_t *l_26 = (void *)0;
        1:   49:  int32_t *l_27 = &g_28;
        1:   50:  uint64_t *l_31 = &g_32;
        1:   51:  uint8_t *l_33 = &g_34[0][2];
        1:   52:  const int32_t l_37 = 6L;
        1:   53:  union U4 *l_41[5] = {&g_43[0][0][3], &g_43[0][0][3], &g_43[0][0][3], &g_43[0][0][3], &g_43[0][0][3]};
        -:   54:  int i, j, k;
       1*:   55:  (*g_47) = (func_2(((((*l_33) = (safe_mod_func_uint32_t_u_u(((safe_mul_func_uint8_t_u_u((safe_lshift_func_int8_t_s_s((l_15 == (((safe_add_func_uint64_t_u_u(((((safe_sub_func_int32_t_s_s(l_15, (g_20[1] == (l_21[1][0][2] = g_20[1])))) >= ((((safe_lshift_func_uint64_t_u_s(((*l_31) |= (safe_add_func_int32_t_s_s(((*l_27) = 0xE82A74DBL), ((((0xB9CEC02DFCE95866LL && 0x883FAA058A13C444LL), g_29[0][0]) == (void *)0) || 1UL)))), 0)) && g_30.f0) == l_15) == 0x473ECFB8L)) > g_20[3]), (*l_27)), g_20[1])) & 0x2C3CC8C9L) >= g_20[1])), g_20[1])), g_20[1])) < 65532UL), g_20[1]))) && 1UL), g_35[4]), l_37, g_38[0][2], l_41[0]), &g_30);
        1:   56:  return g_46.f4;
        -:   57:}
        -:   58:
        1:   59:static struct S2 func_2(const union U4 *p_3, const uint16_t p_4, union U4 *p_5, union U4 *p_6) {
       1*:   60:  for (g_42.f0 = 0; (g_42.f0 == (-15)); g_42.f0 = safe_sub_func_uint64_t_u_u(g_42.f0, 5)) {
    #####:   61:    if (g_34[0][2])
    #####:   62:      break;
        -:   63:  }
        1:   64:  return g_46;
        -:   65:}
        -:   66:
        1:   67:int main(int argc, char *argv[]) {
        -:   68:  int i, j, k;
        1:   69:  int print_hash_value = 0;
       1*:   70:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   71:    print_hash_value = 1;
        1:   72:  platform_main_begin();
        1:   73:  crc32_gentab();
        1:   74:  func_1();
        5:   75:  for (i = 0; i < 4; i++) {
        4:   76:    transparent_crc(g_20[i], "g_20[i]", print_hash_value);
        4:   77:    if (print_hash_value)
    #####:   78:      printf("index = [%d]\n", i);
        -:   79:  }
        1:   80:  transparent_crc(g_28, "g_28", print_hash_value);
        1:   81:  transparent_crc(g_30.f0, "g_30.f0", print_hash_value);
        1:   82:  transparent_crc(g_32, "g_32", print_hash_value);
        2:   83:  for (i = 0; i < 1; i++) {
        4:   84:    for (j = 0; j < 3; j++) {
        3:   85:      transparent_crc(g_34[i][j], "g_34[i][j]", print_hash_value);
        3:   86:      if (print_hash_value)
    #####:   87:        printf("index = [%d][%d]\n", i, j);
        -:   88:    }
        -:   89:  }
        1:   90:  transparent_crc(g_36.f0, "g_36.f0", print_hash_value);
        1:   91:  transparent_crc(g_39.f0, "g_39.f0", print_hash_value);
        1:   92:  transparent_crc(g_40.f0, "g_40.f0", print_hash_value);
        1:   93:  transparent_crc(g_42.f0, "g_42.f0", print_hash_value);
        2:   94:  for (i = 0; i < 1; i++) {
        6:   95:    for (j = 0; j < 5; j++) {
       25:   96:      for (k = 0; k < 4; k++) {
       20:   97:        transparent_crc(g_43[i][j][k].f0, "g_43[i][j][k].f0", print_hash_value);
       20:   98:        if (print_hash_value)
    #####:   99:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  100:      }
        -:  101:    }
        -:  102:  }
        1:  103:  transparent_crc(g_46.f0, "g_46.f0", print_hash_value);
        1:  104:  transparent_crc(g_46.f1, "g_46.f1", print_hash_value);
        1:  105:  transparent_crc(g_46.f2, "g_46.f2", print_hash_value);
        1:  106:  transparent_crc(g_46.f3, "g_46.f3", print_hash_value);
        1:  107:  transparent_crc(g_46.f4, "g_46.f4", print_hash_value);
        1:  108:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  109:  return 0;
        -:  110:}
