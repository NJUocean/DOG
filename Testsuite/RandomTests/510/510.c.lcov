/root/TSE2022/testsuite/RTEF/510/510.c:
    1|       |// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
    2|       |#include "csmith.h"
    3|       |
    4|       |static long __undefined;
    5|       |
    6|       |struct S0 {
    7|       |  unsigned f0 : 6;
    8|       |  uint64_t f1;
    9|       |};
   10|       |
   11|       |struct S1 {
   12|       |  const volatile signed f0 : 17;
   13|       |  uint8_t f1;
   14|       |  signed f2 : 3;
   15|       |};
   16|       |
   17|       |static int32_t g_15 = (-1L);
   18|       |static int32_t g_22[3][5][3] = {{{(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}}, {{(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}}, {{(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}, {(-3L), (-3L), (-3L)}}};
   19|       |static int32_t g_31 = 0x755261FCL;
   20|       |static uint16_t g_33 = 65529UL;
   21|       |static uint32_t g_58 = 1UL;
   22|       |static uint32_t g_62 = 2UL;
   23|       |static int32_t *g_85 = &g_15;
   24|       |static int32_t **const volatile g_84 = &g_85;
   25|       |static uint8_t g_88 = 0x22L;
   26|       |static int16_t g_91 = (-10L);
   27|       |static struct S0 g_96 = {0, 18446744073709551612UL};
   28|       |static struct S0 *volatile g_95 = &g_96;
   29|       |static uint32_t **g_101 = (void *)0;
   30|       |static uint32_t ***volatile g_100 = &g_101;
   31|       |static int32_t **const volatile g_103 = &g_85;
   32|       |static volatile uint64_t g_112 = 7UL;
   33|       |static const volatile uint64_t *volatile g_111 = &g_112;
   34|       |static volatile uint64_t g_114 = 0x298C059577EE7E4ELL;
   35|       |static volatile uint64_t *g_113[1][3] = {{&g_114, &g_114, &g_114}};
   36|       |static uint64_t g_133 = 0x38EE533B9E22A417LL;
   37|       |static int64_t g_151 = 0xA49CFF131093E8F6LL;
   38|       |static int64_t g_157 = 0x42F3C5D46ADFC38DLL;
   39|       |static volatile uint16_t g_158 = 0UL;
   40|       |static int32_t g_162 = (-1L);
   41|       |static const volatile struct S1 g_174 = {-171, 1UL, -0};
   42|       |
   43|       |static int8_t func_1(void);
   44|       |static int32_t func_2(int32_t p_3, int32_t p_4, int8_t p_5, uint32_t p_6);
   45|       |
   46|      1|static int8_t func_1(void) {
   47|      1|  uint8_t l_13 = 0UL;
   48|      1|  int32_t *l_14 = &g_15;
   49|      1|  int32_t *const l_30 = &g_31;
   50|      1|  uint16_t *l_32[3];
   51|      1|  uint32_t l_34 = 0xF9534236L;
   52|      1|  int32_t *l_161 = &g_162;
   53|      1|  const uint16_t *l_173 = &g_33;
   54|      1|  int i;
   55|      4|  for (i = 0; i < 3; i++)
   56|      3|    l_32[i] = &g_33;
   57|      1|  (*l_161) |= func_2(((*l_30) = ((safe_mul_func_int32_t_s_s(0x08CCCDDDL, ((safe_lshift_func_uint16_t_u_u((((*l_14) = (safe_rshift_func_int64_t_s_s(l_13, 27))) ^ (safe_sub_func_uint16_t_u_u((((safe_rshift_func_uint8_t_u_s((safe_add_func_uint64_t_u_u(g_22[1][3][2], (safe_unary_minus_func_int64_t_s((l_13 && (safe_sub_func_uint16_t_u_u((safe_div_func_uint64_t_u_u(l_13, ((safe_lshift_func_uint64_t_u_s((l_14 != l_30), 2)), g_31))), ((g_33 |= ((g_31 || (*l_30)) | g_22[1][3][2])) & g_22[1][4][1])))))))), 7)), (*l_30)) >= l_34), (*l_30)))), 6)) > g_31))) != (-6L))), g_22[1][3][2], g_22[1][3][2], g_22[1][2][1]);
   58|      2|  for (g_58 = 0; (g_58 <= 0); g_58 += 1) {
   59|      1|    int32_t **l_163 = &l_14;
   60|      1|    int32_t **l_164 = &l_161;
   61|      1|    (*l_164) = ((*l_163) = &g_162);
   62|      4|    for (l_34 = 0; (l_34 <= 2); l_34 += 1) {
   63|      3|      uint64_t l_167 = 1UL;
   64|      3|      uint16_t *l_169 = &g_33;
   65|      3|      uint16_t **l_168 = &l_169;
   66|      3|      int32_t l_175 = 0xF18D0889L;
   67|      3|      int i;
   68|      3|      l_175 = ((**l_163) = (safe_mul_func_uint16_t_u_u(l_167, (((((*l_168) = (l_32[(g_58 + 1)] = (void *)0)) == &g_158) >= (+(((((*l_161) == (safe_lshift_func_uint32_t_u_u(((void *)0 == l_173), 23))) || ((((g_174, (**l_164)), (void *)0) != &g_101) > (**l_164))), l_30) == &g_162))) || g_158))));
   69|      3|    }
   70|      1|  }
   71|      1|  return (*l_14);
   72|      1|}
   73|       |
   74|      1|static int32_t func_2(int32_t p_3, int32_t p_4, int8_t p_5, uint32_t p_6) {
   75|      1|  uint16_t *l_35 = &g_33;
   76|      1|  int32_t l_39[5];
   77|      1|  int32_t *l_43 = &g_31;
   78|      1|  int32_t **l_44 = &l_43;
   79|      1|  int32_t *l_46 = &g_15;
   80|      1|  int32_t **l_45 = &l_46;
   81|      1|  int32_t *l_48 = (void *)0;
   82|      1|  int32_t **l_47 = &l_48;
   83|      1|  uint64_t *l_49 = (void *)0;
   84|      1|  uint64_t *l_50[1];
   85|      1|  int32_t *const l_102 = &l_39[0];
   86|      1|  int32_t *l_153 = &l_39[2];
   87|      1|  int32_t *l_154 = &l_39[0];
   88|      1|  int32_t *l_155 = &g_15;
   89|      1|  int32_t *l_156[2][1];
   90|      1|  int i, j;
   91|      6|  for (i = 0; i < 5; i++)
   92|      5|    l_39[i] = 0x705618D7L;
   93|      2|  for (i = 0; i < 1; i++)
   94|      1|    l_50[i] = (void *)0;
   95|      3|  for (i = 0; i < 2; i++) {
   96|      4|    for (j = 0; j < 1; j++)
   97|      2|      l_156[i][j] = &l_39[3];
   98|      2|  }
   99|      1|  if ((((l_35 != (g_22[1][3][2], ((((0UL ^ g_15) == (!(safe_rshift_func_int16_t_s_u(2L, (l_39[0] && ((~2UL) && (((safe_unary_minus_func_int32_t_s((!((l_39[4] = (((((*l_44) = l_43) != ((*l_47) = ((*l_45) = &g_15))), (void *)0) != (void *)0)), g_15)))) ^ 0x61CAL) <= g_22[1][0][1]))))))) & g_22[1][3][2]), l_35))) == 0x83DCDCBD5F5AB95DLL) ^ (-6L))) {
  100|      1|  lbl_104:
  101|      1|    (*l_45) = &g_31;
  102|      1|  } else {
  103|      0|    uint32_t *l_57 = &g_58;
  104|      0|    uint32_t *l_61 = &g_62;
  105|      0|    const int32_t l_86 = 0L;
  106|      0|    int32_t l_92 = 0x5D1C1BBBL;
  107|      0|    int32_t l_93 = 0L;
  108|      0|    struct S0 l_94 = {4, 18446744073709551609UL};
  109|      0|    int32_t *l_108[5][3] = {{&l_39[0], &l_39[0], &l_39[0]}, {&l_92, &g_31, &l_39[4]}, {&l_92, &l_92, &g_31}, {&l_39[0], &g_31, &g_31}, {&g_31, &l_39[0], &l_39[4]}};
  110|      0|    uint64_t l_119 = 1UL;
  111|      0|    uint32_t ***l_138[2];
  112|      0|    int i, j;
  113|      0|    for (i = 0; i < 2; i++)
  114|      0|      l_138[i] = &g_101;
  115|      0|    if ((safe_div_func_uint16_t_u_u(((*l_35)--), (((--(*l_57)) != (((*l_61)++) != g_15)), p_5)))) {
  116|      0|      uint16_t l_73 = 65528UL;
  117|      0|      uint8_t *l_87[4][3] = {{(void *)0, &g_88, (void *)0}, {&g_88, &g_88, &g_88}, {(void *)0, &g_88, (void *)0}, {&g_88, &g_88, &g_88}};
  118|      0|      int32_t l_89 = (-4L);
  119|      0|      int16_t *l_90[1];
  120|      0|      uint32_t **l_99 = (void *)0;
  121|      0|      int i, j;
  122|      0|      for (i = 0; i < 1; i++)
  123|      0|        l_90[i] = &g_91;
  124|      0|      (*g_95) = (((safe_sub_func_int16_t_s_s((safe_sub_func_uint64_t_u_u((safe_add_func_int16_t_s_s((l_93 = (l_92 ^= (0UL == (safe_lshift_func_uint8_t_u_u(l_73, (0L > (safe_mul_func_uint32_t_u_u(((g_88 = (l_89 = (safe_mod_func_uint8_t_u_u((safe_add_func_int32_t_s_s((safe_mul_func_int8_t_s_s((safe_mod_func_uint64_t_u_u(((*l_43) = ((((void *)0 != g_84), &g_58) != &g_58)), (4294967295UL | (&g_33 != (void *)0)))), l_86)), (*g_85))), 0x4BL)))) < p_3), l_73)))))))), l_86)), p_5)), 0xB87BL)) | 0UL), l_94);
  125|      0|      for (l_73 = (-9); (l_73 != 29); l_73 = safe_add_func_int16_t_s_s(l_73, 2)) {
  126|      0|        (*g_100) = l_99;
  127|      0|        return (**g_84);
  128|      0|      }
  129|      0|    } else {
  130|      0|      int8_t l_118 = 4L;
  131|      0|      int64_t l_125 = (-1L);
  132|      0|      int32_t l_130[5][5][3] = {{{0x56D442F4L, 0L, 0L}, {0x56D442F4L, 4L, 0x38FA3529L}, {1L, 0L, 1L}, {0x38FA3529L, 4L, 0x56D442F4L}, {0L, 0L, 0x56D442F4L}}, {{0xD32418DFL, 0L, 1L}, {1L, 1L, 0x38FA3529L}, {0xD32418DFL, 0x38FA3529L, 0L}, {0L, 0x38FA3529L, 0xD32418DFL}, {0x38FA3529L, 1L, 1L}}, {{1L, 0L, 0xD32418DFL}, {0x56D442F4L, 0L, 0L}, {0x56D442F4L, 4L, 0x38FA3529L}, {1L, 0L, 1L}, {0x38FA3529L, 4L, 0x56D442F4L}}, {{0L, 0L, 0x56D442F4L}, {0xD32418DFL, 0L, 1L}, {1L, 1L, 0x38FA3529L}, {0xD32418DFL, 0x38FA3529L, 0L}, {0L, 0x38FA3529L, 0xD32418DFL}}, {{0x38FA3529L, 1L, 1L}, {1L, 0L, 0xD32418DFL}, {0x56D442F4L, 0L, 0L}, {0x56D442F4L, 4L, 0x38FA3529L}, {1L, 0L, 1L}}};
  133|      0|      struct S0 l_149 = {6, 0xAF9C58AC2CC2217ALL};
  134|      0|      int64_t *l_150 = &g_151;
  135|      0|      int8_t *l_152 = &l_118;
  136|      0|      int i, j, k;
  137|      0|      if ((*g_85)) {
  138|      0|        (*g_103) = ((**l_44), l_102);
  139|      0|      } else {
  140|      0|        uint32_t *l_105 = &g_58;
  141|      0|        const int32_t l_117 = (-7L);
  142|      0|        int32_t l_120[2][3][3] = {{{1L, 1L, (-1L)}, {1L, 1L, 1L}, {1L, 0L, 0x2B52C7FFL}}, {{1L, 1L, (-1L)}, {1L, 1L, 1L}, {1L, 0L, 0x2B52C7FFL}}};
  143|      0|        int i, j, k;
  144|      0|        if (g_33)
  145|      0|          goto lbl_104;
  146|      0|        l_120[1][1][1] ^= ((((void *)0 == l_105) == ((g_22[1][3][2] = ((safe_mul_func_uint32_t_u_u((((*l_44) = &l_92) != l_108[2][0]), (((safe_lshift_func_int32_t_s_u(0xFF94FDEAL, 20)) ^ (((g_31 |= ((g_111 != g_113[0][0]) ^ ((safe_mod_func_uint32_t_u_u(4294967295UL, ((p_4 | (*g_85)) && l_117))), l_118))) || l_118), 0x760324A0BD6DA29ALL)) == p_4))), 1L)), g_15)) ^ l_119);
  147|      0|      }
  148|      0|      (*l_46) = ((safe_mod_func_uint8_t_u_u((safe_add_func_int8_t_s_s(((*l_46) == l_125), ((safe_div_func_int8_t_s_s(g_114, (safe_mod_func_uint64_t_u_u((g_96.f1--), (g_133 = (g_31 && p_5)))))) != (safe_rshift_func_uint16_t_u_u((safe_sub_func_uint32_t_u_u((l_138[1] != ((((safe_sub_func_int32_t_s_s((safe_lshift_func_int8_t_s_u(((safe_add_func_int16_t_s_s((((safe_add_func_int32_t_s_s(((p_5 >= (safe_sub_func_int32_t_s_s((((l_149, (((*l_152) = (((*l_150) = l_149.f1) < p_4)) ^ g_31)) && p_6), (*g_85)), 0xB92A5F0EL))) && l_130[2][1][1]), p_4)) <= (*g_85)) ^ 18446744073709551615UL), g_91)), g_22[1][3][2]), g_62)), 0x863DC2C3L)) >= 0xBB2BE9FDL) > 7UL), (void *)0)), 0L)), 7))))), 0xE5L)) <= l_130[3][1][2]);
  149|      0|    }
  150|      0|  }
  151|      1|  --g_158;
  152|      1|  return p_6;
  153|      1|}
  154|       |
  155|      1|int main(int argc, char *argv[]) {
  156|      1|  int i, j, k;
  157|      1|  int print_hash_value = 0;
  158|      1|  if (argc == 2 && strcmp(argv[1], "1") == 0)
  159|      0|    print_hash_value = 1;
  160|      1|  platform_main_begin();
  161|      1|  crc32_gentab();
  162|      1|  func_1();
  163|      1|  transparent_crc(g_15, "g_15", print_hash_value);
  164|      4|  for (i = 0; i < 3; i++) {
  165|     18|    for (j = 0; j < 5; j++) {
  166|     60|      for (k = 0; k < 3; k++) {
  167|     45|        transparent_crc(g_22[i][j][k], "g_22[i][j][k]", print_hash_value);
  168|     45|        if (print_hash_value)
  169|      0|          printf("index = [%d][%d][%d]\n", i, j, k);
  170|     45|      }
  171|     15|    }
  172|      3|  }
  173|      1|  transparent_crc(g_31, "g_31", print_hash_value);
  174|      1|  transparent_crc(g_33, "g_33", print_hash_value);
  175|      1|  transparent_crc(g_58, "g_58", print_hash_value);
  176|      1|  transparent_crc(g_62, "g_62", print_hash_value);
  177|      1|  transparent_crc(g_88, "g_88", print_hash_value);
  178|      1|  transparent_crc(g_91, "g_91", print_hash_value);
  179|      1|  transparent_crc(g_96.f0, "g_96.f0", print_hash_value);
  180|      1|  transparent_crc(g_96.f1, "g_96.f1", print_hash_value);
  181|      1|  transparent_crc(g_112, "g_112", print_hash_value);
  182|      1|  transparent_crc(g_114, "g_114", print_hash_value);
  183|      1|  transparent_crc(g_133, "g_133", print_hash_value);
  184|      1|  transparent_crc(g_151, "g_151", print_hash_value);
  185|      1|  transparent_crc(g_157, "g_157", print_hash_value);
  186|      1|  transparent_crc(g_158, "g_158", print_hash_value);
  187|      1|  transparent_crc(g_162, "g_162", print_hash_value);
  188|      1|  transparent_crc(g_174.f0, "g_174.f0", print_hash_value);
  189|      1|  transparent_crc(g_174.f1, "g_174.f1", print_hash_value);
  190|      1|  transparent_crc(g_174.f2, "g_174.f2", print_hash_value);
  191|      1|  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
  192|      1|  return 0;
  193|      1|}

/root/TSE2022/testsuite/RTEF/runtime/csmith.h:
    1|       |/* -*- mode: C -*-
    2|       | *
    3|       | * Copyright (c) 2007-2011, 2013, 2014 The University of Utah
    4|       | * All rights reserved.
    5|       | *
    6|       | * This file is part of `csmith', a random generator of C programs.
    7|       | *
    8|       | * Redistribution and use in source and binary forms, with or without
    9|       | * modification, are permitted provided that the following conditions are met:
   10|       | *
   11|       | *   * Redistributions of source code must retain the above copyright notice,
   12|       | *     this list of conditions and the following disclaimer.
   13|       | *
   14|       | *   * Redistributions in binary form must reproduce the above copyright
   15|       | *     notice, this list of conditions and the following disclaimer in the
   16|       | *     documentation and/or other materials provided with the distribution.
   17|       | *
   18|       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   19|       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   20|       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   21|       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   22|       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   23|       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   24|       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   25|       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   26|       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   27|       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   28|       | * POSSIBILITY OF SUCH DAMAGE.
   29|       | */
   30|       |
   31|       |#ifndef RANDOM_RUNTIME_H
   32|       |#define RANDOM_RUNTIME_H
   33|       |
   34|       |#ifdef CSMITH_MINIMAL
   35|       |#include "csmith_minimal.h"
   36|       |#else
   37|       |
   38|       |/*****************************************************************************/
   39|       |
   40|       |#include <string.h>
   41|       |#include <float.h>
   42|       |#include <math.h>
   43|       |
   44|       |#define __STDC_LIMIT_MACROS
   45|       |#include "random_inc.h"
   46|       |
   47|       |static uint32_t crc32_tab[256];
   48|       |static uint32_t crc32_context = 0xFFFFFFFFUL;
   49|       |
   50|       |static void 
   51|       |crc32_gentab (void)
   52|      1|{
   53|      1|	uint32_t crc;
   54|      1|	const uint32_t poly = 0xEDB88320UL;
   55|      1|	int i, j;
   56|      1|	
   57|    257|	for (i = 0; i < 256; i++) {
   58|    256|		crc = i;
   59|  2.30k|		for (j = 8; j > 0; j--) {
   60|  2.04k|			if (crc & 1) {
   61|  1.02k|				crc = (crc >> 1) ^ poly;
   62|  1.02k|			} else {
   63|  1.02k|				crc >>= 1;
   64|  1.02k|			}
   65|  2.04k|		}
   66|    256|		crc32_tab[i] = crc;
   67|    256|	}
   68|      1|}
   69|       |
   70|       |static void 
   71|    512|crc32_byte (uint8_t b) {
   72|    512|	crc32_context = 
   73|    512|		((crc32_context >> 8) & 0x00FFFFFF) ^ 
   74|    512|		crc32_tab[(crc32_context ^ b) & 0xFF];
   75|    512|}
   76|       |
   77|       |#if defined(__SPLAT__) || defined(NO_LONGLONG)
   78|       |static void 
   79|       |crc32_8bytes (uint32_t val)
   80|       |{
   81|       |	crc32_byte ((val>>0) & 0xff);
   82|       |	crc32_byte ((val>>8) & 0xff);
   83|       |	crc32_byte ((val>>16) & 0xff);
   84|       |	crc32_byte ((val>>24) & 0xff);
   85|       |}
   86|       |
   87|       |static void 
   88|       |transparent_crc (uint32_t val, char* vname, int flag)
   89|       |{
   90|       |	crc32_8bytes(val);
   91|       |	if (flag) {
   92|       |  		printf("...checksum after hashing %s : %X\n", vname, crc32_context ^ 0xFFFFFFFFU);
   93|       |	}
   94|       |}
   95|       |#else
   96|       |static void 
   97|       |crc32_8bytes (uint64_t val)
   98|     64|{
   99|     64|	crc32_byte ((val>>0) & 0xff);
  100|     64|	crc32_byte ((val>>8) & 0xff);
  101|     64|	crc32_byte ((val>>16) & 0xff);
  102|     64|	crc32_byte ((val>>24) & 0xff);
  103|     64|	crc32_byte ((val>>32) & 0xff);
  104|     64|	crc32_byte ((val>>40) & 0xff);
  105|     64|	crc32_byte ((val>>48) & 0xff);
  106|     64|	crc32_byte ((val>>56) & 0xff);
  107|     64|}
  108|       |
  109|       |static void 
  110|       |transparent_crc (uint64_t val, char* vname, int flag)
  111|     64|{
  112|     64|	crc32_8bytes(val);
  113|     64|	if (flag) {
  114|      0|  		printf("...checksum after hashing %s : %lX\n", vname, crc32_context ^ 0xFFFFFFFFUL);
  115|      0|	}
  116|     64|}
  117|       |
  118|       |#endif
  119|       |
  120|       |static void 
  121|       |transparent_crc_bytes (char *ptr, int nbytes, char* vname, int flag)
  122|      0|{
  123|      0|    int i;
  124|      0|    for (i=0; i<nbytes; i++) {
  125|      0|        crc32_byte(ptr[i]);
  126|      0|    }
  127|      0|	if (flag) {
  128|      0|  		printf("...checksum after hashing %s : %lX\n", vname, crc32_context ^ 0xFFFFFFFFUL);
  129|      0|	}
  130|      0|}
  131|       |
  132|       |/*****************************************************************************/
  133|       |
  134|       |#endif
  135|       |
  136|       |#endif /* RANDOM_RUNTIME_H */
  137|       |
  138|       |/*
  139|       | * Local Variables:
  140|       | * c-basic-offset: 4
  141|       | * tab-width: 4
  142|       | * End:
  143|       | */
  144|       |
  145|       |/* End of file. */

/root/TSE2022/testsuite/RTEF/runtime/platform_generic.h:
    1|       |/* -*- mode: C -*-
    2|       | *
    3|       | * Copyright (c) 2007, 2008, 2011, 2013 The University of Utah
    4|       | * All rights reserved.
    5|       | *
    6|       | * This file is part of `csmith', a random generator of C programs.
    7|       | *
    8|       | * Redistribution and use in source and binary forms, with or without
    9|       | * modification, are permitted provided that the following conditions are met:
   10|       | *
   11|       | *   * Redistributions of source code must retain the above copyright notice,
   12|       | *     this list of conditions and the following disclaimer.
   13|       | *
   14|       | *   * Redistributions in binary form must reproduce the above copyright
   15|       | *     notice, this list of conditions and the following disclaimer in the
   16|       | *     documentation and/or other materials provided with the distribution.
   17|       | *
   18|       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   19|       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   20|       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   21|       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   22|       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   23|       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   24|       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   25|       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   26|       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   27|       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   28|       | * POSSIBILITY OF SUCH DAMAGE.
   29|       | */
   30|       |
   31|       |#ifndef PLATFORM_GENERIC_H
   32|       |#define PLATFORM_GENERIC_H
   33|       |
   34|       |/*****************************************************************************/
   35|       |
   36|       |#ifdef STANDALONE
   37|       |extern int printf (const char *, ...);
   38|       |#else
   39|       |#include <stdio.h>
   40|       |#endif
   41|       |
   42|       |static void
   43|       |platform_main_begin(void)
   44|      1|{
   45|      1|	/* Nothing to do. */
   46|      1|}
   47|       |
   48|       |static void
   49|       |platform_main_end(uint32_t crc, int flag)
   50|      1|{
   51|       |#if defined (__FRAMAC)
   52|       |    Frama_C_dump_assert_each();
   53|       |#endif
   54|      1|
   55|      1|#ifndef NOT_PRINT_CHECKSUM
   56|      1|	printf ("checksum = %X\n", crc);
   57|      1|#endif
   58|      1|
   59|       |#if defined (LOG_WRAPPERS)
   60|       |	{
   61|       |		int i, first;
   62|       |
   63|       |		printf ("executed wrappers: ");
   64|       |		first = 1;
   65|       |		for (i=1; i<N_WRAP+1; i++) {
   66|       |			if (__executed_checks[i]) {
   67|       |				if (!first) {
   68|       |					printf (",");
   69|       |				} else {
   70|       |					first = 0;
   71|       |				}
   72|       |				printf ("%d", i);
   73|       |			}
   74|       |		}
   75|       |		printf ("\n");
   76|       |
   77|       |		printf ("dead wrappers: ");
   78|       |		first = 1;
   79|       |		for (i=1; i<N_WRAP+1; i++) {
   80|       |			if (!__executed_checks[i]) {
   81|       |				if (!first) {
   82|       |					printf (",");
   83|       |				} else {
   84|       |					first = 0;
   85|       |				}
   86|       |				printf ("%d", i);
   87|       |			}
   88|       |		}
   89|       |		printf ("\n");
   90|       |
   91|       |		printf ("wrappers that failed at least once: ");
   92|       |		first = 1;
   93|       |		for (i=1; i<N_WRAP+1; i++) {
   94|       |			if (__failed_checks[i]) {
   95|       |				if (!first) {
   96|       |					printf (",");
   97|       |				} else {
   98|       |					first = 0;
   99|       |				}
  100|       |				printf ("%d", i);
  101|       |			}
  102|       |		}
  103|       |		printf ("\n");
  104|       |
  105|       |		printf ("wrappers that never failed (or never executed): ");
  106|       |		first = 1;
  107|       |		for (i=1; i<N_WRAP+1; i++) {
  108|       |			if (!__failed_checks[i]) {
  109|       |				if (!first) {
  110|       |					printf (",");
  111|       |				} else {
  112|       |					first = 0;
  113|       |				}
  114|       |				printf ("%d", i);
  115|       |			}
  116|       |		}
  117|       |		printf ("\n");
  118|       |	}
  119|       |#endif
  120|      1|}
  121|       |
  122|       |#define MB (1<<20)
  123|       |
  124|       |/*****************************************************************************/
  125|       |
  126|       |#endif /* PLATFORM_GENERIC_H */
  127|       |
  128|       |/*
  129|       | * Local Variables:
  130|       | * c-basic-offset: 4
  131|       | * tab-width: 4
  132|       | * End:
  133|       | */
  134|       |
  135|       |/* End of file. */

/root/TSE2022/testsuite/RTEF/runtime/random_inc.h:
    1|       |/* -*- mode: C -*-
    2|       | *
    3|       | * Copyright (c) 2007-2010, 2011 The University of Utah
    4|       | * All rights reserved.
    5|       | *
    6|       | * This file is part of `csmith', a random generator of C programs.
    7|       | *
    8|       | * Redistribution and use in source and binary forms, with or without
    9|       | * modification, are permitted provided that the following conditions are met:
   10|       | *
   11|       | *   * Redistributions of source code must retain the above copyright notice,
   12|       | *     this list of conditions and the following disclaimer.
   13|       | *
   14|       | *   * Redistributions in binary form must reproduce the above copyright
   15|       | *     notice, this list of conditions and the following disclaimer in the
   16|       | *     documentation and/or other materials provided with the distribution.
   17|       | *
   18|       | * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   19|       | * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   20|       | * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   21|       | * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   22|       | * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   23|       | * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   24|       | * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   25|       | * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   26|       | * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   27|       | * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   28|       | * POSSIBILITY OF SUCH DAMAGE.
   29|       | */
   30|       |
   31|       |#ifndef RANDOM_INC_H
   32|       |#define RANDOM_INC_H
   33|       |
   34|       |
   35|       |#if defined(STANDALONE)
   36|       |  #if defined(_MSC_VER)
   37|       |    #include <limits.h>
   38|       |    #include "windows/stdint.h"
   39|       |  #elif defined (IA32_ARCH)
   40|       |    #include "stdint_ia32.h"
   41|       |  #elif defined (IA64_ARCH)
   42|       |    #include "stdint_ia64.h"
   43|       |  #elif defined (MSP430)
   44|       |    #include "stdint_msp430.h"
   45|       |  #elif defined (AVR_ARCH)
   46|       |    #include "stdint_avr.h"
   47|       |  #else
   48|       |    #include "stdint_ia32.h"
   49|       |  #endif
   50|       |#else
   51|       |  #include <limits.h>
   52|       |  #if defined(_MSC_VER)
   53|       |    #include "windows/stdint.h"
   54|       |  #else
   55|       |    #include <stdint.h>
   56|       |  #endif
   57|       |#endif
   58|       |
   59|       |#include <assert.h>
   60|       |
   61|       |/*****************************************************************************/
   62|       |
   63|       |#ifndef DEPUTY
   64|       |#define COUNT(n)
   65|       |#define TC
   66|       |#define SAFE
   67|       |#endif
   68|       |
   69|       |/*****************************************************************************/
   70|       |
   71|       |#ifdef LOG_WRAPPERS
   72|       |#include "wrapper.h"
   73|       |char __failed_checks[N_WRAP+1];
   74|       |char __executed_checks[N_WRAP+1];
   75|       |#define UNDEFINED(__val) (__failed_checks[index]=1,(__val))
   76|       |#define LOG_INDEX , int index
   77|       |#define LOG_EXEC __executed_checks[index]=1;
   78|       |#else
   79|      1|#define UNDEFINED(__val) (__val)
   80|       |#define LOG_INDEX
   81|       |#define LOG_EXEC
   82|       |#endif
   83|       |
   84|       |#if defined(AVR_ARCH)
   85|       |#include "platform_avr.h"
   86|       |#elif defined (MSP430)
   87|       |#include "platform_msp430.h"
   88|       |#else
   89|       |#include "platform_generic.h"
   90|       |#endif
   91|       |
   92|       |#define STATIC static
   93|       |
   94|       |#if defined (USE_MATH_MACROS_NOTMP)
   95|       |#include "safe_math_macros_notmp.h"
   96|       |#elif defined (USE_MATH_MACROS)
   97|       |#include "safe_math_macros.h"
   98|       |#else
   99|       |#define FUNC_NAME(x) (safe_##x)
  100|       |#include "safe_math.h"
  101|       |#undef FUNC_NAME
  102|       |#endif
  103|       |
  104|       |#define INT_BIT (sizeof(int)*CHAR_BIT)
  105|       |#define _CSMITH_BITFIELD(x) (((x)>INT_BIT)?((x)%INT_BIT):(x))
  106|       |
  107|       |#ifdef TCC
  108|       |
  109|       |void* memcpy(void* dest, const void* src, size_t count) {
  110|       |  char* dst8 = (char*)dest;
  111|       |  char* src8 = (char*)src;
  112|       |  
  113|       |  while (count--) {
  114|       |    *dst8++ = *src8++;
  115|       |  }
  116|       |  return dest;
  117|       |}
  118|       |
  119|       |void *memset(void *s, int c, size_t n)
  120|       |{
  121|       |    unsigned char* p=s;
  122|       |    while(n--)
  123|       |        *p++ = (unsigned char)c;
  124|       |    return s;
  125|       |}
  126|       |
  127|       |#endif
  128|       |
  129|       |#endif // RANDOM_INC_H

/root/TSE2022/testsuite/RTEF/runtime/safe_math.h:
    1|       |
    2|       |#ifndef SAFE_MATH_H
    3|       |#define SAFE_MATH_H
    4|       |
    5|       |
    6|       |
    7|       |
    8|       |
    9|       |
   10|       |
   11|       |
   12|       |
   13|       |STATIC int8_t
   14|       |FUNC_NAME(unary_minus_func_int8_t_s)(int8_t si LOG_INDEX)
   15|      0|{
   16|      0|  LOG_EXEC
   17|      0|  return 
   18|      0|#ifndef UNSAFE
   19|      0|#if (INT8_MAX>=INT_MAX)
   20|      0|    (si==INT8_MIN) ?
   21|      0|    (UNDEFINED(si)) :
   22|      0|#endif
   23|      0|#endif
   24|      0|    -si;
   25|      0|}
   26|       |
   27|       |STATIC int8_t
   28|       |FUNC_NAME(add_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   29|      0|{
   30|      0|  LOG_EXEC
   31|      0|  return 
   32|      0|#ifndef UNSAFE
   33|       |#if (INT8_MAX>=INT_MAX)
   34|       |    (((si1>0) && (si2>0) && (si1 > (INT8_MAX-si2))) || ((si1<0) && (si2<0) && (si1 < (INT8_MIN-si2)))) ?
   35|       |    (UNDEFINED(si1)) :
   36|       |#endif
   37|      0|#endif
   38|      0|    (si1 + si2);
   39|      0|}
   40|       |
   41|       |STATIC int8_t
   42|       |FUNC_NAME(sub_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   43|      0|{
   44|      0|  LOG_EXEC
   45|      0|  return 
   46|      0|#ifndef UNSAFE
   47|      0|#if (INT8_MAX>=INT_MAX)
   48|      0|    (((si1^si2) & (((si1 ^ ((si1^si2) & (~INT8_MAX)))-si2)^si2)) < 0) ? 
   49|      0|    (UNDEFINED(si1)) : 
   50|      0|#endif
   51|      0|#endif
   52|      0|    (si1 - si2);
   53|      0|}
   54|       |
   55|       |STATIC int8_t
   56|       |FUNC_NAME(mul_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   57|      0|{
   58|      0|  LOG_EXEC
   59|      0|  return 
   60|      0|#ifndef UNSAFE
   61|       |#if (INT8_MAX>=INT_MAX)
   62|       |    (((si1 > 0) && (si2 > 0) && (si1 > (INT8_MAX / si2))) || ((si1 > 0) && (si2 <= 0) && (si2 < (INT8_MIN / si1))) || ((si1 <= 0) && (si2 > 0) && (si1 < (INT8_MIN / si2))) || ((si1 <= 0) && (si2 <= 0) && (si1 != 0) && (si2 < (INT8_MAX / si1)))) ? 
   63|       |    (UNDEFINED(si1)) : 
   64|       |#endif
   65|      0|#endif
   66|      0|    si1 * si2;
   67|      0|}
   68|       |
   69|       |STATIC int8_t
   70|       |FUNC_NAME(mod_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   71|      0|{
   72|      0|  LOG_EXEC
   73|      0|  return 
   74|      0|#ifndef UNSAFE
   75|      0|    ((si2 == 0) || ((si1 == INT8_MIN) && (si2 == (-1)))) ? 
   76|      0|    (UNDEFINED(si1)) : 
   77|      0|#endif
   78|      0|    (si1 % si2);
   79|      0|}
   80|       |
   81|       |STATIC int8_t
   82|       |FUNC_NAME(div_func_int8_t_s_s)(int8_t si1, int8_t si2 LOG_INDEX)
   83|      0|{
   84|      0|  LOG_EXEC
   85|      0|  return 
   86|      0|#ifndef UNSAFE
   87|      0|    ((si2 == 0) || ((si1 == INT8_MIN) && (si2 == (-1)))) ? 
   88|      0|    (UNDEFINED(si1)) : 
   89|      0|#endif
   90|      0|    (si1 / si2);
   91|      0|}
   92|       |
   93|       |STATIC int8_t
   94|       |FUNC_NAME(lshift_func_int8_t_s_s)(int8_t left, int right LOG_INDEX)
   95|      0|{
   96|      0|  LOG_EXEC
   97|      0|  return 
   98|      0|#ifndef UNSAFE
   99|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32) || (left > (INT8_MAX >> ((int)right)))) ? 
  100|      0|    (UNDEFINED(left)) : 
  101|      0|#endif
  102|      0|    (left << ((int)right));
  103|      0|}
  104|       |
  105|       |STATIC int8_t
  106|       |FUNC_NAME(lshift_func_int8_t_s_u)(int8_t left, unsigned int right LOG_INDEX)
  107|      0|{
  108|      0|  LOG_EXEC
  109|      0|  return 
  110|      0|#ifndef UNSAFE
  111|      0|    ((left < 0) || (((unsigned int)right) >= 32) || (left > (INT8_MAX >> ((unsigned int)right)))) ? 
  112|      0|    (UNDEFINED(left)) : 
  113|      0|#endif
  114|      0|    (left << ((unsigned int)right));
  115|      0|}
  116|       |
  117|       |STATIC int8_t
  118|       |FUNC_NAME(rshift_func_int8_t_s_s)(int8_t left, int right LOG_INDEX)
  119|      0|{
  120|      0|  LOG_EXEC
  121|      0|  return 
  122|      0|#ifndef UNSAFE
  123|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32))? 
  124|      0|    (UNDEFINED(left)) : 
  125|      0|#endif
  126|      0|    (left >> ((int)right));
  127|      0|}
  128|       |
  129|       |STATIC int8_t
  130|       |FUNC_NAME(rshift_func_int8_t_s_u)(int8_t left, unsigned int right LOG_INDEX)
  131|      0|{
  132|      0|  LOG_EXEC
  133|      0|  return 
  134|      0|#ifndef UNSAFE
  135|      0|    ((left < 0) || (((unsigned int)right) >= 32)) ? 
  136|      0|    (UNDEFINED(left)) : 
  137|      0|#endif
  138|      0|    (left >> ((unsigned int)right));
  139|      0|}
  140|       |
  141|       |
  142|       |
  143|       |STATIC int16_t
  144|       |FUNC_NAME(unary_minus_func_int16_t_s)(int16_t si LOG_INDEX)
  145|      0|{
  146|      0|  LOG_EXEC
  147|      0|  return 
  148|      0|#ifndef UNSAFE
  149|      0|#if (INT16_MAX>=INT_MAX)
  150|      0|    (si==INT16_MIN) ?
  151|      0|    (UNDEFINED(si)) :
  152|      0|#endif
  153|      0|#endif
  154|      0|    -si;
  155|      0|}
  156|       |
  157|       |STATIC int16_t
  158|       |FUNC_NAME(add_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  159|      0|{
  160|      0|  LOG_EXEC
  161|      0|  return 
  162|      0|#ifndef UNSAFE
  163|       |#if (INT16_MAX>=INT_MAX)
  164|       |    (((si1>0) && (si2>0) && (si1 > (INT16_MAX-si2))) || ((si1<0) && (si2<0) && (si1 < (INT16_MIN-si2)))) ?
  165|       |    (UNDEFINED(si1)) :
  166|       |#endif
  167|      0|#endif
  168|      0|    (si1 + si2);
  169|      0|}
  170|       |
  171|       |STATIC int16_t
  172|       |FUNC_NAME(sub_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  173|      0|{
  174|      0|  LOG_EXEC
  175|      0|  return 
  176|      0|#ifndef UNSAFE
  177|       |#if (INT16_MAX>=INT_MAX)
  178|       |    (((si1^si2) & (((si1 ^ ((si1^si2) & (~INT16_MAX)))-si2)^si2)) < 0) ? 
  179|       |    (UNDEFINED(si1)) : 
  180|       |#endif
  181|      0|#endif
  182|      0|    (si1 - si2);
  183|      0|}
  184|       |
  185|       |STATIC int16_t
  186|       |FUNC_NAME(mul_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  187|      0|{
  188|      0|  LOG_EXEC
  189|      0|  return 
  190|      0|#ifndef UNSAFE
  191|      0|#if (INT16_MAX>=INT_MAX)
  192|      0|    (((si1 > 0) && (si2 > 0) && (si1 > (INT16_MAX / si2))) || ((si1 > 0) && (si2 <= 0) && (si2 < (INT16_MIN / si1))) || ((si1 <= 0) && (si2 > 0) && (si1 < (INT16_MIN / si2))) || ((si1 <= 0) && (si2 <= 0) && (si1 != 0) && (si2 < (INT16_MAX / si1)))) ? 
  193|      0|    (UNDEFINED(si1)) : 
  194|      0|#endif
  195|      0|#endif
  196|      0|    si1 * si2;
  197|      0|}
  198|       |
  199|       |STATIC int16_t
  200|       |FUNC_NAME(mod_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  201|      0|{
  202|      0|  LOG_EXEC
  203|      0|  return 
  204|      0|#ifndef UNSAFE
  205|      0|    ((si2 == 0) || ((si1 == INT16_MIN) && (si2 == (-1)))) ? 
  206|      0|    (UNDEFINED(si1)) : 
  207|      0|#endif
  208|      0|    (si1 % si2);
  209|      0|}
  210|       |
  211|       |STATIC int16_t
  212|       |FUNC_NAME(div_func_int16_t_s_s)(int16_t si1, int16_t si2 LOG_INDEX)
  213|      0|{
  214|      0|  LOG_EXEC
  215|      0|  return 
  216|      0|#ifndef UNSAFE
  217|      0|    ((si2 == 0) || ((si1 == INT16_MIN) && (si2 == (-1)))) ? 
  218|      0|    (UNDEFINED(si1)) : 
  219|      0|#endif
  220|      0|    (si1 / si2);
  221|      0|}
  222|       |
  223|       |STATIC int16_t
  224|       |FUNC_NAME(lshift_func_int16_t_s_s)(int16_t left, int right LOG_INDEX)
  225|      0|{
  226|      0|  LOG_EXEC
  227|      0|  return 
  228|      0|#ifndef UNSAFE
  229|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32) || (left > (INT16_MAX >> ((int)right)))) ? 
  230|      0|    (UNDEFINED(left)) : 
  231|      0|#endif
  232|      0|    (left << ((int)right));
  233|      0|}
  234|       |
  235|       |STATIC int16_t
  236|       |FUNC_NAME(lshift_func_int16_t_s_u)(int16_t left, unsigned int right LOG_INDEX)
  237|      0|{
  238|      0|  LOG_EXEC
  239|      0|  return 
  240|      0|#ifndef UNSAFE
  241|      0|    ((left < 0) || (((unsigned int)right) >= 32) || (left > (INT16_MAX >> ((unsigned int)right)))) ? 
  242|      0|    (UNDEFINED(left)) : 
  243|      0|#endif
  244|      0|    (left << ((unsigned int)right));
  245|      0|}
  246|       |
  247|       |STATIC int16_t
  248|       |FUNC_NAME(rshift_func_int16_t_s_s)(int16_t left, int right LOG_INDEX)
  249|      0|{
  250|      0|  LOG_EXEC
  251|      0|  return 
  252|      0|#ifndef UNSAFE
  253|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32))? 
  254|      0|    (UNDEFINED(left)) : 
  255|      0|#endif
  256|      0|    (left >> ((int)right));
  257|      0|}
  258|       |
  259|       |STATIC int16_t
  260|       |FUNC_NAME(rshift_func_int16_t_s_u)(int16_t left, unsigned int right LOG_INDEX)
  261|      1|{
  262|      1|  LOG_EXEC
  263|      1|  return 
  264|      1|#ifndef UNSAFE
  265|      1|    ((left < 0) || (((unsigned int)right) >= 32)) ? 
  266|      0|    (UNDEFINED(left)) : 
  267|      1|#endif
  268|      1|    (left >> ((unsigned int)right));
  269|      1|}
  270|       |
  271|       |
  272|       |
  273|       |STATIC int32_t
  274|       |FUNC_NAME(unary_minus_func_int32_t_s)(int32_t si LOG_INDEX)
  275|      1|{
  276|      1|  LOG_EXEC
  277|      1|  return 
  278|      1|#ifndef UNSAFE
  279|      1|#if (INT32_MAX>=INT_MAX)
  280|      1|    (si==INT32_MIN) ?
  281|      0|    (UNDEFINED(si)) :
  282|      1|#endif
  283|      1|#endif
  284|      1|    -si;
  285|      1|}
  286|       |
  287|       |STATIC int32_t
  288|       |FUNC_NAME(add_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  289|      0|{
  290|      0|  LOG_EXEC
  291|      0|  return 
  292|      0|#ifndef UNSAFE
  293|      0|#if (INT32_MAX>=INT_MAX)
  294|      0|    (((si1>0) && (si2>0) && (si1 > (INT32_MAX-si2))) || ((si1<0) && (si2<0) && (si1 < (INT32_MIN-si2)))) ?
  295|      0|    (UNDEFINED(si1)) :
  296|      0|#endif
  297|      0|#endif
  298|      0|    (si1 + si2);
  299|      0|}
  300|       |
  301|       |STATIC int32_t
  302|       |FUNC_NAME(sub_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  303|      0|{
  304|      0|  LOG_EXEC
  305|      0|  return 
  306|      0|#ifndef UNSAFE
  307|      0|#if (INT32_MAX>=INT_MAX)
  308|      0|    (((si1^si2) & (((si1 ^ ((si1^si2) & (~INT32_MAX)))-si2)^si2)) < 0) ? 
  309|      0|    (UNDEFINED(si1)) : 
  310|      0|#endif
  311|      0|#endif
  312|      0|    (si1 - si2);
  313|      0|}
  314|       |
  315|       |STATIC int32_t
  316|       |FUNC_NAME(mul_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  317|      1|{
  318|      1|  LOG_EXEC
  319|      1|  return 
  320|      1|#ifndef UNSAFE
  321|      1|#if (INT32_MAX>=INT_MAX)
  322|      1|    (((si1 > 0) && (si2 > 0) && (si1 > (INT32_MAX / si2))) || ((si1 > 0) && (si2 <= 0) && (si2 < (INT32_MIN / si1))) || ((si1 <= 0) && (si2 > 0) && (si1 < (INT32_MIN / si2))) || ((si1 <= 0) && (si2 <= 0) && (si1 != 0) && (si2 < (INT32_MAX / si1)))) ? 
  323|      0|    (UNDEFINED(si1)) : 
  324|      1|#endif
  325|      1|#endif
  326|      1|    si1 * si2;
  327|      1|}
  328|       |
  329|       |STATIC int32_t
  330|       |FUNC_NAME(mod_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  331|      0|{
  332|      0|  LOG_EXEC
  333|      0|  return 
  334|      0|#ifndef UNSAFE
  335|      0|    ((si2 == 0) || ((si1 == INT32_MIN) && (si2 == (-1)))) ? 
  336|      0|    (UNDEFINED(si1)) : 
  337|      0|#endif
  338|      0|    (si1 % si2);
  339|      0|}
  340|       |
  341|       |STATIC int32_t
  342|       |FUNC_NAME(div_func_int32_t_s_s)(int32_t si1, int32_t si2 LOG_INDEX)
  343|      0|{
  344|      0|  LOG_EXEC
  345|      0|  return 
  346|      0|#ifndef UNSAFE
  347|      0|    ((si2 == 0) || ((si1 == INT32_MIN) && (si2 == (-1)))) ? 
  348|      0|    (UNDEFINED(si1)) : 
  349|      0|#endif
  350|      0|    (si1 / si2);
  351|      0|}
  352|       |
  353|       |STATIC int32_t
  354|       |FUNC_NAME(lshift_func_int32_t_s_s)(int32_t left, int right LOG_INDEX)
  355|      0|{
  356|      0|  LOG_EXEC
  357|      0|  return 
  358|      0|#ifndef UNSAFE
  359|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32) || (left > (INT32_MAX >> ((int)right)))) ? 
  360|      0|    (UNDEFINED(left)) : 
  361|      0|#endif
  362|      0|    (left << ((int)right));
  363|      0|}
  364|       |
  365|       |STATIC int32_t
  366|       |FUNC_NAME(lshift_func_int32_t_s_u)(int32_t left, unsigned int right LOG_INDEX)
  367|      0|{
  368|      0|  LOG_EXEC
  369|      0|  return 
  370|      0|#ifndef UNSAFE
  371|      0|    ((left < 0) || (((unsigned int)right) >= 32) || (left > (INT32_MAX >> ((unsigned int)right)))) ? 
  372|      0|    (UNDEFINED(left)) : 
  373|      0|#endif
  374|      0|    (left << ((unsigned int)right));
  375|      0|}
  376|       |
  377|       |STATIC int32_t
  378|       |FUNC_NAME(rshift_func_int32_t_s_s)(int32_t left, int right LOG_INDEX)
  379|      0|{
  380|      0|  LOG_EXEC
  381|      0|  return 
  382|      0|#ifndef UNSAFE
  383|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32))? 
  384|      0|    (UNDEFINED(left)) : 
  385|      0|#endif
  386|      0|    (left >> ((int)right));
  387|      0|}
  388|       |
  389|       |STATIC int32_t
  390|       |FUNC_NAME(rshift_func_int32_t_s_u)(int32_t left, unsigned int right LOG_INDEX)
  391|      0|{
  392|      0|  LOG_EXEC
  393|      0|  return 
  394|      0|#ifndef UNSAFE
  395|      0|    ((left < 0) || (((unsigned int)right) >= 32)) ? 
  396|      0|    (UNDEFINED(left)) : 
  397|      0|#endif
  398|      0|    (left >> ((unsigned int)right));
  399|      0|}
  400|       |
  401|       |#ifndef NO_LONGLONG
  402|       |
  403|       |
  404|       |STATIC int64_t
  405|       |FUNC_NAME(unary_minus_func_int64_t_s)(int64_t si LOG_INDEX)
  406|      1|{
  407|      1|  LOG_EXEC
  408|      1|  return 
  409|      1|#ifndef UNSAFE
  410|      1|#if (INT64_MAX>=INT_MAX)
  411|      1|    (si==INT64_MIN) ?
  412|      0|    (UNDEFINED(si)) :
  413|      1|#endif
  414|      1|#endif
  415|      1|    -si;
  416|      1|}
  417|       |
  418|       |STATIC int64_t
  419|       |FUNC_NAME(add_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  420|      0|{
  421|      0|  LOG_EXEC
  422|      0|  return 
  423|      0|#ifndef UNSAFE
  424|      0|#if (INT64_MAX>=INT_MAX)
  425|      0|    (((si1>0) && (si2>0) && (si1 > (INT64_MAX-si2))) || ((si1<0) && (si2<0) && (si1 < (INT64_MIN-si2)))) ?
  426|      0|    (UNDEFINED(si1)) :
  427|      0|#endif
  428|      0|#endif
  429|      0|    (si1 + si2);
  430|      0|}
  431|       |
  432|       |STATIC int64_t
  433|       |FUNC_NAME(sub_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  434|      0|{
  435|      0|  LOG_EXEC
  436|      0|  return 
  437|      0|#ifndef UNSAFE
  438|      0|#if (INT64_MAX>=INT_MAX)
  439|      0|    (((si1^si2) & (((si1 ^ ((si1^si2) & (~INT64_MAX)))-si2)^si2)) < 0) ? 
  440|      0|    (UNDEFINED(si1)) : 
  441|      0|#endif
  442|      0|#endif
  443|      0|    (si1 - si2);
  444|      0|}
  445|       |
  446|       |STATIC int64_t
  447|       |FUNC_NAME(mul_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  448|      0|{
  449|      0|  LOG_EXEC
  450|      0|  return 
  451|      0|#ifndef UNSAFE
  452|      0|#if (INT64_MAX>=INT_MAX)
  453|      0|    (((si1 > 0) && (si2 > 0) && (si1 > (INT64_MAX / si2))) || ((si1 > 0) && (si2 <= 0) && (si2 < (INT64_MIN / si1))) || ((si1 <= 0) && (si2 > 0) && (si1 < (INT64_MIN / si2))) || ((si1 <= 0) && (si2 <= 0) && (si1 != 0) && (si2 < (INT64_MAX / si1)))) ? 
  454|      0|    (UNDEFINED(si1)) : 
  455|      0|#endif
  456|      0|#endif
  457|      0|    si1 * si2;
  458|      0|}
  459|       |
  460|       |STATIC int64_t
  461|       |FUNC_NAME(mod_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  462|      0|{
  463|      0|  LOG_EXEC
  464|      0|  return 
  465|      0|#ifndef UNSAFE
  466|      0|    ((si2 == 0) || ((si1 == INT64_MIN) && (si2 == (-1)))) ? 
  467|      0|    (UNDEFINED(si1)) : 
  468|      0|#endif
  469|      0|    (si1 % si2);
  470|      0|}
  471|       |
  472|       |STATIC int64_t
  473|       |FUNC_NAME(div_func_int64_t_s_s)(int64_t si1, int64_t si2 LOG_INDEX)
  474|      0|{
  475|      0|  LOG_EXEC
  476|      0|  return 
  477|      0|#ifndef UNSAFE
  478|      0|    ((si2 == 0) || ((si1 == INT64_MIN) && (si2 == (-1)))) ? 
  479|      0|    (UNDEFINED(si1)) : 
  480|      0|#endif
  481|      0|    (si1 / si2);
  482|      0|}
  483|       |
  484|       |STATIC int64_t
  485|       |FUNC_NAME(lshift_func_int64_t_s_s)(int64_t left, int right LOG_INDEX)
  486|      0|{
  487|      0|  LOG_EXEC
  488|      0|  return 
  489|      0|#ifndef UNSAFE
  490|      0|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32) || (left > (INT64_MAX >> ((int)right)))) ? 
  491|      0|    (UNDEFINED(left)) : 
  492|      0|#endif
  493|      0|    (left << ((int)right));
  494|      0|}
  495|       |
  496|       |STATIC int64_t
  497|       |FUNC_NAME(lshift_func_int64_t_s_u)(int64_t left, unsigned int right LOG_INDEX)
  498|      0|{
  499|      0|  LOG_EXEC
  500|      0|  return 
  501|      0|#ifndef UNSAFE
  502|      0|    ((left < 0) || (((unsigned int)right) >= 32) || (left > (INT64_MAX >> ((unsigned int)right)))) ? 
  503|      0|    (UNDEFINED(left)) : 
  504|      0|#endif
  505|      0|    (left << ((unsigned int)right));
  506|      0|}
  507|       |
  508|       |STATIC int64_t
  509|       |FUNC_NAME(rshift_func_int64_t_s_s)(int64_t left, int right LOG_INDEX)
  510|      1|{
  511|      1|  LOG_EXEC
  512|      1|  return 
  513|      1|#ifndef UNSAFE
  514|      1|    ((left < 0) || (((int)right) < 0) || (((int)right) >= 32))? 
  515|      0|    (UNDEFINED(left)) : 
  516|      1|#endif
  517|      1|    (left >> ((int)right));
  518|      1|}
  519|       |
  520|       |STATIC int64_t
  521|       |FUNC_NAME(rshift_func_int64_t_s_u)(int64_t left, unsigned int right LOG_INDEX)
  522|      0|{
  523|      0|  LOG_EXEC
  524|      0|  return 
  525|      0|#ifndef UNSAFE
  526|      0|    ((left < 0) || (((unsigned int)right) >= 32)) ? 
  527|      0|    (UNDEFINED(left)) : 
  528|      0|#endif
  529|      0|    (left >> ((unsigned int)right));
  530|      0|}
  531|       |
  532|       |#endif
  533|       |
  534|       |
  535|       |
  536|       |
  537|       |
  538|       |STATIC uint8_t
  539|       |FUNC_NAME(unary_minus_func_uint8_t_u)(uint8_t ui LOG_INDEX)
  540|      0|{
  541|      0|  LOG_EXEC
  542|      0|  return -ui;
  543|      0|}
  544|       |
  545|       |STATIC uint8_t
  546|       |FUNC_NAME(add_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  547|      0|{
  548|      0|  LOG_EXEC
  549|      0|  return ui1 + ui2;
  550|      0|}
  551|       |
  552|       |STATIC uint8_t
  553|       |FUNC_NAME(sub_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  554|      0|{
  555|      0|  LOG_EXEC
  556|      0|  return ui1 - ui2;
  557|      0|}
  558|       |
  559|       |STATIC uint8_t
  560|       |FUNC_NAME(mul_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  561|      0|{
  562|      0|  LOG_EXEC
  563|      0|  return ((unsigned int)ui1) * ((unsigned int)ui2);
  564|      0|}
  565|       |
  566|       |STATIC uint8_t
  567|       |FUNC_NAME(mod_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  568|      0|{
  569|      0|  LOG_EXEC
  570|      0|  return 
  571|      0|#ifndef UNSAFE
  572|      0|    (ui2 == 0) ? 
  573|      0|    (UNDEFINED(ui1)) : 
  574|      0|#endif
  575|      0|    (ui1 % ui2);
  576|      0|}
  577|       |
  578|       |STATIC uint8_t
  579|       |FUNC_NAME(div_func_uint8_t_u_u)(uint8_t ui1, uint8_t ui2 LOG_INDEX)
  580|      0|{
  581|      0|  LOG_EXEC
  582|      0|  return 
  583|      0|#ifndef UNSAFE
  584|      0|    (ui2 == 0) ? 
  585|      0|    (UNDEFINED(ui1)) : 
  586|      0|#endif
  587|      0|    (ui1 / ui2);
  588|      0|}
  589|       |
  590|       |STATIC uint8_t
  591|       |FUNC_NAME(lshift_func_uint8_t_u_s)(uint8_t left, int right LOG_INDEX)
  592|      0|{
  593|      0|  LOG_EXEC
  594|      0|  return 
  595|      0|#ifndef UNSAFE
  596|      0|    ((((int)right) < 0) || (((int)right) >= 32) || (left > (UINT8_MAX >> ((int)right)))) ? 
  597|      0|    (UNDEFINED(left)) : 
  598|      0|#endif
  599|      0|    (left << ((int)right));
  600|      0|}
  601|       |
  602|       |STATIC uint8_t
  603|       |FUNC_NAME(lshift_func_uint8_t_u_u)(uint8_t left, unsigned int right LOG_INDEX)
  604|      0|{
  605|      0|  LOG_EXEC
  606|      0|  return 
  607|      0|#ifndef UNSAFE
  608|      0|    ((((unsigned int)right) >= 32) || (left > (UINT8_MAX >> ((unsigned int)right)))) ? 
  609|      0|    (UNDEFINED(left)) : 
  610|      0|#endif
  611|      0|    (left << ((unsigned int)right));
  612|      0|}
  613|       |
  614|       |STATIC uint8_t
  615|       |FUNC_NAME(rshift_func_uint8_t_u_s)(uint8_t left, int right LOG_INDEX)
  616|      1|{
  617|      1|  LOG_EXEC
  618|      1|  return 
  619|      1|#ifndef UNSAFE
  620|      1|    ((((int)right) < 0) || (((int)right) >= 32)) ? 
  621|      0|    (UNDEFINED(left)) : 
  622|      1|#endif
  623|      1|    (left >> ((int)right));
  624|      1|}
  625|       |
  626|       |STATIC uint8_t
  627|       |FUNC_NAME(rshift_func_uint8_t_u_u)(uint8_t left, unsigned int right LOG_INDEX)
  628|      0|{
  629|      0|  LOG_EXEC
  630|      0|  return 
  631|      0|#ifndef UNSAFE
  632|      0|    (((unsigned int)right) >= 32) ? 
  633|      0|    (UNDEFINED(left)) : 
  634|      0|#endif
  635|      0|    (left >> ((unsigned int)right));
  636|      0|}
  637|       |
  638|       |
  639|       |
  640|       |STATIC uint16_t
  641|       |FUNC_NAME(unary_minus_func_uint16_t_u)(uint16_t ui LOG_INDEX)
  642|      0|{
  643|      0|  LOG_EXEC
  644|      0|  return -ui;
  645|      0|}
  646|       |
  647|       |STATIC uint16_t
  648|       |FUNC_NAME(add_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  649|      0|{
  650|      0|  LOG_EXEC
  651|      0|  return ui1 + ui2;
  652|      0|}
  653|       |
  654|       |STATIC uint16_t
  655|       |FUNC_NAME(sub_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  656|      1|{
  657|      1|  LOG_EXEC
  658|      1|  return ui1 - ui2;
  659|      1|}
  660|       |
  661|       |STATIC uint16_t
  662|       |FUNC_NAME(mul_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  663|      3|{
  664|      3|  LOG_EXEC
  665|      3|  return ((unsigned int)ui1) * ((unsigned int)ui2);
  666|      3|}
  667|       |
  668|       |STATIC uint16_t
  669|       |FUNC_NAME(mod_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  670|      0|{
  671|      0|  LOG_EXEC
  672|      0|  return 
  673|      0|#ifndef UNSAFE
  674|      0|    (ui2 == 0) ? 
  675|      0|    (UNDEFINED(ui1)) : 
  676|      0|#endif
  677|      0|    (ui1 % ui2);
  678|      0|}
  679|       |
  680|       |STATIC uint16_t
  681|       |FUNC_NAME(div_func_uint16_t_u_u)(uint16_t ui1, uint16_t ui2 LOG_INDEX)
  682|      0|{
  683|      0|  LOG_EXEC
  684|      0|  return 
  685|      0|#ifndef UNSAFE
  686|      0|    (ui2 == 0) ? 
  687|      0|    (UNDEFINED(ui1)) : 
  688|      0|#endif
  689|      0|    (ui1 / ui2);
  690|      0|}
  691|       |
  692|       |STATIC uint16_t
  693|       |FUNC_NAME(lshift_func_uint16_t_u_s)(uint16_t left, int right LOG_INDEX)
  694|      0|{
  695|      0|  LOG_EXEC
  696|      0|  return 
  697|      0|#ifndef UNSAFE
  698|      0|    ((((int)right) < 0) || (((int)right) >= 32) || (left > (UINT16_MAX >> ((int)right)))) ? 
  699|      0|    (UNDEFINED(left)) : 
  700|      0|#endif
  701|      0|    (left << ((int)right));
  702|      0|}
  703|       |
  704|       |STATIC uint16_t
  705|       |FUNC_NAME(lshift_func_uint16_t_u_u)(uint16_t left, unsigned int right LOG_INDEX)
  706|      1|{
  707|      1|  LOG_EXEC
  708|      1|  return 
  709|      1|#ifndef UNSAFE
  710|      1|    ((((unsigned int)right) >= 32) || (left > (UINT16_MAX >> ((unsigned int)right)))) ? 
  711|      1|    (UNDEFINED(left)) : 
  712|      1|#endif
  713|      1|    (left << ((unsigned int)right));
  714|      1|}
  715|       |
  716|       |STATIC uint16_t
  717|       |FUNC_NAME(rshift_func_uint16_t_u_s)(uint16_t left, int right LOG_INDEX)
  718|      0|{
  719|      0|  LOG_EXEC
  720|      0|  return 
  721|      0|#ifndef UNSAFE
  722|      0|    ((((int)right) < 0) || (((int)right) >= 32)) ? 
  723|      0|    (UNDEFINED(left)) : 
  724|      0|#endif
  725|      0|    (left >> ((int)right));
  726|      0|}
  727|       |
  728|       |STATIC uint16_t
  729|       |FUNC_NAME(rshift_func_uint16_t_u_u)(uint16_t left, unsigned int right LOG_INDEX)
  730|      0|{
  731|      0|  LOG_EXEC
  732|      0|  return 
  733|      0|#ifndef UNSAFE
  734|      0|    (((unsigned int)right) >= 32) ? 
  735|      0|    (UNDEFINED(left)) : 
  736|      0|#endif
  737|      0|    (left >> ((unsigned int)right));
  738|      0|}
  739|       |
  740|       |
  741|       |
  742|       |STATIC uint32_t
  743|       |FUNC_NAME(unary_minus_func_uint32_t_u)(uint32_t ui LOG_INDEX)
  744|      0|{
  745|      0|  LOG_EXEC
  746|      0|  return -ui;
  747|      0|}
  748|       |
  749|       |STATIC uint32_t
  750|       |FUNC_NAME(add_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  751|      0|{
  752|      0|  LOG_EXEC
  753|      0|  return ui1 + ui2;
  754|      0|}
  755|       |
  756|       |STATIC uint32_t
  757|       |FUNC_NAME(sub_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  758|      0|{
  759|      0|  LOG_EXEC
  760|      0|  return ui1 - ui2;
  761|      0|}
  762|       |
  763|       |STATIC uint32_t
  764|       |FUNC_NAME(mul_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  765|      0|{
  766|      0|  LOG_EXEC
  767|      0|  return ((unsigned int)ui1) * ((unsigned int)ui2);
  768|      0|}
  769|       |
  770|       |STATIC uint32_t
  771|       |FUNC_NAME(mod_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  772|      0|{
  773|      0|  LOG_EXEC
  774|      0|  return 
  775|      0|#ifndef UNSAFE
  776|      0|    (ui2 == 0) ? 
  777|      0|    (UNDEFINED(ui1)) : 
  778|      0|#endif
  779|      0|    (ui1 % ui2);
  780|      0|}
  781|       |
  782|       |STATIC uint32_t
  783|       |FUNC_NAME(div_func_uint32_t_u_u)(uint32_t ui1, uint32_t ui2 LOG_INDEX)
  784|      0|{
  785|      0|  LOG_EXEC
  786|      0|  return 
  787|      0|#ifndef UNSAFE
  788|      0|    (ui2 == 0) ? 
  789|      0|    (UNDEFINED(ui1)) : 
  790|      0|#endif
  791|      0|    (ui1 / ui2);
  792|      0|}
  793|       |
  794|       |STATIC uint32_t
  795|       |FUNC_NAME(lshift_func_uint32_t_u_s)(uint32_t left, int right LOG_INDEX)
  796|      0|{
  797|      0|  LOG_EXEC
  798|      0|  return 
  799|      0|#ifndef UNSAFE
  800|      0|    ((((int)right) < 0) || (((int)right) >= 32) || (left > (UINT32_MAX >> ((int)right)))) ? 
  801|      0|    (UNDEFINED(left)) : 
  802|      0|#endif
  803|      0|    (left << ((int)right));
  804|      0|}
  805|       |
  806|       |STATIC uint32_t
  807|       |FUNC_NAME(lshift_func_uint32_t_u_u)(uint32_t left, unsigned int right LOG_INDEX)
  808|      3|{
  809|      3|  LOG_EXEC
  810|      3|  return 
  811|      3|#ifndef UNSAFE
  812|      3|    ((((unsigned int)right) >= 32) || (left > (UINT32_MAX >> ((unsigned int)right)))) ? 
  813|      0|    (UNDEFINED(left)) : 
  814|      3|#endif
  815|      3|    (left << ((unsigned int)right));
  816|      3|}
  817|       |
  818|       |STATIC uint32_t
  819|       |FUNC_NAME(rshift_func_uint32_t_u_s)(uint32_t left, int right LOG_INDEX)
  820|      0|{
  821|      0|  LOG_EXEC
  822|      0|  return 
  823|      0|#ifndef UNSAFE
  824|      0|    ((((int)right) < 0) || (((int)right) >= 32)) ? 
  825|      0|    (UNDEFINED(left)) : 
  826|      0|#endif
  827|      0|    (left >> ((int)right));
  828|      0|}
  829|       |
  830|       |STATIC uint32_t
  831|       |FUNC_NAME(rshift_func_uint32_t_u_u)(uint32_t left, unsigned int right LOG_INDEX)
  832|      0|{
  833|      0|  LOG_EXEC
  834|      0|  return 
  835|      0|#ifndef UNSAFE
  836|      0|    (((unsigned int)right) >= 32) ? 
  837|      0|    (UNDEFINED(left)) : 
  838|      0|#endif
  839|      0|    (left >> ((unsigned int)right));
  840|      0|}
  841|       |
  842|       |#ifndef NO_LONGLONG
  843|       |
  844|       |
  845|       |STATIC uint64_t
  846|       |FUNC_NAME(unary_minus_func_uint64_t_u)(uint64_t ui LOG_INDEX)
  847|      0|{
  848|      0|  LOG_EXEC
  849|      0|  return -ui;
  850|      0|}
  851|       |
  852|       |STATIC uint64_t
  853|       |FUNC_NAME(add_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  854|      1|{
  855|      1|  LOG_EXEC
  856|      1|  return ui1 + ui2;
  857|      1|}
  858|       |
  859|       |STATIC uint64_t
  860|       |FUNC_NAME(sub_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  861|      0|{
  862|      0|  LOG_EXEC
  863|      0|  return ui1 - ui2;
  864|      0|}
  865|       |
  866|       |STATIC uint64_t
  867|       |FUNC_NAME(mul_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  868|      0|{
  869|      0|  LOG_EXEC
  870|      0|  return ((unsigned long long)ui1) * ((unsigned long long)ui2);
  871|      0|}
  872|       |
  873|       |STATIC uint64_t
  874|       |FUNC_NAME(mod_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  875|      0|{
  876|      0|  LOG_EXEC
  877|      0|  return 
  878|      0|#ifndef UNSAFE
  879|      0|    (ui2 == 0) ? 
  880|      0|    (UNDEFINED(ui1)) : 
  881|      0|#endif
  882|      0|    (ui1 % ui2);
  883|      0|}
  884|       |
  885|       |STATIC uint64_t
  886|       |FUNC_NAME(div_func_uint64_t_u_u)(uint64_t ui1, uint64_t ui2 LOG_INDEX)
  887|      0|{
  888|      0|  LOG_EXEC
  889|      0|  return 
  890|      0|#ifndef UNSAFE
  891|      0|    (ui2 == 0) ? 
  892|      0|    (UNDEFINED(ui1)) : 
  893|      0|#endif
  894|      0|    (ui1 / ui2);
  895|      0|}
  896|       |
  897|       |STATIC uint64_t
  898|       |FUNC_NAME(lshift_func_uint64_t_u_s)(uint64_t left, int right LOG_INDEX)
  899|      0|{
  900|      0|  LOG_EXEC
  901|      0|  return 
  902|      0|#ifndef UNSAFE
  903|      0|    ((((int)right) < 0) || (((int)right) >= 32) || (left > (UINT64_MAX >> ((int)right)))) ? 
  904|      0|    (UNDEFINED(left)) : 
  905|      0|#endif
  906|      0|    (left << ((int)right));
  907|      0|}
  908|       |
  909|       |STATIC uint64_t
  910|       |FUNC_NAME(lshift_func_uint64_t_u_u)(uint64_t left, unsigned int right LOG_INDEX)
  911|      0|{
  912|      0|  LOG_EXEC
  913|      0|  return 
  914|      0|#ifndef UNSAFE
  915|      0|    ((((unsigned int)right) >= 32) || (left > (UINT64_MAX >> ((unsigned int)right)))) ? 
  916|      0|    (UNDEFINED(left)) : 
  917|      0|#endif
  918|      0|    (left << ((unsigned int)right));
  919|      0|}
  920|       |
  921|       |STATIC uint64_t
  922|       |FUNC_NAME(rshift_func_uint64_t_u_s)(uint64_t left, int right LOG_INDEX)
  923|      0|{
  924|      0|  LOG_EXEC
  925|      0|  return 
  926|      0|#ifndef UNSAFE
  927|      0|    ((((int)right) < 0) || (((int)right) >= 32)) ? 
  928|      0|    (UNDEFINED(left)) : 
  929|      0|#endif
  930|      0|    (left >> ((int)right));
  931|      0|}
  932|       |
  933|       |STATIC uint64_t
  934|       |FUNC_NAME(rshift_func_uint64_t_u_u)(uint64_t left, unsigned int right LOG_INDEX)
  935|      0|{
  936|      0|  LOG_EXEC
  937|      0|  return 
  938|      0|#ifndef UNSAFE
  939|      0|    (((unsigned int)right) >= 32) ? 
  940|      0|    (UNDEFINED(left)) : 
  941|      0|#endif
  942|      0|    (left >> ((unsigned int)right));
  943|      0|}
  944|       |
  945|       |#endif
  946|       |
  947|       |
  948|       |
  949|       |
  950|       |#ifdef __STDC__
  951|       |float fabsf(float);
  952|       |double fabs(double);
  953|       |
  954|       |
  955|       |STATIC float
  956|       |FUNC_NAME(add_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
  957|      0|{
  958|      0|  LOG_EXEC
  959|      0|  return 
  960|      0|#ifndef UNSAFE_FLOAT
  961|      0|    (fabsf((0.5f * sf1) + (0.5f * sf2)) > (0.5f * FLT_MAX)) ? 
  962|      0|    UNDEFINED(sf1) :
  963|      0|#endif
  964|      0|    (sf1 + sf2);
  965|      0|}
  966|       |
  967|       |STATIC float
  968|       |FUNC_NAME(sub_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
  969|      0|{
  970|      0|  LOG_EXEC
  971|      0|  return 
  972|      0|#ifndef UNSAFE_FLOAT
  973|      0|    (fabsf((0.5f * sf1) - (0.5f * sf2)) > (0.5f * FLT_MAX)) ? 
  974|      0|    UNDEFINED(sf1) :
  975|      0|#endif
  976|      0|    (sf1 - sf2);
  977|      0|}
  978|       |
  979|       |STATIC float
  980|       |FUNC_NAME(mul_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
  981|      0|{
  982|      0|  LOG_EXEC
  983|      0|  return
  984|      0|#ifndef UNSAFE_FLOAT
  985|      0|#ifdef __STDC__
  986|      0|    (fabsf((0x1.0p-100f * sf1) * (0x1.0p-28f * sf2)) > (0x1.0p-100f * (0x1.0p-28f * FLT_MAX))) ?
  987|      0|#else
  988|      0|    (fabsf((ldexpf(1.0, -100) * sf1) * (0x1.0p-28f * sf2)) > (ldexpf(1.0, -100) * (0x1.0p-28f * FLT_MAX))) ?
  989|      0|#endif
  990|      0|    UNDEFINED(sf1) :
  991|      0|#endif
  992|      0|    (sf1 * sf2);
  993|      0|}
  994|       |
  995|       |STATIC float
  996|       |FUNC_NAME(div_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
  997|      0|{
  998|      0|  LOG_EXEC
  999|      0|  return
 1000|      0|#ifndef UNSAFE_FLOAT
 1001|      0|#ifdef __STDC__
 1002|      0|    ((fabsf(sf2) < 1.0f) && (((sf2 == 0.0f) || (fabsf((0x1.0p-49f * sf1) / (0x1.0p100f * sf2))) > (0x1.0p-100f * (0x1.0p-49f * FLT_MAX))))) ?
 1003|      0|#else
 1004|      0|    ((fabsf(sf2) < 1.0f) && (((sf2 == 0.0f) || (fabsf((0x1.0p-49f * sf1) / (ldexpf(1.0, 100) * sf2))) > (ldexpf(1.0, -100) * (0x1.0p-49f * FLT_MAX))))) ?
 1005|      0|#endif
 1006|      0|    UNDEFINED(sf1) :
 1007|      0|#endif
 1008|      0|    (sf1 / sf2);
 1009|      0|}
 1010|       |
 1011|       |
 1012|       |
 1013|       |
 1014|       |STATIC double
 1015|       |FUNC_NAME(add_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1016|      0|{
 1017|      0|  LOG_EXEC
 1018|      0|  return 
 1019|      0|#ifndef UNSAFE_FLOAT
 1020|      0|    (fabs((0.5 * sf1) + (0.5 * sf2)) > (0.5 * DBL_MAX)) ? 
 1021|      0|    UNDEFINED(sf1) :
 1022|      0|#endif
 1023|      0|    (sf1 + sf2);
 1024|      0|}
 1025|       |
 1026|       |STATIC double
 1027|       |FUNC_NAME(sub_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1028|      0|{
 1029|      0|  LOG_EXEC
 1030|      0|  return 
 1031|      0|#ifndef UNSAFE_FLOAT
 1032|      0|    (fabs((0.5 * sf1) - (0.5 * sf2)) > (0.5 * DBL_MAX)) ? 
 1033|      0|    UNDEFINED(sf1) :
 1034|      0|#endif
 1035|      0|    (sf1 - sf2);
 1036|      0|}
 1037|       |
 1038|       |STATIC double
 1039|       |FUNC_NAME(mul_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1040|      0|{
 1041|      0|  LOG_EXEC
 1042|      0|  return
 1043|      0|#ifndef UNSAFE_FLOAT
 1044|      0|#ifdef __STDC__
 1045|      0|    (fabs((0x1.0p-100 * sf1) * (0x1.0p-924 * sf2)) > (0x1.0p-100 * (0x1.0p-924 * DBL_MAX))) ?
 1046|      0|#else
 1047|      0|    (fabs((ldexp(1.0, -100) * sf1) * (0x1.0p-924 * sf2)) > (ldexp(1.0, -100) * (0x1.0p-924 * DBL_MAX))) ?
 1048|      0|#endif
 1049|      0|    UNDEFINED(sf1) :
 1050|      0|#endif
 1051|      0|    (sf1 * sf2);
 1052|      0|}
 1053|       |
 1054|       |STATIC double
 1055|       |FUNC_NAME(div_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1056|      0|{
 1057|      0|  LOG_EXEC
 1058|      0|  return
 1059|      0|#ifndef UNSAFE_FLOAT
 1060|      0|#ifdef __STDC__
 1061|      0|    ((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((0x1.0p-974 * sf1) / (0x1.0p100 * sf2))) > (0x1.0p-100 * (0x1.0p-974 * DBL_MAX))))) ?
 1062|      0|#else
 1063|      0|    ((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((0x1.0p-974 * sf1) / (ldexp(1.0, 100) * sf2))) > (ldexp(1.0, -100) * (0x1.0p-974 * DBL_MAX))))) ?
 1064|      0|#endif
 1065|      0|    UNDEFINED(sf1) :
 1066|      0|#endif
 1067|      0|    (sf1 / sf2);
 1068|      0|}
 1069|       |
 1070|       |
 1071|       |#else
 1072|       |
 1073|       |
 1074|       |STATIC float
 1075|       |FUNC_NAME(add_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
 1076|       |{
 1077|       |  LOG_EXEC
 1078|       |  return 
 1079|       |#ifndef UNSAFE_FLOAT
 1080|       |    (fabsf((0.5f * sf1) + (0.5f * sf2)) > (0.5f * FLT_MAX)) ? 
 1081|       |    UNDEFINED(sf1) :
 1082|       |#endif
 1083|       |    (sf1 + sf2);
 1084|       |}
 1085|       |
 1086|       |STATIC float
 1087|       |FUNC_NAME(sub_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
 1088|       |{
 1089|       |  LOG_EXEC
 1090|       |  return 
 1091|       |#ifndef UNSAFE_FLOAT
 1092|       |    (fabsf((0.5f * sf1) - (0.5f * sf2)) > (0.5f * FLT_MAX)) ? 
 1093|       |    UNDEFINED(sf1) :
 1094|       |#endif
 1095|       |    (sf1 - sf2);
 1096|       |}
 1097|       |
 1098|       |STATIC float
 1099|       |FUNC_NAME(mul_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
 1100|       |{
 1101|       |  LOG_EXEC
 1102|       |  return
 1103|       |#ifndef UNSAFE_FLOAT
 1104|       |#ifdef __STDC__
 1105|       |    (fabsf((0x1.0p-100f * sf1) * (ldexpf(1.0, -28) * sf2)) > (0x1.0p-100f * (ldexpf(1.0, -28) * FLT_MAX))) ?
 1106|       |#else
 1107|       |    (fabsf((ldexpf(1.0, -100) * sf1) * (ldexpf(1.0, -28) * sf2)) > (ldexpf(1.0, -100) * (ldexpf(1.0, -28) * FLT_MAX))) ?
 1108|       |#endif
 1109|       |    UNDEFINED(sf1) :
 1110|       |#endif
 1111|       |    (sf1 * sf2);
 1112|       |}
 1113|       |
 1114|       |STATIC float
 1115|       |FUNC_NAME(div_func_float_f_f)(float sf1, float sf2 LOG_INDEX)
 1116|       |{
 1117|       |  LOG_EXEC
 1118|       |  return
 1119|       |#ifndef UNSAFE_FLOAT
 1120|       |#ifdef __STDC__
 1121|       |    ((fabsf(sf2) < 1.0f) && (((sf2 == 0.0f) || (fabsf((ldexpf(1.0, -49) * sf1) / (0x1.0p100f * sf2))) > (0x1.0p-100f * (ldexpf(1.0, -49) * FLT_MAX))))) ?
 1122|       |#else
 1123|       |    ((fabsf(sf2) < 1.0f) && (((sf2 == 0.0f) || (fabsf((ldexpf(1.0, -49) * sf1) / (ldexpf(1.0, 100) * sf2))) > (ldexpf(1.0, -100) * (ldexpf(1.0, -49) * FLT_MAX))))) ?
 1124|       |#endif
 1125|       |    UNDEFINED(sf1) :
 1126|       |#endif
 1127|       |    (sf1 / sf2);
 1128|       |}
 1129|       |
 1130|       |
 1131|       |
 1132|       |
 1133|       |STATIC double
 1134|       |FUNC_NAME(add_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1135|       |{
 1136|       |  LOG_EXEC
 1137|       |  return 
 1138|       |#ifndef UNSAFE_FLOAT
 1139|       |    (fabs((0.5 * sf1) + (0.5 * sf2)) > (0.5 * DBL_MAX)) ? 
 1140|       |    UNDEFINED(sf1) :
 1141|       |#endif
 1142|       |    (sf1 + sf2);
 1143|       |}
 1144|       |
 1145|       |STATIC double
 1146|       |FUNC_NAME(sub_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1147|       |{
 1148|       |  LOG_EXEC
 1149|       |  return 
 1150|       |#ifndef UNSAFE_FLOAT
 1151|       |    (fabs((0.5 * sf1) - (0.5 * sf2)) > (0.5 * DBL_MAX)) ? 
 1152|       |    UNDEFINED(sf1) :
 1153|       |#endif
 1154|       |    (sf1 - sf2);
 1155|       |}
 1156|       |
 1157|       |STATIC double
 1158|       |FUNC_NAME(mul_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1159|       |{
 1160|       |  LOG_EXEC
 1161|       |  return
 1162|       |#ifndef UNSAFE_FLOAT
 1163|       |#ifdef __STDC__
 1164|       |    (fabs((0x1.0p-100 * sf1) * (ldexp(1.0, -924) * sf2)) > (0x1.0p-100 * (ldexp(1.0, -924) * DBL_MAX))) ?
 1165|       |#else
 1166|       |    (fabs((ldexp(1.0, -100) * sf1) * (ldexp(1.0, -924) * sf2)) > (ldexp(1.0, -100) * (ldexp(1.0, -924) * DBL_MAX))) ?
 1167|       |#endif
 1168|       |    UNDEFINED(sf1) :
 1169|       |#endif
 1170|       |    (sf1 * sf2);
 1171|       |}
 1172|       |
 1173|       |STATIC double
 1174|       |FUNC_NAME(div_func_double_f_f)(double sf1, double sf2 LOG_INDEX)
 1175|       |{
 1176|       |  LOG_EXEC
 1177|       |  return
 1178|       |#ifndef UNSAFE_FLOAT
 1179|       |#ifdef __STDC__
 1180|       |    ((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((ldexp(1.0, -974) * sf1) / (0x1.0p100 * sf2))) > (0x1.0p-100 * (ldexp(1.0, -974) * DBL_MAX))))) ?
 1181|       |#else
 1182|       |    ((fabs(sf2) < 1.0) && (((sf2 == 0.0) || (fabs((ldexp(1.0, -974) * sf1) / (ldexp(1.0, 100) * sf2))) > (ldexp(1.0, -100) * (ldexp(1.0, -974) * DBL_MAX))))) ?
 1183|       |#endif
 1184|       |    UNDEFINED(sf1) :
 1185|       |#endif
 1186|       |    (sf1 / sf2);
 1187|       |}
 1188|       |
 1189|       |
 1190|       |#endif
 1191|       |
 1192|       |
 1193|       |
 1194|       |
 1195|       |STATIC int32_t
 1196|       |FUNC_NAME(convert_func_float_to_int32_t)(float sf1 LOG_INDEX)
 1197|      0|{
 1198|      0|  LOG_EXEC
 1199|      0|  return 
 1200|      0|#ifndef UNSAFE_FLOAT
 1201|      0|    ((sf1 <= INT32_MIN) || (sf1 >= INT32_MAX)) ?
 1202|      0|    UNDEFINED(INT32_MAX) :
 1203|      0|#endif
 1204|      0|    ((int32_t)(sf1));
 1205|      0|}
 1206|       |
 1207|       |
 1208|       |
 1209|       |#endif

