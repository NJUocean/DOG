        -:    0:Source:109.c
        -:    0:Graph:109.gcno
        -:    0:Data:109.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:union U0 {
        -:    7:  volatile uint64_t f0;
        -:    8:};
        -:    9:
        -:   10:static volatile int32_t g_2 = 2L;
        -:   11:static volatile int32_t g_3 = 1L;
        -:   12:static volatile int32_t g_4 = 0xCB13638EL;
        -:   13:static volatile int32_t g_5 = 6L;
        -:   14:static int32_t g_6[1] = {1L};
        -:   15:static volatile int32_t g_10[2][3] = {{(-1L), (-1L), (-4L)}, {(-1L), (-1L), (-4L)}};
        -:   16:static volatile int32_t g_11[3] = {(-1L), (-1L), (-1L)};
        -:   17:static int32_t g_12 = 0L;
        -:   18:static int32_t g_13 = 0x84BC9C3DL;
        -:   19:static union U0 g_31 = {0x04353EA3A7221EBCLL};
        -:   20:static uint16_t g_35 = 1UL;
        -:   21:static int32_t *g_37 = (void *)0;
        -:   22:static int32_t **g_36 = &g_37;
        -:   23:static int8_t g_39 = 0L;
        -:   24:static uint64_t g_41 = 0xFE96F77D900D2964LL;
        -:   25:static uint8_t g_44 = 0x17L;
        -:   26:static int32_t g_45 = 0x040C8E82L;
        -:   27:
        -:   28:static uint64_t func_1(void);
        -:   29:static uint8_t func_19(int32_t *const p_20, uint32_t p_21);
        -:   30:
        1:   31:static uint64_t func_1(void) {
        -:   32:  int32_t l_9[1][1][2];
        1:   33:  int32_t *l_14 = &l_9[0][0][1];
        1:   34:  int32_t **l_32 = &l_14;
        1:   35:  uint16_t *l_33 = (void *)0;
        1:   36:  uint16_t *l_34 = &g_35;
        1:   37:  int8_t *l_38 = &g_39;
        1:   38:  uint64_t *l_40 = &g_41;
        1:   39:  uint8_t *l_42 = (void *)0;
        1:   40:  uint8_t *l_43 = &g_44;
        -:   41:  int32_t l_46[1];
        -:   42:  int i, j, k;
        2:   43:  for (i = 0; i < 1; i++) {
        2:   44:    for (j = 0; j < 1; j++) {
        3:   45:      for (k = 0; k < 2; k++)
        2:   46:        l_9[i][j][k] = 0x6FF23B1AL;
        -:   47:    }
        -:   48:  }
        2:   49:  for (i = 0; i < 1; i++)
        1:   50:    l_46[i] = 0x833AED5EL;
       14:   51:  for (g_6[0] = 0; (g_6[0] < 13); g_6[0]++) {
       26:   52:    for (g_12 = 0; (g_12 >= 0); g_12 -= 1) {
       26:   53:      for (g_13 = 0; (g_13 >= 0); g_13 -= 1) {
       13:   54:        l_14 = (void *)0;
        -:   55:      }
       26:   56:      for (g_13 = 0; (g_13 >= 0); g_13 -= 1) {
        -:   57:        int i, j, k;
      13*:   58:        l_9[g_12][g_12][(g_13 + 1)] = (0x5589B58331C587C7LL && (safe_div_func_int64_t_s_s(0x0B168F928D9BA5F2LL, (safe_mod_func_uint8_t_u_u(g_6[0], func_19(&g_6[0], ((-1L) | (g_12 && g_2))))))));
        -:   59:      }
        -:   60:    }
        -:   61:  }
       1*:   62:  l_46[0] |= (g_2, (safe_add_func_uint16_t_u_u((((g_45 = ((*l_43) = (safe_mod_func_uint64_t_u_u(((*l_40) &= (1UL | (+(safe_rshift_func_int8_t_s_u(((*l_38) = ((l_9[0][0][0] || ((*l_34) = (safe_rshift_func_int8_t_s_s(((g_31, &g_5) != (void *)0), (((*l_32) = &g_6[0]) != &g_6[0]))))) < (l_32 == g_36))), l_9[0][0][1]))))), 0x1C19CD890F6DAE1DLL)))) >= 1L), 0xDC4DL), 9L)));
        1:   63:  return g_6[0];
        -:   64:}
        -:   65:
       13:   66:static uint8_t func_19(int32_t *const p_20, uint32_t p_21) { return p_21; }
        -:   67:
        1:   68:int main(int argc, char *argv[]) {
        -:   69:  int i, j;
        1:   70:  int print_hash_value = 0;
       1*:   71:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   72:    print_hash_value = 1;
        1:   73:  platform_main_begin();
        1:   74:  crc32_gentab();
        1:   75:  func_1();
        1:   76:  transparent_crc(g_2, "g_2", print_hash_value);
        1:   77:  transparent_crc(g_3, "g_3", print_hash_value);
        1:   78:  transparent_crc(g_4, "g_4", print_hash_value);
        1:   79:  transparent_crc(g_5, "g_5", print_hash_value);
        2:   80:  for (i = 0; i < 1; i++) {
        1:   81:    transparent_crc(g_6[i], "g_6[i]", print_hash_value);
        1:   82:    if (print_hash_value)
    #####:   83:      printf("index = [%d]\n", i);
        -:   84:  }
        3:   85:  for (i = 0; i < 2; i++) {
        8:   86:    for (j = 0; j < 3; j++) {
        6:   87:      transparent_crc(g_10[i][j], "g_10[i][j]", print_hash_value);
        6:   88:      if (print_hash_value)
    #####:   89:        printf("index = [%d][%d]\n", i, j);
        -:   90:    }
        -:   91:  }
        4:   92:  for (i = 0; i < 3; i++) {
        3:   93:    transparent_crc(g_11[i], "g_11[i]", print_hash_value);
        3:   94:    if (print_hash_value)
    #####:   95:      printf("index = [%d]\n", i);
        -:   96:  }
        1:   97:  transparent_crc(g_12, "g_12", print_hash_value);
        1:   98:  transparent_crc(g_13, "g_13", print_hash_value);
        1:   99:  transparent_crc(g_31.f0, "g_31.f0", print_hash_value);
        1:  100:  transparent_crc(g_35, "g_35", print_hash_value);
        1:  101:  transparent_crc(g_39, "g_39", print_hash_value);
        1:  102:  transparent_crc(g_41, "g_41", print_hash_value);
        1:  103:  transparent_crc(g_44, "g_44", print_hash_value);
        1:  104:  transparent_crc(g_45, "g_45", print_hash_value);
        1:  105:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  106:  return 0;
        -:  107:}
