        -:    0:Source:953.c
        -:    0:Graph:953.gcno
        -:    0:Data:953.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:struct S0 {
        -:    7:  int64_t f0;
        -:    8:  int64_t f1;
        -:    9:  int32_t f2;
        -:   10:};
        -:   11:
        -:   12:static int32_t g_5 = 0L;
        -:   13:static uint32_t g_18[5][3][1] = {{{4294967290UL}, {4294967294UL}, {4294967294UL}}, {{4294967290UL}, {4294967294UL}, {4294967294UL}}, {{4294967290UL}, {4294967294UL}, {4294967294UL}}, {{4294967290UL}, {4294967294UL}, {4294967294UL}}, {{4294967290UL}, {4294967294UL}, {4294967294UL}}};
        -:   14:static int32_t g_29 = 1L;
        -:   15:static uint8_t g_34 = 0UL;
        -:   16:static uint8_t g_54 = 0xB3L;
        -:   17:static int32_t *volatile g_59 = (void *)0;
        -:   18:static int32_t g_80 = 8L;
        -:   19:static const int64_t g_82 = 6L;
        -:   20:static const int64_t *g_81 = &g_82;
        -:   21:static struct S0 g_94[5][4][3] = {{{{1L, 0x4C770407C5320B35LL, 1L}, {0xB4D153B42EBA3859LL, 0x57360C0ABB7B1AC9LL, -1L}, {0x37A7FFAE90203C69LL, 1L, 0xA82D269AL}}, {{0x2E3E2A50B6C34CEFLL, 0x70AB71361DE361C4LL, 0xE7E06730L}, {0xE49CAF053B50BCEFLL, -8L, 0L}, {3L, -1L, 0x14404B11L}}, {{0x87380C216484500ALL, 0xB561C9B0828E8F0FLL, 0x9A98420AL}, {0x2E3E2A50B6C34CEFLL, 0x70AB71361DE361C4LL, 0xE7E06730L}, {0xDE1848A2850EDC41LL, 0x6DCF8DE9EF314FBCLL, 0x55470A06L}}, {{4L, -2L, 0xB035B408L}, {0xE7E41F4A390401A7LL, -10L, 0x34BFCA91L}, {0xB4D153B42EBA3859LL, 0x57360C0ABB7B1AC9LL, -1L}}},
        -:   22:                                  {{{0x47A4BBF6EB6F9E29LL, 0xF4BB62B1260E8660LL, 1L}, {0x2E3E2A50B6C34CEFLL, 0x70AB71361DE361C4LL, 0xE7E06730L}, {0x1ADEC5ABB530338ELL, 0x0FFFF0E5992B028ALL, 0xBD3C15F2L}}, {{0x7CAE9FC7D00C9FB3LL, 0x1C6011814A66755DLL, 1L}, {0xE49CAF053B50BCEFLL, -8L, 0L}, {0x2DAC39F6C45391C2LL, 1L, 0x5D6BEAECL}}, {{0xB4D153B42EBA3859LL, 0x57360C0ABB7B1AC9LL, -1L}, {0xB4D153B42EBA3859LL, 0x57360C0ABB7B1AC9LL, -1L}, {0x2E3E2A50B6C34CEFLL, 0x70AB71361DE361C4LL, 0xE7E06730L}}, {{0xB4D153B42EBA3859LL, 0x57360C0ABB7B1AC9LL, -1L}, {0x37A7FFAE90203C69LL, 1L, 0xA82D269AL}, {0x47A4BBF6EB6F9E29LL, 0xF4BB62B1260E8660LL, 1L}}},
        -:   23:                                  {{{0x7CAE9FC7D00C9FB3LL, 0x1C6011814A66755DLL, 1L}, {-1L, 0x1B451AF0014B0E7ALL, 0L}, {0x4D6886700432F2B5LL, 0xAC05FCAF600D476ALL, 0x755E220CL}}, {{0x47A4BBF6EB6F9E29LL, 0xF4BB62B1260E8660LL, 1L}, {0x1ADEC5ABB530338ELL, 0x0FFFF0E5992B028ALL, 0xBD3C15F2L}, {0x7CAE9FC7D00C9FB3LL, 0x1C6011814A66755DLL, 1L}}, {{4L, -2L, 0xB035B408L}, {0xE49CAF053B50BCEFLL, -8L, 0L}, {0xE21AC514D69EA850LL, 0x006303C50B10B9BDLL, 5L}}, {{0xDE1848A2850EDC41LL, 0x6DCF8DE9EF314FBCLL, 0x55470A06L}, {0xE7E41F4A390401A7LL, -10L, 0x34BFCA91L}, {0x2DAC39F6C45391C2LL, 1L, 0x5D6BEAECL}}},
        -:   24:                                  {{{1L, 0x4C770407C5320B35LL, 1L}, {0x1ADEC5ABB530338ELL, 0x0FFFF0E5992B028ALL, 0xBD3C15F2L}, {1L, 0x4C770407C5320B35LL, 1L}}, {{-1L, 0x1B451AF0014B0E7ALL, 0L}, {0x1ADEC5ABB530338ELL, 0x0FFFF0E5992B028ALL, 0xBD3C15F2L}, {0x2E3E2A50B6C34CEFLL, 0x70AB71361DE361C4LL, 0xE7E06730L}}, {{0x2E3E2A50B6C34CEFLL, 0x70AB71361DE361C4LL, 0xE7E06730L}, {0xE7E41F4A390401A7LL, -10L, 0x34BFCA91L}, {0x87380C216484500ALL, 0xB561C9B0828E8F0FLL, 0x9A98420AL}}, {{0x1ADEC5ABB530338ELL, 0x0FFFF0E5992B028ALL, 0xBD3C15F2L}, {0xE49CAF053B50BCEFLL, -8L, 0L}, {4L, -2L, 0xB035B408L}}},
        -:   25:                                  {{{0x37A7FFAE90203C69LL, 1L, 0xA82D269AL}, {0x87380C216484500ALL, 0xB561C9B0828E8F0FLL, 0x9A98420AL}, {0x47A4BBF6EB6F9E29LL, 0xF4BB62B1260E8660LL, 1L}}, {{0x1ADEC5ABB530338ELL, 0x0FFFF0E5992B028ALL, 0xBD3C15F2L}, {3L, -1L, 0x14404B11L}, {0x7CAE9FC7D00C9FB3LL, 0x1C6011814A66755DLL, 1L}}, {{0x2E3E2A50B6C34CEFLL, 0x70AB71361DE361C4LL, 0xE7E06730L}, {0xB4D153B42EBA3859LL, 0x57360C0ABB7B1AC9LL, -1L}, {0xB4D153B42EBA3859LL, 0x57360C0ABB7B1AC9LL, -1L}}, {{-1L, 0x1B451AF0014B0E7ALL, 0L}, {4L, -2L, 0xB035B408L}, {0xB4D153B42EBA3859LL, 0x57360C0ABB7B1AC9LL, -1L}}}};
        -:   26:static struct S0 *volatile g_95 = &g_94[2][3][1];
        -:   27:static uint8_t g_107[2][1] = {{0xAFL}, {0xAFL}};
        -:   28:static int8_t g_112 = 0xD1L;
        -:   29:static int8_t g_114 = 0xCEL;
        -:   30:
        -:   31:static int32_t func_1(void);
        -:   32:static int32_t *func_2(int32_t *p_3);
        -:   33:
        1:   34:static int32_t func_1(void) {
        1:   35:  int32_t *l_4 = &g_5;
        1:   36:  int32_t **l_118 = &l_4;
        1:   37:  (*l_118) = func_2(l_4);
        1:   38:  return g_29;
        -:   39:}
        -:   40:
        1:   41:static int32_t *func_2(int32_t *p_3) {
        1:   42:  int32_t *l_6 = &g_5;
        1:   43:  uint32_t *l_17 = &g_18[4][1][0];
        1:   44:  struct S0 l_27 = {1L, 1L, 0L};
        1:   45:  int32_t *l_28 = &g_29;
        1:   46:  uint32_t l_30 = 0x71E9942CL;
        1:   47:  int32_t l_43 = (-5L);
        1:   48:  int16_t l_72 = 0L;
       1*:   49:  if (((l_6 != (((safe_div_func_uint32_t_u_u((safe_add_func_uint32_t_u_u(((safe_lshift_func_int32_t_s_u(((*l_28) &= (((65535UL != (safe_mul_func_int64_t_s_s(((safe_sub_func_int8_t_s_s(0xD2L, (((*l_17)++) <= 0xCE008FB0L))) >= (safe_rshift_func_int16_t_s_u(0x58E9L, (((*l_6) || (safe_mul_func_uint8_t_u_u((safe_add_func_uint8_t_u_u((*l_6), ((((l_27, p_3) != (void *)0) | g_5) >= g_5))), 0UL))), g_5)))), 0x2B56095DBC2A41B8LL))) == 65535UL), 0x87778E10L)), 4)), (*l_6)), g_5)), 0x6540F213L)) == g_5), l_6)), l_30)) {
        1:   50:    const int8_t l_39 = 0x96L;
        -:   51:    int32_t l_52[2];
        1:   52:    uint16_t l_67 = 65529UL;
        1:   53:    uint32_t *l_69 = &l_30;
        1:   54:    int32_t l_91 = 0xA9E21427L;
        1:   55:    struct S0 l_92 = {0x92FBB161CA2EBD35LL, 0xD2D10A650A9706E1LL, -3L};
        1:   56:    int64_t l_110 = (-1L);
        -:   57:    int i;
        3:   58:    for (i = 0; i < 2; i++)
        2:   59:      l_52[i] = 1L;
       1*:   60:    for (g_5 = 26; (g_5 >= 29); ++g_5) {
    #####:   61:      uint16_t l_35 = 0x56CDL;
    #####:   62:      uint8_t l_47 = 0x3CL;
    #####:   63:      int32_t l_50 = 0x9FC5C2DAL;
    #####:   64:      int32_t l_51 = 0xB82AEC7FL;
    #####:   65:      int32_t l_53 = 0L;
    #####:   66:      uint32_t **l_70 = &l_69;
        -:   67:      int32_t *l_71[3][1];
        -:   68:      int i, j;
    #####:   69:      for (i = 0; i < 3; i++) {
    #####:   70:        for (j = 0; j < 1; j++)
    #####:   71:          l_71[i][j] = (void *)0;
        -:   72:      }
    #####:   73:      if ((((!(g_34 &= (&l_30 == (void *)0))) < (l_35 >= ((g_5 > 4L) ^ ((((safe_sub_func_int8_t_s_s(0xB0L, (!(*l_6)))) != l_39), (~(safe_div_func_int16_t_s_s(g_29, 0x1913L)))), g_5)))) && l_39)) {
        -:   74:        int32_t *l_44 = &l_43;
        -:   75:        int32_t l_45 = 0x510212AEL;
        -:   76:        int32_t *l_46[4] = {&l_43, &l_43, &l_43, &l_43};
        -:   77:        int i;
        -:   78:        l_47++;
        -:   79:        g_54++;
        -:   80:      } else {
    #####:   81:        int32_t *l_60 = &l_43;
    #####:   82:        (*l_28) = ((*p_3), (safe_sub_func_int8_t_s_s(l_52[0], 0x28L)));
    #####:   83:        (*l_60) |= g_29;
        -:   84:      }
    #####:   85:      if (((++(*l_17)) & (safe_div_func_uint32_t_u_u(((1L & (((safe_sub_func_int8_t_s_s((((((0xF91351DBD7CCF76ELL && l_67), ((safe_unary_minus_func_int16_t_s((g_59 == ((*l_70) = ((g_54 >= ((*l_28) = g_34)), l_69))))) >= (l_52[0] &= l_67))) || ((0x11L ^ l_67), 0xD17401D8B2D29C61LL)) == g_5) < (*l_6)), g_5)) >= (*l_6)) != l_72)) == 0x197FL), g_34)))) {
    #####:   86:        int32_t *l_73 = (void *)0;
    #####:   87:        return l_73;
        -:   88:      } else {
        -:   89:        uint32_t l_74[5][1][1];
    #####:   90:        uint16_t l_75 = 1UL;
        -:   91:        int i, j, k;
    #####:   92:        for (i = 0; i < 5; i++) {
    #####:   93:          for (j = 0; j < 1; j++) {
    #####:   94:            for (k = 0; k < 1; k++)
    #####:   95:              l_74[i][j][k] = 0x6EFF5237L;
        -:   96:          }
        -:   97:        }
    #####:   98:        if (l_74[0][0][0])
    #####:   99:          break;
    #####:  100:        if (l_75)
    #####:  101:          continue;
        -:  102:      }
        -:  103:    }
        2:  104:    for (g_5 = 0; (g_5 <= 0); g_5 += 1) {
        1:  105:      int64_t *l_79[5] = {&l_27.f1, &l_27.f1, &l_27.f1, &l_27.f1, &l_27.f1};
        1:  106:      int16_t *l_85 = &l_72;
        1:  107:      uint16_t *l_90[5] = {&l_67, &l_67, &l_67, &l_67, &l_67};
        -:  108:      int32_t l_93[1][3];
        -:  109:      int i, j;
        2:  110:      for (i = 0; i < 1; i++) {
        4:  111:        for (j = 0; j < 3; j++)
        3:  112:          l_93[i][j] = 1L;
        -:  113:      }
        1:  114:      (*g_95) = (((safe_add_func_uint16_t_u_u((!(g_80 = g_18[4][1][0])), (l_79[4] == g_81))) != (safe_mul_func_uint8_t_u_u((((*l_85) = l_52[1]) > ((safe_mul_func_uint8_t_u_u(((*g_81), (((*l_6) != (safe_rshift_func_uint16_t_u_u(l_39, (l_91 = l_39)))) ^ ((*l_28) = (l_92, l_52[1])))), l_93[0][1])) != (*l_6))), g_54))), g_94[0][2][0]);
        2:  115:      for (l_43 = 0; (l_43 >= 0); l_43 -= 1) {
        1:  116:        struct S0 *l_96 = &l_92;
        1:  117:        int32_t l_105 = (-4L);
        -:  118:        uint8_t *l_106[3];
        1:  119:        uint16_t l_109 = 0x2404L;
        1:  120:        int8_t *l_111 = &g_112;
        1:  121:        int8_t *l_113 = &g_114;
        1:  122:        int32_t *l_115 = &l_52[0];
        -:  123:        int i;
        4:  124:        for (i = 0; i < 3; i++)
        3:  125:          l_106[i] = &g_107[1][0];
        1:  126:        (*l_96) = (*g_95);
       1*:  127:        (*l_115) |= (1L == (safe_div_func_uint8_t_u_u((l_93[0][1] <= (safe_mod_func_uint8_t_u_u((g_54 & (*l_28)), ((*l_113) = ((*l_111) = (((safe_rshift_func_int32_t_s_s((((0x1A07L < (safe_add_func_uint16_t_u_u(((((*l_28), (g_107[1][0] &= (g_34 && l_105))) && (+l_109)) & 0xA415L), l_110))) == g_18[4][1][0]), (*p_3)), l_110)), (*g_81)) || 0x265A2DF7CCAC8DB3LL)))))), (*l_6))));
        -:  128:      }
        -:  129:    }
        -:  130:  } else {
    #####:  131:    for (l_27.f2 = 0; (l_27.f2 < (-22)); l_27.f2 = safe_sub_func_int32_t_s_s(l_27.f2, 7)) {
    #####:  132:      return p_3;
        -:  133:    }
    #####:  134:    return p_3;
        -:  135:  }
        1:  136:  return &g_5;
        -:  137:}
        -:  138:
        1:  139:int main(int argc, char *argv[]) {
        -:  140:  int i, j, k;
        1:  141:  int print_hash_value = 0;
       1*:  142:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  143:    print_hash_value = 1;
        1:  144:  platform_main_begin();
        1:  145:  crc32_gentab();
        1:  146:  func_1();
        1:  147:  transparent_crc(g_5, "g_5", print_hash_value);
        6:  148:  for (i = 0; i < 5; i++) {
       20:  149:    for (j = 0; j < 3; j++) {
       30:  150:      for (k = 0; k < 1; k++) {
       15:  151:        transparent_crc(g_18[i][j][k], "g_18[i][j][k]", print_hash_value);
       15:  152:        if (print_hash_value)
    #####:  153:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  154:      }
        -:  155:    }
        -:  156:  }
        1:  157:  transparent_crc(g_29, "g_29", print_hash_value);
        1:  158:  transparent_crc(g_34, "g_34", print_hash_value);
        1:  159:  transparent_crc(g_54, "g_54", print_hash_value);
        1:  160:  transparent_crc(g_80, "g_80", print_hash_value);
        1:  161:  transparent_crc(g_82, "g_82", print_hash_value);
        6:  162:  for (i = 0; i < 5; i++) {
       25:  163:    for (j = 0; j < 4; j++) {
       80:  164:      for (k = 0; k < 3; k++) {
       60:  165:        transparent_crc(g_94[i][j][k].f0, "g_94[i][j][k].f0", print_hash_value);
       60:  166:        transparent_crc(g_94[i][j][k].f1, "g_94[i][j][k].f1", print_hash_value);
       60:  167:        transparent_crc(g_94[i][j][k].f2, "g_94[i][j][k].f2", print_hash_value);
       60:  168:        if (print_hash_value)
    #####:  169:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  170:      }
        -:  171:    }
        -:  172:  }
        3:  173:  for (i = 0; i < 2; i++) {
        4:  174:    for (j = 0; j < 1; j++) {
        2:  175:      transparent_crc(g_107[i][j], "g_107[i][j]", print_hash_value);
        2:  176:      if (print_hash_value)
    #####:  177:        printf("index = [%d][%d]\n", i, j);
        -:  178:    }
        -:  179:  }
        1:  180:  transparent_crc(g_112, "g_112", print_hash_value);
        1:  181:  transparent_crc(g_114, "g_114", print_hash_value);
        1:  182:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  183:  return 0;
        -:  184:}
