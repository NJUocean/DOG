        -:    0:Source:35.c
        -:    0:Graph:35.gcno
        -:    0:Data:35.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S0 {
        -:    9:  volatile int8_t f0;
        -:   10:  signed f1 : 30;
        -:   11:  int32_t f2;
        -:   12:};
        -:   13:#pragma pack(pop)
        -:   14:
        -:   15:static volatile int32_t g_2 = 0x4D0289A6L;
        -:   16:static volatile int32_t g_3 = (-6L);
        -:   17:static int32_t g_4 = 0x570A50B5L;
        -:   18:static volatile int32_t g_7 = (-3L);
        -:   19:static int32_t g_8 = 0x5C6F8B8AL;
        -:   20:static int64_t g_25 = 0x74A6E8F59172DDB7LL;
        -:   21:static struct S0 g_32 = {4L, 6396, -9L};
        -:   22:static struct S0 g_33[2][3][1] = {{{{0x21L, -21124, -2L}}, {{0x21L, -21124, -2L}}, {{0x21L, -21124, -2L}}}, {{{0x21L, -21124, -2L}}, {{0x21L, -21124, -2L}}, {{0x21L, -21124, -2L}}}};
        -:   23:static int64_t **g_41 = (void *)0;
        -:   24:static int64_t ***volatile g_40 = &g_41;
        -:   25:static int32_t g_44 = 0L;
        -:   26:
        -:   27:static const int32_t func_1(void);
        -:   28:static const uint32_t func_13(int32_t p_14, uint32_t p_15, int16_t p_16);
        -:   29:
        1:   30:static const int32_t func_1(void) {
        -:   31:  int64_t l_42[3];
        -:   32:  int i;
        4:   33:  for (i = 0; i < 3; i++)
        3:   34:    l_42[i] = 6L;
       11:   35:  for (g_4 = 0; (g_4 != 10); ++g_4) {
       10:   36:    uint32_t l_23 = 0x045DCEFBL;
      10*:   37:    for (g_8 = 0; (g_8 > 11); g_8 = safe_add_func_uint64_t_u_u(g_8, 7)) {
    #####:   38:      int64_t *l_24 = &g_25;
    #####:   39:      int32_t *l_43 = &g_44;
    #####:   40:      (*l_43) |= (g_3, (safe_sub_func_int32_t_s_s((func_13((safe_mod_func_int32_t_s_s(g_8, 0xFE5AB06CL)), ((safe_mod_func_uint64_t_u_u((safe_lshift_func_int32_t_s_s((l_23 = g_7), 14)), ((*l_24) = 0xC1B0FE2CF456574BLL))), g_25), (safe_mod_func_uint64_t_u_u(g_8, g_4))) | (-8L)), l_42[1])));
    #####:   41:      if (g_7)
    #####:   42:        break;
        -:   43:    }
        -:   44:  }
        1:   45:  return l_42[1];
        -:   46:}
        -:   47:
    #####:   48:static const uint32_t func_13(int32_t p_14, uint32_t p_15, int16_t p_16) {
    #####:   49:  int64_t **l_38 = (void *)0;
    #####:   50:  int64_t ***l_39 = &l_38;
    #####:   51:  for (p_16 = (-29); (p_16 >= (-5)); p_16 = safe_add_func_int64_t_s_s(p_16, 8)) {
    #####:   52:    int16_t l_36 = 0x2623L;
    #####:   53:    for (g_25 = 0; (g_25 > (-14)); g_25 = safe_sub_func_int64_t_s_s(g_25, 3)) {
    #####:   54:      int32_t l_37 = 0x630971CFL;
    #####:   55:      g_33[0][2][0] = g_32;
    #####:   56:      for (g_32.f2 = 0; (g_32.f2 != 9); g_32.f2 = safe_add_func_int32_t_s_s(g_32.f2, 9)) {
    #####:   57:        l_37 = l_36;
        -:   58:      }
        -:   59:    }
    #####:   60:    g_3 ^= ((void *)0 == &g_25);
        -:   61:  }
    #####:   62:  (*g_40) = ((*l_39) = l_38);
    #####:   63:  return g_7;
        -:   64:}
        -:   65:
        1:   66:int main(int argc, char *argv[]) {
        -:   67:  int i, j, k;
        1:   68:  int print_hash_value = 0;
       1*:   69:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   70:    print_hash_value = 1;
        1:   71:  platform_main_begin();
        1:   72:  crc32_gentab();
        1:   73:  func_1();
        1:   74:  transparent_crc(g_2, "g_2", print_hash_value);
        1:   75:  transparent_crc(g_3, "g_3", print_hash_value);
        1:   76:  transparent_crc(g_4, "g_4", print_hash_value);
        1:   77:  transparent_crc(g_7, "g_7", print_hash_value);
        1:   78:  transparent_crc(g_8, "g_8", print_hash_value);
        1:   79:  transparent_crc(g_25, "g_25", print_hash_value);
        1:   80:  transparent_crc(g_32.f0, "g_32.f0", print_hash_value);
        1:   81:  transparent_crc(g_32.f1, "g_32.f1", print_hash_value);
        1:   82:  transparent_crc(g_32.f2, "g_32.f2", print_hash_value);
        3:   83:  for (i = 0; i < 2; i++) {
        8:   84:    for (j = 0; j < 3; j++) {
       12:   85:      for (k = 0; k < 1; k++) {
        6:   86:        transparent_crc(g_33[i][j][k].f0, "g_33[i][j][k].f0", print_hash_value);
        6:   87:        transparent_crc(g_33[i][j][k].f1, "g_33[i][j][k].f1", print_hash_value);
        6:   88:        transparent_crc(g_33[i][j][k].f2, "g_33[i][j][k].f2", print_hash_value);
        6:   89:        if (print_hash_value)
    #####:   90:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:   91:      }
        -:   92:    }
        -:   93:  }
        1:   94:  transparent_crc(g_44, "g_44", print_hash_value);
        1:   95:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:   96:  return 0;
        -:   97:}
