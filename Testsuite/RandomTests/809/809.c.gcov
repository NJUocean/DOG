        -:    0:Source:809.c
        -:    0:Graph:809.gcno
        -:    0:Data:809.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:#pragma pack(push)
        -:    7:#pragma pack(1)
        -:    8:struct S0 {
        -:    9:  unsigned f0 : 30;
        -:   10:  signed f1 : 27;
        -:   11:};
        -:   12:#pragma pack(pop)
        -:   13:
        -:   14:static uint8_t g_2 = 0xD0L;
        -:   15:static int32_t g_4[3][4] = {{0x0F4F2301L, 0x0F4F2301L, 0x0F4F2301L, 0x0F4F2301L}, {0x0F4F2301L, 0x0F4F2301L, 0x0F4F2301L, 0x0F4F2301L}, {0x0F4F2301L, 0x0F4F2301L, 0x0F4F2301L, 0x0F4F2301L}};
        -:   16:static int32_t g_6 = 0xA7790412L;
        -:   17:static volatile struct S0 g_9[3] = {{4279, -6311}, {4279, -6311}, {4279, -6311}};
        -:   18:static int32_t *g_15 = &g_4[1][2];
        -:   19:static int32_t *const *g_23 = (void *)0;
        -:   20:static int32_t *const **const volatile g_22[1][4][1] = {{{&g_23}, {(void *)0}, {&g_23}, {(void *)0}}};
        -:   21:static int32_t *const **volatile g_24 = &g_23;
        -:   22:static int8_t g_27[5] = {0xB1L, 0xB1L, 0xB1L, 0xB1L, 0xB1L};
        -:   23:
        -:   24:static int16_t func_1(void);
        -:   25:static int64_t func_17(uint32_t p_18, int32_t *p_19, int32_t *const p_20);
        -:   26:
        1:   27:static int16_t func_1(void) {
        1:   28:  int32_t *l_3 = &g_4[1][2];
        1:   29:  int32_t *l_5[3][3] = {{(void *)0, (void *)0, (void *)0}, {&g_6, &g_6, &g_6}, {(void *)0, (void *)0, (void *)0}};
        1:   30:  uint32_t l_28 = 0x60039C1DL;
        1:   31:  struct S0 l_34 = {6433, 666};
        -:   32:  int i, j;
        1:   33:  g_6 ^= ((*l_3) ^= g_2);
       1*:   34:  for (g_6 = 0; (g_6 == 1); g_6 = safe_add_func_int8_t_s_s(g_6, 3)) {
    #####:   35:    int32_t *l_21 = &g_4[1][2];
        -:   36:    struct S0 *l_35[3];
        -:   37:    int i;
    #####:   38:    for (i = 0; i < 3; i++)
    #####:   39:      l_35[i] = &l_34;
    #####:   40:    if ((g_9[1], g_4[1][1])) {
    #####:   41:      for (g_2 = 0; (g_2 < 12); g_2 = safe_add_func_uint64_t_u_u(g_2, 8)) {
    #####:   42:        const uint8_t l_16 = 0x4DL;
    #####:   43:        g_27[4] ^= (((*l_21) ^= (+(((safe_rshift_func_uint64_t_u_s((((((g_15 = (void *)0) != (void *)0), l_16) && ((void *)0 == &g_6)) || g_6), func_17((&g_4[1][2] != l_21), &g_6, l_21))) <= 0x18L) > 0x954EL))) == l_16);
        -:   44:      }
    #####:   45:      if (l_28)
    #####:   46:        break;
        -:   47:    } else {
    #####:   48:      uint8_t l_29 = 249UL;
    #####:   49:      l_29--;
    #####:   50:      for (g_2 = 0; (g_2 > 46); g_2 = safe_add_func_int8_t_s_s(g_2, 9)) {
    #####:   51:        if ((*l_21))
    #####:   52:          break;
    #####:   53:        if ((*l_21))
    #####:   54:          break;
        -:   55:      }
        -:   56:    }
    #####:   57:    g_9[1] = l_34;
        -:   58:  }
        1:   59:  return g_2;
        -:   60:}
        -:   61:
    #####:   62:static int64_t func_17(uint32_t p_18, int32_t *p_19, int32_t *const p_20) {
    #####:   63:  int32_t **l_26 = (void *)0;
    #####:   64:  int32_t ***l_25 = &l_26;
    #####:   65:  (*g_24) = &p_20;
    #####:   66:  (*l_25) = (void *)0;
    #####:   67:  return p_18;
        -:   68:}
        -:   69:
        1:   70:int main(int argc, char *argv[]) {
        -:   71:  int i, j, k;
        1:   72:  int print_hash_value = 0;
       1*:   73:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   74:    print_hash_value = 1;
        1:   75:  platform_main_begin();
        1:   76:  crc32_gentab();
        1:   77:  func_1();
        1:   78:  transparent_crc(g_2, "g_2", print_hash_value);
        4:   79:  for (i = 0; i < 3; i++) {
       15:   80:    for (j = 0; j < 4; j++) {
       12:   81:      transparent_crc(g_4[i][j], "g_4[i][j]", print_hash_value);
       12:   82:      if (print_hash_value)
    #####:   83:        printf("index = [%d][%d]\n", i, j);
        -:   84:    }
        -:   85:  }
        1:   86:  transparent_crc(g_6, "g_6", print_hash_value);
        4:   87:  for (i = 0; i < 3; i++) {
        3:   88:    transparent_crc(g_9[i].f0, "g_9[i].f0", print_hash_value);
        3:   89:    transparent_crc(g_9[i].f1, "g_9[i].f1", print_hash_value);
        3:   90:    if (print_hash_value)
    #####:   91:      printf("index = [%d]\n", i);
        -:   92:  }
        6:   93:  for (i = 0; i < 5; i++) {
        5:   94:    transparent_crc(g_27[i], "g_27[i]", print_hash_value);
        5:   95:    if (print_hash_value)
    #####:   96:      printf("index = [%d]\n", i);
        -:   97:  }
        1:   98:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:   99:  return 0;
        -:  100:}
