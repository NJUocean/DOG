        -:    0:Source:72.c
        -:    0:Graph:72.gcno
        -:    0:Data:72.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:static int32_t g_3 = (-4L);
        -:    7:static uint32_t g_7[1][5][4] = {{{0xA2FAFD11L, 18446744073709551615UL, 0xA2FAFD11L, 0xA2FAFD11L}, {18446744073709551615UL, 18446744073709551615UL, 8UL, 18446744073709551615UL}, {18446744073709551615UL, 0xA2FAFD11L, 0xA2FAFD11L, 18446744073709551615UL}, {0xA2FAFD11L, 18446744073709551615UL, 0xA2FAFD11L, 0xA2FAFD11L}, {18446744073709551615UL, 18446744073709551615UL, 8UL, 18446744073709551615UL}}};
        -:    8:static int32_t g_16 = 0x4A90C6D2L;
        -:    9:static int32_t *g_26[1] = {&g_3};
        -:   10:static int32_t **volatile g_25 = &g_26[0];
        -:   11:static int32_t **g_28[2] = {&g_26[0], &g_26[0]};
        -:   12:static int32_t ***volatile g_27 = &g_28[0];
        -:   13:static int32_t g_41[1][4] = {{7L, 7L, 7L, 7L}};
        -:   14:static int32_t *g_40 = &g_41[0][1];
        -:   15:static uint8_t g_44 = 255UL;
        -:   16:static const int32_t *volatile g_51[5] = {&g_41[0][3], &g_41[0][3], &g_41[0][3], &g_41[0][3], &g_41[0][3]};
        -:   17:static const int32_t *volatile *g_50 = &g_51[4];
        -:   18:static const int32_t *volatile **g_49 = &g_50;
        -:   19:static uint16_t g_53[2][1][1] = {{{0xCDEDL}}, {{0xCDEDL}}};
        -:   20:static int8_t g_57 = (-1L);
        -:   21:static uint32_t g_59 = 7UL;
        -:   22:static int32_t g_60 = 0x40E51693L;
        -:   23:static uint64_t g_62[4][5] = {{18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL}, {18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL}, {18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL}, {18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL, 18446744073709551613UL}};
        -:   24:static uint32_t g_63 = 0x757AC12AL;
        -:   25:
        -:   26:static const uint32_t func_1(void);
        -:   27:static uint32_t func_12(int16_t p_13);
        -:   28:
        1:   29:static const uint32_t func_1(void) {
        1:   30:  int32_t *l_2 = &g_3;
        1:   31:  int32_t *l_4 = &g_3;
        1:   32:  int32_t *l_5 = &g_3;
        -:   33:  int32_t *l_6[3];
        1:   34:  int32_t **l_39[3][1][4] = {{{&l_5, &l_5, &l_5, &l_5}}, {{&l_5, &l_5, &l_5, &l_5}}, {{&l_5, &l_5, &l_5, &l_5}}};
        1:   35:  uint16_t *l_52 = &g_53[1][0][0];
        -:   36:  int8_t *l_56[4];
        1:   37:  uint32_t *l_58[2][5] = {{(void *)0, &g_59, &g_59, &g_59, (void *)0}, {(void *)0, &g_59, &g_59, &g_59, (void *)0}};
        1:   38:  uint64_t *l_61 = &g_62[1][3];
        -:   39:  int i, j, k;
        4:   40:  for (i = 0; i < 3; i++)
        3:   41:    l_6[i] = &g_3;
        5:   42:  for (i = 0; i < 4; i++)
        4:   43:    l_56[i] = &g_57;
        1:   44:  g_7[0][2][0]++;
       2*:   45:  (*l_2) = (func_12(g_7[0][3][1]) != ((((((g_40 = l_2) == ((g_63 = (safe_add_func_uint64_t_u_u(((*l_61) = ((g_60 = (g_44 ^ ((safe_add_func_int32_t_s_s((safe_div_func_int64_t_s_s((((((*l_52) = (g_49 != &l_39[2][0][2])), (((g_59 = (safe_mul_func_int8_t_s_s(5L, (g_57 = (g_53[0][0][0] || g_7[0][4][3]))))) || g_53[1][0][0]), &l_39[0][0][3])) == (void *)0) && g_44), g_7[0][1][2])), g_41[0][1])) ^ g_41[0][2]))) ^ g_41[0][1])), 0xCEF36AA128409D7FLL))), (void *)0)) < g_41[0][1]) > 0x6804519FL) ^ g_7[0][2][0]) != 1L));
        1:   46:  return g_62[1][1];
        -:   47:}
        -:   48:
        1:   49:static uint32_t func_12(int16_t p_13) {
        1:   50:  int32_t *l_14 = &g_3;
        1:   51:  uint32_t l_38 = 0x5555D5DFL;
        1:   52:  if (((void *)0 != l_14)) {
        1:   53:    uint16_t l_18 = 65535UL;
       1*:   54:    for (p_13 = 0; (p_13 <= 0); p_13 += 1) {
        2:   55:      for (g_3 = 0; (g_3 >= 0); g_3 -= 1) {
        1:   56:        int32_t *l_15 = &g_16;
        1:   57:        int32_t *l_17[3][5][4] = {{{&g_3, &g_3, &g_3, &g_16}, {&g_3, &g_3, &g_16, &g_3}, {&g_3, &g_16, &g_16, &g_16}, {&g_3, &g_16, &g_3, &g_3}, {&g_3, &g_16, &g_3, (void *)0}}, {{&g_3, (void *)0, &g_16, &g_16}, {&g_16, &g_16, &g_16, &g_3}, {&g_16, &g_3, &g_3, &g_16}, {&g_3, &g_3, &g_3, &g_3}, {(void *)0, &g_3, &g_3, &g_16}}, {{&g_3, &g_3, &g_3, &g_3}, {&g_3, &g_16, &g_3, &g_16}, {&g_16, (void *)0, &g_3, (void *)0}, {&g_16, &g_16, &g_3, &g_3}, {&g_3, &g_16, (void *)0, &g_16}}};
        -:   58:        int i, j, k;
        1:   59:        ++l_18;
        -:   60:      }
        1:   61:      if (((*l_14) = ((safe_rshift_func_uint16_t_u_s(65535UL, 1)), (-4L)))) {
        1:   62:        int32_t **l_23 = &l_14;
        1:   63:        (*l_23) = &g_16;
        -:   64:      } else {
        -:   65:        if (g_3)
        -:   66:          break;
        -:   67:      }
        1:   68:      for (g_16 = 0; (g_16 >= 0); g_16 -= 1) {
        1:   69:        int32_t *l_24 = (void *)0;
        1:   70:        (*g_25) = l_24;
        1:   71:        return g_3;
        -:   72:      }
        -:   73:    }
    #####:   74:    for (g_3 = 0; (g_3 >= 0); g_3 -= 1) {
    #####:   75:      return (*l_14);
        -:   76:    }
        -:   77:  } else {
        -:   78:    int32_t l_33[5][2][5];
        -:   79:    int i, j, k;
    #####:   80:    for (i = 0; i < 5; i++) {
    #####:   81:      for (j = 0; j < 2; j++) {
    #####:   82:        for (k = 0; k < 5; k++)
    #####:   83:          l_33[i][j][k] = 0xA08552ADL;
        -:   84:      }
        -:   85:    }
    #####:   86:    (*g_27) = &g_26[0];
    #####:   87:    if (p_13) {
    #####:   88:      uint8_t l_34 = 0x7EL;
    #####:   89:      for (p_13 = 0; (p_13 <= 0); p_13 += 1) {
    #####:   90:        int32_t *l_29 = &g_16;
    #####:   91:        int32_t *l_30 = &g_3;
    #####:   92:        int32_t *l_31 = &g_3;
        -:   93:        int32_t *l_32[2];
        -:   94:        int i;
    #####:   95:        for (i = 0; i < 2; i++)
    #####:   96:          l_32[i] = &g_3;
    #####:   97:        ++l_34;
        -:   98:      }
        -:   99:    } else {
    #####:  100:      int32_t *l_37 = &g_16;
    #####:  101:      (*l_37) = ((*l_14) = ((-1L) & g_3));
        -:  102:    }
        -:  103:  }
    #####:  104:  return l_38;
        -:  105:}
        -:  106:
        1:  107:int main(int argc, char *argv[]) {
        -:  108:  int i, j, k;
        1:  109:  int print_hash_value = 0;
       1*:  110:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  111:    print_hash_value = 1;
        1:  112:  platform_main_begin();
        1:  113:  crc32_gentab();
        1:  114:  func_1();
        1:  115:  transparent_crc(g_3, "g_3", print_hash_value);
        2:  116:  for (i = 0; i < 1; i++) {
        6:  117:    for (j = 0; j < 5; j++) {
       25:  118:      for (k = 0; k < 4; k++) {
       20:  119:        transparent_crc(g_7[i][j][k], "g_7[i][j][k]", print_hash_value);
       20:  120:        if (print_hash_value)
    #####:  121:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  122:      }
        -:  123:    }
        -:  124:  }
        1:  125:  transparent_crc(g_16, "g_16", print_hash_value);
        2:  126:  for (i = 0; i < 1; i++) {
        5:  127:    for (j = 0; j < 4; j++) {
        4:  128:      transparent_crc(g_41[i][j], "g_41[i][j]", print_hash_value);
        4:  129:      if (print_hash_value)
    #####:  130:        printf("index = [%d][%d]\n", i, j);
        -:  131:    }
        -:  132:  }
        1:  133:  transparent_crc(g_44, "g_44", print_hash_value);
        3:  134:  for (i = 0; i < 2; i++) {
        4:  135:    for (j = 0; j < 1; j++) {
        4:  136:      for (k = 0; k < 1; k++) {
        2:  137:        transparent_crc(g_53[i][j][k], "g_53[i][j][k]", print_hash_value);
        2:  138:        if (print_hash_value)
    #####:  139:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  140:      }
        -:  141:    }
        -:  142:  }
        1:  143:  transparent_crc(g_57, "g_57", print_hash_value);
        1:  144:  transparent_crc(g_59, "g_59", print_hash_value);
        1:  145:  transparent_crc(g_60, "g_60", print_hash_value);
        5:  146:  for (i = 0; i < 4; i++) {
       24:  147:    for (j = 0; j < 5; j++) {
       20:  148:      transparent_crc(g_62[i][j], "g_62[i][j]", print_hash_value);
       20:  149:      if (print_hash_value)
    #####:  150:        printf("index = [%d][%d]\n", i, j);
        -:  151:    }
        -:  152:  }
        1:  153:  transparent_crc(g_63, "g_63", print_hash_value);
        1:  154:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  155:  return 0;
        -:  156:}
