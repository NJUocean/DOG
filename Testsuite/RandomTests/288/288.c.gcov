        -:    0:Source:288.c
        -:    0:Graph:288.gcno
        -:    0:Data:288.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:struct S1 {
        -:    7:  uint32_t f0;
        -:    8:  volatile uint8_t f1;
        -:    9:  uint16_t f2;
        -:   10:  const int64_t f3;
        -:   11:};
        -:   12:
        -:   13:static int32_t g_3 = 6L;
        -:   14:static volatile int32_t g_4 = 0x6EB6B9DDL;
        -:   15:static volatile int32_t g_5 = (-8L);
        -:   16:static int32_t g_6 = 1L;
        -:   17:static volatile int32_t g_7 = (-10L);
        -:   18:static int32_t g_8 = (-3L);
        -:   19:static const int32_t g_18 = (-2L);
        -:   20:static const int32_t *g_17 = &g_18;
        -:   21:static uint32_t g_33[2] = {0x87B332E0L, 0x87B332E0L};
        -:   22:static volatile struct S1 g_37[1] = {{0x46F9F111L, 0x91L, 0xB17CL, 0x8A59C2D16CF05746LL}};
        -:   23:
        -:   24:static uint8_t func_1(void);
        -:   25:static int32_t *func_9(uint64_t p_10, uint16_t p_11, int8_t p_12, const int16_t p_13, uint16_t p_14);
        -:   26:
        1:   27:static uint8_t func_1(void) {
        -:   28:  uint16_t l_2[3];
        1:   29:  int32_t *l_19 = (void *)0;
        1:   30:  int32_t *l_20 = (void *)0;
        -:   31:  int i;
        4:   32:  for (i = 0; i < 3; i++)
        3:   33:    l_2[i] = 0x48F6L;
       1*:   34:  for (g_3 = 0; (g_3 <= 2); g_3 += 1) {
        1:   35:    int32_t l_28 = (-4L);
        1:   36:    int32_t *l_42 = (void *)0;
       1*:   37:    for (g_6 = 0; (g_6 <= 2); g_6 += 1) {
        1:   38:      for (g_8 = 2; (g_8 >= 0); g_8 -= 1) {
        1:   39:        return l_2[0];
        -:   40:      }
        -:   41:    }
    #####:   42:    l_42 = func_9(g_3, (((((g_17 = &g_6) == ((l_19 == l_20), &g_3)) < (+(((safe_div_func_int32_t_s_s((((7L <= g_3), (safe_sub_func_uint32_t_u_u((((safe_rshift_func_int64_t_s_s(l_28, 61)) | (0UL && g_6)) & 0x82B357F0L), g_3))) < 0x624B6749L), 0x5CAB4306L)), (void *)0) == (void *)0))) >= 0x2AB2BC8F9611CA4BLL) == 0L), g_5, l_28, g_3);
        -:   43:  }
    #####:   44:  return g_6;
        -:   45:}
        -:   46:
    #####:   47:static int32_t *func_9(uint64_t p_10, uint16_t p_11, int8_t p_12, const int16_t p_13, uint16_t p_14) {
    #####:   48:  int32_t *l_41 = (void *)0;
    #####:   49:  for (g_6 = 0; (g_6 == (-1)); --g_6) {
    #####:   50:    int32_t *l_38 = (void *)0;
    #####:   51:    int32_t *l_39 = (void *)0;
    #####:   52:    int32_t *l_40 = &g_8;
    #####:   53:    for (p_12 = 3; (p_12 <= (-23)); --p_12) {
    #####:   54:      for (p_10 = 0; (p_10 <= 1); p_10 += 1) {
        -:   55:        int32_t *l_36[3];
        -:   56:        int i;
    #####:   57:        for (i = 0; i < 3; i++)
    #####:   58:          l_36[i] = &g_8;
    #####:   59:        g_7 = ((safe_rshift_func_int16_t_s_s(g_33[p_10], 3)) | (1UL > p_13));
    #####:   60:        g_8 &= (g_6 & (g_37[0], (p_12 > p_11)));
        -:   61:      }
        -:   62:    }
    #####:   63:    (*l_40) ^= p_12;
        -:   64:  }
    #####:   65:  return l_41;
        -:   66:}
        -:   67:
        1:   68:int main(int argc, char *argv[]) {
        -:   69:  int i;
        1:   70:  int print_hash_value = 0;
       1*:   71:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   72:    print_hash_value = 1;
        1:   73:  platform_main_begin();
        1:   74:  crc32_gentab();
        1:   75:  func_1();
        1:   76:  transparent_crc(g_3, "g_3", print_hash_value);
        1:   77:  transparent_crc(g_4, "g_4", print_hash_value);
        1:   78:  transparent_crc(g_5, "g_5", print_hash_value);
        1:   79:  transparent_crc(g_6, "g_6", print_hash_value);
        1:   80:  transparent_crc(g_7, "g_7", print_hash_value);
        1:   81:  transparent_crc(g_8, "g_8", print_hash_value);
        1:   82:  transparent_crc(g_18, "g_18", print_hash_value);
        3:   83:  for (i = 0; i < 2; i++) {
        2:   84:    transparent_crc(g_33[i], "g_33[i]", print_hash_value);
        2:   85:    if (print_hash_value)
    #####:   86:      printf("index = [%d]\n", i);
        -:   87:  }
        2:   88:  for (i = 0; i < 1; i++) {
        1:   89:    transparent_crc(g_37[i].f0, "g_37[i].f0", print_hash_value);
        1:   90:    transparent_crc(g_37[i].f1, "g_37[i].f1", print_hash_value);
        1:   91:    transparent_crc(g_37[i].f2, "g_37[i].f2", print_hash_value);
        1:   92:    transparent_crc(g_37[i].f3, "g_37[i].f3", print_hash_value);
        1:   93:    if (print_hash_value)
    #####:   94:      printf("index = [%d]\n", i);
        -:   95:  }
        1:   96:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:   97:  return 0;
        -:   98:}
