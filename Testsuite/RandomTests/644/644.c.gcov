        -:    0:Source:644.c
        -:    0:Graph:644.gcno
        -:    0:Data:644.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:static volatile int32_t g_2 = 0xCFF0EA75L;
        -:    7:static int32_t g_3 = 1L;
        -:    8:static uint8_t g_13 = 246UL;
        -:    9:static uint8_t *g_18 = &g_13;
        -:   10:static int32_t g_22 = 0x28033590L;
        -:   11:static volatile uint32_t g_32 = 0xECDC0F1FL;
        -:   12:static int32_t g_36 = 0xF7A0D7C8L;
        -:   13:static int32_t g_63 = 0xA0E57C1FL;
        -:   14:static uint8_t g_84[2] = {0x00L, 0x00L};
        -:   15:static uint16_t g_87[3][2] = {{1UL, 1UL}, {1UL, 1UL}, {1UL, 1UL}};
        -:   16:static int16_t g_88 = 1L;
        -:   17:static uint64_t g_97[1] = {6UL};
        -:   18:static uint64_t *volatile g_100 = &g_97[0];
        -:   19:static uint16_t g_109 = 0xDFDCL;
        -:   20:static volatile int32_t g_114[2][3] = {{1L, 1L, 1L}, {1L, 1L, 1L}};
        -:   21:static int32_t *g_118 = &g_36;
        -:   22:static uint8_t g_126 = 250UL;
        -:   23:static uint32_t g_135 = 0x71A01FB8L;
        -:   24:static uint32_t *g_134[3] = {&g_135, &g_135, &g_135};
        -:   25:static int16_t g_144 = 0xA0C8L;
        -:   26:static int64_t g_147[1] = {0x0DF3FCB1527D319CLL};
        -:   27:static int8_t g_148 = 3L;
        -:   28:
        -:   29:static int16_t func_1(void);
        -:   30:static const uint32_t func_6(int16_t p_7, uint16_t p_8);
        -:   31:
        1:   32:static int16_t func_1(void) {
        1:   33:  uint8_t l_9 = 246UL;
        -:   34:  int32_t l_37[1][3][5];
        1:   35:  int32_t *l_43 = &g_3;
        -:   36:  int32_t *l_45[5];
        1:   37:  uint32_t l_47[4] = {6UL, 6UL, 6UL, 6UL};
        1:   38:  uint32_t l_103 = 0x9D736D3DL;
        1:   39:  int64_t l_138 = 0x3DC10E4350B5FE46LL;
        1:   40:  int32_t **l_139 = &l_45[3];
        1:   41:  int32_t l_141 = 0xC5736710L;
        -:   42:  uint64_t l_192[2];
        -:   43:  int i, j, k;
        2:   44:  for (i = 0; i < 1; i++) {
        4:   45:    for (j = 0; j < 3; j++) {
       18:   46:      for (k = 0; k < 5; k++)
       15:   47:        l_37[i][j][k] = (-1L);
        -:   48:    }
        -:   49:  }
        6:   50:  for (i = 0; i < 5; i++)
        5:   51:    l_45[i] = &g_36;
        3:   52:  for (i = 0; i < 2; i++)
        2:   53:    l_192[i] = 1UL;
        2:   54:  for (g_3 = (-8); (g_3 < 7); g_3 = safe_add_func_uint8_t_u_u(g_3, 3)) {
        1:   55:    uint8_t *l_12 = &g_13;
        1:   56:    uint8_t **l_17 = &l_12;
        -:   57:    int32_t l_19[3];
        1:   58:    int32_t *l_20 = &l_19[0];
        -:   59:    int32_t *l_35[2][1];
        1:   60:    uint32_t l_38 = 0xD4938140L;
        1:   61:    int32_t **l_44 = &l_35[1][0];
        1:   62:    const int8_t l_85 = 0x27L;
        1:   63:    int32_t l_190[4][2][4] = {{{0L, 2L, 8L, 0x95E14E43L}, {8L, 0x95E14E43L, 0xF54AD9C5L, 8L}}, {{0x4CCDFE2BL, 0x95E14E43L, (-1L), 0x95E14E43L}, {0x95E14E43L, 2L, 0x5342E7D5L, 0L}}, {{(-9L), 0x4CCDFE2BL, 0xF54AD9C5L, 0x5342E7D5L}, {0L, 1L, 1L, 8L}}, {{0x5342E7D5L, 1L, 1L, 0x5342E7D5L}, {4L, 8L, (-1L), 1L}}};
        -:   64:    int i, j, k;
        4:   65:    for (i = 0; i < 3; i++)
        3:   66:      l_19[i] = 6L;
        3:   67:    for (i = 0; i < 2; i++) {
        4:   68:      for (j = 0; j < 1; j++)
        2:   69:        l_35[i][j] = &g_36;
        -:   70:    }
       2*:   71:    (*l_20) = (((l_37[0][0][0] |= (func_6(l_9, (((*l_20) = (0x1F1EL == ((safe_lshift_func_int32_t_s_u(g_3, (((((((*l_12) = l_9) && g_3), (!((0xD373EE76L < (65535UL || ((safe_mul_func_uint16_t_u_u((((*l_17) = &g_13) == (g_18 = &l_9)), g_13)), l_19[1]))) | l_19[1]))) > 7UL) > (-1L)) || l_19[2]))), g_2))), l_9)) == g_22)) != 4UL), l_38);
        -:   72:  }
        1:   73:  return l_192[1];
        -:   74:}
        -:   75:
        1:   76:static const uint32_t func_6(int16_t p_7, uint16_t p_8) {
        1:   77:  int32_t *l_21 = &g_22;
        1:   78:  int32_t *l_23 = &g_22;
        1:   79:  int32_t *l_24 = &g_22;
        1:   80:  int32_t *l_25 = &g_22;
        1:   81:  int32_t *l_26 = (void *)0;
        1:   82:  int32_t *l_27 = &g_22;
        1:   83:  int32_t *l_28 = &g_22;
        1:   84:  int32_t *l_29 = &g_22;
        1:   85:  int32_t *l_30 = (void *)0;
        1:   86:  int32_t *l_31[4] = {(void *)0, (void *)0, (void *)0, (void *)0};
        -:   87:  int i;
        1:   88:  g_32++;
        1:   89:  return p_7;
        -:   90:}
        -:   91:
        1:   92:int main(int argc, char *argv[]) {
        -:   93:  int i, j;
        1:   94:  int print_hash_value = 0;
       1*:   95:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:   96:    print_hash_value = 1;
        1:   97:  platform_main_begin();
        1:   98:  crc32_gentab();
        1:   99:  func_1();
        1:  100:  transparent_crc(g_2, "g_2", print_hash_value);
        1:  101:  transparent_crc(g_3, "g_3", print_hash_value);
        1:  102:  transparent_crc(g_13, "g_13", print_hash_value);
        1:  103:  transparent_crc(g_22, "g_22", print_hash_value);
        1:  104:  transparent_crc(g_32, "g_32", print_hash_value);
        1:  105:  transparent_crc(g_36, "g_36", print_hash_value);
        1:  106:  transparent_crc(g_63, "g_63", print_hash_value);
        3:  107:  for (i = 0; i < 2; i++) {
        2:  108:    transparent_crc(g_84[i], "g_84[i]", print_hash_value);
        2:  109:    if (print_hash_value)
    #####:  110:      printf("index = [%d]\n", i);
        -:  111:  }
        4:  112:  for (i = 0; i < 3; i++) {
        9:  113:    for (j = 0; j < 2; j++) {
        6:  114:      transparent_crc(g_87[i][j], "g_87[i][j]", print_hash_value);
        6:  115:      if (print_hash_value)
    #####:  116:        printf("index = [%d][%d]\n", i, j);
        -:  117:    }
        -:  118:  }
        1:  119:  transparent_crc(g_88, "g_88", print_hash_value);
        2:  120:  for (i = 0; i < 1; i++) {
        1:  121:    transparent_crc(g_97[i], "g_97[i]", print_hash_value);
        1:  122:    if (print_hash_value)
    #####:  123:      printf("index = [%d]\n", i);
        -:  124:  }
        1:  125:  transparent_crc(g_109, "g_109", print_hash_value);
        3:  126:  for (i = 0; i < 2; i++) {
        8:  127:    for (j = 0; j < 3; j++) {
        6:  128:      transparent_crc(g_114[i][j], "g_114[i][j]", print_hash_value);
        6:  129:      if (print_hash_value)
    #####:  130:        printf("index = [%d][%d]\n", i, j);
        -:  131:    }
        -:  132:  }
        1:  133:  transparent_crc(g_126, "g_126", print_hash_value);
        1:  134:  transparent_crc(g_135, "g_135", print_hash_value);
        1:  135:  transparent_crc(g_144, "g_144", print_hash_value);
        2:  136:  for (i = 0; i < 1; i++) {
        1:  137:    transparent_crc(g_147[i], "g_147[i]", print_hash_value);
        1:  138:    if (print_hash_value)
    #####:  139:      printf("index = [%d]\n", i);
        -:  140:  }
        1:  141:  transparent_crc(g_148, "g_148", print_hash_value);
        1:  142:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  143:  return 0;
        -:  144:}
