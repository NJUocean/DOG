        -:    0:Source:243.c
        -:    0:Graph:243.gcno
        -:    0:Data:243.gcda
        -:    0:Runs:1
        -:    1:// Options:   --concise --max-struct-fields 5 --max-funcs 2 --max-array-len-per-dim 5 --max-block-depth 3 --max-block-size 2
        -:    2:#include "csmith.h"
        -:    3:
        -:    4:static long __undefined;
        -:    5:
        -:    6:struct S1 {
        -:    7:  signed f0 : 8;
        -:    8:  unsigned f1 : 13;
        -:    9:  unsigned f2 : 16;
        -:   10:  const signed f3 : 23;
        -:   11:  unsigned f4 : 27;
        -:   12:};
        -:   13:
        -:   14:struct S2 {
        -:   15:  volatile signed f0 : 20;
        -:   16:  volatile unsigned f1 : 15;
        -:   17:};
        -:   18:
        -:   19:#pragma pack(push)
        -:   20:#pragma pack(1)
        -:   21:struct S4 {
        -:   22:  signed f0 : 21;
        -:   23:  unsigned f1 : 16;
        -:   24:  volatile signed f2 : 11;
        -:   25:  unsigned f3 : 16;
        -:   26:  const unsigned f4 : 20;
        -:   27:};
        -:   28:#pragma pack(pop)
        -:   29:
        -:   30:static volatile int32_t g_2[4] = {0xB969161DL, 0xB969161DL, 0xB969161DL, 0xB969161DL};
        -:   31:static int32_t g_3 = 0x7257EA0DL;
        -:   32:static volatile int32_t g_6 = 0L;
        -:   33:static volatile int32_t g_7 = 0xD621EC21L;
        -:   34:static volatile int32_t g_8 = 0L;
        -:   35:static volatile int32_t g_9 = 1L;
        -:   36:static volatile int32_t g_10[1] = {0xCA6C8490L};
        -:   37:static volatile int32_t g_11 = 0L;
        -:   38:static volatile int32_t g_12 = (-1L);
        -:   39:static volatile int32_t g_13 = 0L;
        -:   40:static volatile int32_t g_14 = 0x5EC62BB2L;
        -:   41:static volatile int32_t g_15 = 0x3C86992FL;
        -:   42:static int32_t g_16 = 0xC8A52B4BL;
        -:   43:static struct S1 g_39 = {2, 52, 25, -2254, 7674};
        -:   44:static uint16_t g_42[3][1][1] = {{{0x4F6FL}}, {{0x4F6FL}}, {{0x4F6FL}}};
        -:   45:static uint32_t g_51 = 4294967294UL;
        -:   46:static uint16_t g_54 = 0UL;
        -:   47:static uint8_t g_55 = 5UL;
        -:   48:static uint32_t *g_56 = (void *)0;
        -:   49:static int8_t g_58 = 0L;
        -:   50:static uint32_t g_59 = 18446744073709551615UL;
        -:   51:static uint32_t g_61[5][1] = {{3UL}, {0xF732BC12L}, {3UL}, {0xF732BC12L}, {3UL}};
        -:   52:static int32_t g_65 = 0xBE308DDDL;
        -:   53:static int32_t g_74 = 0xCE866CA2L;
        -:   54:static int64_t g_91[4][2] = {{0x79F84CD17FF15597LL, 0x6B81C74F2DDDEE64LL}, {0x79F84CD17FF15597LL, 0x6B81C74F2DDDEE64LL}, {0x79F84CD17FF15597LL, 0x6B81C74F2DDDEE64LL}, {0x79F84CD17FF15597LL, 0x6B81C74F2DDDEE64LL}};
        -:   55:static struct S2 g_98 = {833, 61};
        -:   56:static const uint32_t **g_104 = (void *)0;
        -:   57:static const uint32_t *g_107 = &g_51;
        -:   58:static const uint32_t **g_106[1] = {&g_107};
        -:   59:static struct S1 g_121 = {-14, 53, 225, 1711, 7912};
        -:   60:static int32_t g_124 = 0x3CF24B42L;
        -:   61:static struct S4 g_125[1][4][1] = {{{{-300, 48, -24, 127, 203}}, {{426, 146, -28, 89, 512}}, {{-300, 48, -24, 127, 203}}, {{426, 146, -28, 89, 512}}}};
        -:   62:static struct S4 g_126 = {-403, 92, 43, 249, 758};
        -:   63:
        -:   64:static struct S4 func_1(void);
        -:   65:static int32_t func_17(int32_t p_18, int32_t p_19, struct S1 p_20, uint32_t p_21);
        -:   66:
        1:   67:static struct S4 func_1(void) {
        1:   68:  uint32_t l_62 = 7UL;
        1:   69:  struct S1 l_66 = {5, 64, 193, 2195, 7682};
        1:   70:  for (g_3 = 19; (g_3 >= (-6)); --g_3) {
        1:   71:    uint16_t *const l_53 = &g_54;
        1:   72:    int8_t l_60 = 1L;
        5:   73:    for (g_16 = 3; (g_16 >= 0); g_16 -= 1) {
        4:   74:      uint16_t *l_41 = &g_42[0][0][0];
        4:   75:      int32_t l_48 = 1L;
        4:   76:      int64_t l_49 = (-5L);
        4:   77:      uint32_t *l_50 = &g_51;
        4:   78:      int8_t *l_57 = &g_58;
        4:   79:      int32_t *l_63 = (void *)0;
        4:   80:      int32_t *l_64 = &g_65;
        4:   81:      int32_t *l_123 = &g_124;
        -:   82:      int i;
       4*:   83:      (*l_123) ^= func_17(((*l_64) = ((safe_mod_func_uint64_t_u_u((safe_rshift_func_uint64_t_u_u((~((safe_mul_func_int16_t_s_s((0x65L && g_2[g_16]), (safe_sub_func_uint8_t_u_u((safe_mul_func_int32_t_s_s((safe_lshift_func_int64_t_s_s((g_61[4][0] = ((((safe_mod_func_uint64_t_u_u((safe_rshift_func_uint8_t_u_s((g_39, 255UL), ((*l_57) = (!(((g_55 |= (((*l_41)--) < (safe_unary_minus_func_uint32_t_u((safe_sub_func_uint32_t_u_u(((*l_50) = (l_48 | l_49)), (!(l_53 != l_41)))))))) > (g_56 != g_56)) || 0x0783DB47L))))), g_39.f0)) & g_39.f1) && g_59) & l_60)), l_62)), l_60)), l_48)))) <= l_49)), 0)), 1UL)) <= 0xCBL)), g_39.f3, l_66, l_66.f0);
        -:   84:    }
        1:   85:    return g_125[0][2][0];
        -:   86:  }
    #####:   87:  return g_126;
        -:   88:}
        -:   89:
        4:   90:static int32_t func_17(int32_t p_18, int32_t p_19, struct S1 p_20, uint32_t p_21) {
        4:   91:  uint32_t l_79 = 0UL;
        4:   92:  int32_t l_80 = (-9L);
        -:   93:  int32_t l_84[1][1];
        4:   94:  uint8_t l_115 = 254UL;
        -:   95:  struct S1 *l_120[5];
        -:   96:  int64_t l_122[1];
        -:   97:  int i, j;
        8:   98:  for (i = 0; i < 1; i++) {
        8:   99:    for (j = 0; j < 1; j++)
        4:  100:      l_84[i][j] = 0x6D0A58DEL;
        -:  101:  }
       24:  102:  for (i = 0; i < 5; i++)
       20:  103:    l_120[i] = &g_121;
        8:  104:  for (i = 0; i < 1; i++)
        4:  105:    l_122[i] = (-1L);
      224:  106:  for (g_55 = 0; (g_55 < 55); ++g_55) {
      220:  107:    uint8_t l_76[5][5] = {{0UL, 1UL, 0UL, 0UL, 1UL}, {0xDCL, 0xCBL, 0UL, 0x9EL, 0x9EL}, {0xCBL, 0xDCL, 0xCBL, 0UL, 0x9EL}, {1UL, 0UL, 0x9EL, 0UL, 1UL}, {1UL, 0xCBL, 0x36L, 0UL, 0x36L}};
      220:  108:    int32_t l_85 = 0x6DEF04E4L;
      220:  109:    int32_t l_86 = 0xD1CE175EL;
      220:  110:    int32_t l_88 = (-1L);
        -:  111:    int32_t l_90[3];
      220:  112:    int32_t *l_108 = &l_88;
      220:  113:    int32_t *l_109 = (void *)0;
      220:  114:    int32_t *l_110 = (void *)0;
      220:  115:    int32_t *l_111 = &l_85;
      220:  116:    int32_t *l_112 = &l_90[1];
      220:  117:    int32_t *l_113 = &l_80;
      220:  118:    int32_t *l_114 = (void *)0;
        -:  119:    int i, j;
      880:  120:    for (i = 0; i < 3; i++)
      660:  121:      l_90[i] = 0L;
     220*:  122:    for (g_54 = 15; (g_54 > 16); g_54 = safe_add_func_uint64_t_u_u(g_54, 1)) {
    #####:  123:      int64_t l_87 = 0xBC0977F3D9679FF5LL;
    #####:  124:      int32_t l_89 = 0xE5885267L;
    #####:  125:      int32_t l_92 = 0x180BB484L;
    #####:  126:      int32_t l_93[3][2] = {{(-1L), (-6L)}, {(-6L), (-1L)}, {(-6L), (-6L)}};
    #####:  127:      int16_t l_94 = 0L;
    #####:  128:      uint32_t **l_100 = &g_56;
        -:  129:      int i, j;
    #####:  130:      for (g_65 = 5; (g_65 >= 25); ++g_65) {
    #####:  131:        int32_t *l_73 = &g_74;
    #####:  132:        int32_t *l_75 = (void *)0;
    #####:  133:        l_76[0][2]--;
    #####:  134:        (*l_73) ^= 0x915CC6C9L;
        -:  135:      }
    #####:  136:      if (l_79) {
    #####:  137:        int32_t *l_81 = (void *)0;
    #####:  138:        int32_t *l_82 = &g_74;
        -:  139:        int32_t *l_83[2];
    #####:  140:        uint8_t l_95 = 0xB4L;
        -:  141:        int i;
    #####:  142:        for (i = 0; i < 2; i++)
    #####:  143:          l_83[i] = (void *)0;
    #####:  144:        l_95--;
    #####:  145:        g_98 = g_98;
        -:  146:      } else {
    #####:  147:        uint32_t **l_99 = &g_56;
    #####:  148:        uint32_t ***l_101 = &l_100;
    #####:  149:        const uint32_t *l_103 = &g_61[2][0];
    #####:  150:        const uint32_t **l_102 = &l_103;
        -:  151:        const uint32_t ***l_105[1];
        -:  152:        int i;
    #####:  153:        for (i = 0; i < 1; i++)
    #####:  154:          l_105[i] = &l_102;
    #####:  155:        g_106[0] = (g_104 = ((4294967295UL ^ (l_99 != ((*l_101) = l_100))), l_102));
        -:  156:      }
        -:  157:    }
      220:  158:    ++l_115;
        -:  159:  }
        4:  160:  if ((safe_mul_func_int16_t_s_s(g_65, 0x7C4FL))) {
        4:  161:    l_84[0][0] = (p_20.f1 | g_15);
        4:  162:    l_120[2] = &g_39;
        -:  163:  } else {
    #####:  164:    return l_122[0];
        -:  165:  }
        4:  166:  return g_65;
        -:  167:}
        -:  168:
        1:  169:int main(int argc, char *argv[]) {
        -:  170:  int i, j, k;
        1:  171:  int print_hash_value = 0;
       1*:  172:  if (argc == 2 && strcmp(argv[1], "1") == 0)
    #####:  173:    print_hash_value = 1;
        1:  174:  platform_main_begin();
        1:  175:  crc32_gentab();
        1:  176:  func_1();
        5:  177:  for (i = 0; i < 4; i++) {
        4:  178:    transparent_crc(g_2[i], "g_2[i]", print_hash_value);
        4:  179:    if (print_hash_value)
    #####:  180:      printf("index = [%d]\n", i);
        -:  181:  }
        1:  182:  transparent_crc(g_3, "g_3", print_hash_value);
        1:  183:  transparent_crc(g_6, "g_6", print_hash_value);
        1:  184:  transparent_crc(g_7, "g_7", print_hash_value);
        1:  185:  transparent_crc(g_8, "g_8", print_hash_value);
        1:  186:  transparent_crc(g_9, "g_9", print_hash_value);
        2:  187:  for (i = 0; i < 1; i++) {
        1:  188:    transparent_crc(g_10[i], "g_10[i]", print_hash_value);
        1:  189:    if (print_hash_value)
    #####:  190:      printf("index = [%d]\n", i);
        -:  191:  }
        1:  192:  transparent_crc(g_11, "g_11", print_hash_value);
        1:  193:  transparent_crc(g_12, "g_12", print_hash_value);
        1:  194:  transparent_crc(g_13, "g_13", print_hash_value);
        1:  195:  transparent_crc(g_14, "g_14", print_hash_value);
        1:  196:  transparent_crc(g_15, "g_15", print_hash_value);
        1:  197:  transparent_crc(g_16, "g_16", print_hash_value);
        1:  198:  transparent_crc(g_39.f0, "g_39.f0", print_hash_value);
        1:  199:  transparent_crc(g_39.f1, "g_39.f1", print_hash_value);
        1:  200:  transparent_crc(g_39.f2, "g_39.f2", print_hash_value);
        1:  201:  transparent_crc(g_39.f3, "g_39.f3", print_hash_value);
        1:  202:  transparent_crc(g_39.f4, "g_39.f4", print_hash_value);
        4:  203:  for (i = 0; i < 3; i++) {
        6:  204:    for (j = 0; j < 1; j++) {
        6:  205:      for (k = 0; k < 1; k++) {
        3:  206:        transparent_crc(g_42[i][j][k], "g_42[i][j][k]", print_hash_value);
        3:  207:        if (print_hash_value)
    #####:  208:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  209:      }
        -:  210:    }
        -:  211:  }
        1:  212:  transparent_crc(g_51, "g_51", print_hash_value);
        1:  213:  transparent_crc(g_54, "g_54", print_hash_value);
        1:  214:  transparent_crc(g_55, "g_55", print_hash_value);
        1:  215:  transparent_crc(g_58, "g_58", print_hash_value);
        1:  216:  transparent_crc(g_59, "g_59", print_hash_value);
        6:  217:  for (i = 0; i < 5; i++) {
       10:  218:    for (j = 0; j < 1; j++) {
        5:  219:      transparent_crc(g_61[i][j], "g_61[i][j]", print_hash_value);
        5:  220:      if (print_hash_value)
    #####:  221:        printf("index = [%d][%d]\n", i, j);
        -:  222:    }
        -:  223:  }
        1:  224:  transparent_crc(g_65, "g_65", print_hash_value);
        1:  225:  transparent_crc(g_74, "g_74", print_hash_value);
        5:  226:  for (i = 0; i < 4; i++) {
       12:  227:    for (j = 0; j < 2; j++) {
        8:  228:      transparent_crc(g_91[i][j], "g_91[i][j]", print_hash_value);
        8:  229:      if (print_hash_value)
    #####:  230:        printf("index = [%d][%d]\n", i, j);
        -:  231:    }
        -:  232:  }
        1:  233:  transparent_crc(g_98.f0, "g_98.f0", print_hash_value);
        1:  234:  transparent_crc(g_98.f1, "g_98.f1", print_hash_value);
        1:  235:  transparent_crc(g_121.f0, "g_121.f0", print_hash_value);
        1:  236:  transparent_crc(g_121.f1, "g_121.f1", print_hash_value);
        1:  237:  transparent_crc(g_121.f2, "g_121.f2", print_hash_value);
        1:  238:  transparent_crc(g_121.f3, "g_121.f3", print_hash_value);
        1:  239:  transparent_crc(g_121.f4, "g_121.f4", print_hash_value);
        1:  240:  transparent_crc(g_124, "g_124", print_hash_value);
        2:  241:  for (i = 0; i < 1; i++) {
        5:  242:    for (j = 0; j < 4; j++) {
        8:  243:      for (k = 0; k < 1; k++) {
        4:  244:        transparent_crc(g_125[i][j][k].f0, "g_125[i][j][k].f0", print_hash_value);
        4:  245:        transparent_crc(g_125[i][j][k].f1, "g_125[i][j][k].f1", print_hash_value);
        4:  246:        transparent_crc(g_125[i][j][k].f2, "g_125[i][j][k].f2", print_hash_value);
        4:  247:        transparent_crc(g_125[i][j][k].f3, "g_125[i][j][k].f3", print_hash_value);
        4:  248:        transparent_crc(g_125[i][j][k].f4, "g_125[i][j][k].f4", print_hash_value);
        4:  249:        if (print_hash_value)
    #####:  250:          printf("index = [%d][%d][%d]\n", i, j, k);
        -:  251:      }
        -:  252:    }
        -:  253:  }
        1:  254:  transparent_crc(g_126.f0, "g_126.f0", print_hash_value);
        1:  255:  transparent_crc(g_126.f1, "g_126.f1", print_hash_value);
        1:  256:  transparent_crc(g_126.f2, "g_126.f2", print_hash_value);
        1:  257:  transparent_crc(g_126.f3, "g_126.f3", print_hash_value);
        1:  258:  transparent_crc(g_126.f4, "g_126.f4", print_hash_value);
        1:  259:  platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
        1:  260:  return 0;
        -:  261:}
