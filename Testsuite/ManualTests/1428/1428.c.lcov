    1|       |/* { dg-do run } */
    2|       |
    3|       |double s[4] = {1.0, 2.0, 3.0, 4.0}, pol_x[2] = {5.0, 6.0};
    4|       |
    5|      1|__attribute__((noinline)) int foo(void) {
    6|      1|  double coef_x[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    7|      1|  int lxp = 0;
    8|      1|  if (lxp <= 1)
    9|      2|    do {
   10|      2|      double t = pol_x[lxp];
   11|      2|      long S;
   12|      2|      long l = lxp * 4L - 1;
   13|     10|      for (S = 1; S <= 4; S++)
   14|      8|        coef_x[S + l] = coef_x[S + l] + s[S - 1] * t;
   15|      2|    } while (lxp++ != 1);
   16|      1|  asm volatile("" : : "r"(coef_x) : "memory");
   17|      9|  for (lxp = 0; lxp < 8; lxp++)
   18|      8|    if (coef_x[lxp] != ((lxp & 3) + 1) * (5.0 + (lxp >= 4)))
   19|      0|      __builtin_abort();
   20|      1|  return 1;
   21|      1|}
   22|       |
   23|      1|int main() {
   24|      1|  asm volatile("" : : : "memory");
   25|      1|  if (!foo())
   26|      0|    __builtin_abort();
   27|      1|  return 0;
   28|      1|}

