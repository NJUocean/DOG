        -:    0:Source:807.c
        -:    0:Graph:807.gcno
        -:    0:Data:807.gcda
        -:    0:Runs:1
        -:    1:/* This tests for a bug in regstack that was breaking glibc's math library. */
        -:    2:/* { dg-skip-if "" { ! { i?86-*-* x86_64-*-* } } } */
        -:    3:
        -:    4:extern void abort(void);
        -:    5:
        1:    6:static __inline double minus_zero(void) {
        -:    7:  union {
        -:    8:    double __d;
        -:    9:    int __i[2];
        -:   10:  } __x;
        1:   11:  __x.__i[0] = 0x0;
        1:   12:  __x.__i[1] = 0x80000000;
        1:   13:  return __x.__d;
        -:   14:}
        -:   15:
        1:   16:static __inline long double __atan2l(long double __y, long double __x) {
        -:   17:  register long double __value;
        1:   18:  __asm __volatile__("fpatan\n\t"
        -:   19:                     : "=t"(__value)
        -:   20:                     : "0"(__x), "u"(__y)
        -:   21:                     : "st(1)");
        1:   22:  return __value;
        -:   23:}
        -:   24:
        1:   25:static __inline long double __sqrtl(long double __x) {
        -:   26:  register long double __result;
        1:   27:  __asm __volatile__("fsqrt" : "=t"(__result) : "0"(__x));
        1:   28:  return __result;
        -:   29:}
        -:   30:
        1:   31:static __inline double asin(double __x) {
        1:   32:  return __atan2l(__x, __sqrtl(1.0 - __x * __x));
        -:   33:}
        -:   34:
        1:   35:int main(void) {
        -:   36:  double x;
        -:   37:
        1:   38:  x = minus_zero();
        1:   39:  x = asin(x);
        -:   40:
        1:   41:  if (x != 0.0) /* actually -0.0, but 0.0 == -0.0 */
    #####:   42:    abort();
        1:   43:  return 0;
        -:   44:}
