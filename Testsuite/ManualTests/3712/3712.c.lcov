    1|       |/* PR tree-optimization/47538 */
    2|       |
    3|       |struct S {
    4|       |  double a, b, *c;
    5|       |  unsigned long d;
    6|       |};
    7|       |
    8|      4|__attribute__((noinline, noclone)) void foo(struct S *x, const struct S *y) {
    9|      4|  const unsigned long n = y->d + 1;
   10|      4|  const double m = 0.25 * (y->b - y->a);
   11|      4|  x->a = y->a;
   12|      4|  x->b = y->b;
   13|      4|  if (n == 1) {
   14|      1|    x->c[0] = 0.;
   15|      3|  } else if (n == 2) {
   16|      1|    x->c[1] = m * y->c[0];
   17|      1|    x->c[0] = 2.0 * x->c[1];
   18|      2|  } else {
   19|      2|    double o = 0.0, p = 1.0;
   20|      2|    unsigned long i;
   21|      2|
   22|      5|    for (i = 1; i <= n - 2; i++) {
   23|      3|      x->c[i] = m * (y->c[i - 1] - y->c[i + 1]) / (double)i;
   24|      3|      o += p * x->c[i];
   25|      3|      p = -p;
   26|      3|    }
   27|      2|    x->c[n - 1] = m * y->c[n - 2] / (n - 1.0);
   28|      2|    o += p * x->c[n - 1];
   29|      2|    x->c[0] = 2.0 * o;
   30|      2|  }
   31|      4|}
   32|       |
   33|      1|int main(void) {
   34|      1|  struct S x, y;
   35|      1|  double c[4] = {10, 20, 30, 40}, d[4], e[4] = {118, 118, 118, 118};
   36|      1|
   37|      1|  y.a = 10;
   38|      1|  y.b = 6;
   39|      1|  y.c = c;
   40|      1|  x.c = d;
   41|      1|  y.d = 3;
   42|      1|  __builtin_memcpy(d, e, sizeof d);
   43|      1|  foo(&x, &y);
   44|      1|  if (d[0] != 0 || d[1] != 20 || d[2] != 10 || d[3] != -10)
   45|      0|    __builtin_abort();
   46|      1|  y.d = 2;
   47|      1|  __builtin_memcpy(d, e, sizeof d);
   48|      1|  foo(&x, &y);
   49|      1|  if (d[0] != 60 || d[1] != 20 || d[2] != -10 || d[3] != 118)
   50|      0|    __builtin_abort();
   51|      1|  y.d = 1;
   52|      1|  __builtin_memcpy(d, e, sizeof d);
   53|      1|  foo(&x, &y);
   54|      1|  if (d[0] != -20 || d[1] != -10 || d[2] != 118 || d[3] != 118)
   55|      0|    __builtin_abort();
   56|      1|  y.d = 0;
   57|      1|  __builtin_memcpy(d, e, sizeof d);
   58|      1|  foo(&x, &y);
   59|      1|  if (d[0] != 0 || d[1] != 118 || d[2] != 118 || d[3] != 118)
   60|      0|    __builtin_abort();
   61|      1|  return 0;
   62|      1|}

