        -:    0:Source:2354.c
        -:    0:Graph:2354.gcno
        -:    0:Data:2354.gcda
        -:    0:Runs:1
        -:    1:/* Test AAPCS layout (alignment) for callee.  */
        -:    2:
        -:    3:/* { dg-do run { target aarch64*-*-* } } */
        -:    4:
        -:    5:extern int memcmp(const void *s1, const void *s2, __SIZE_TYPE__ n);
        -:    6:extern void abort(void);
        -:    7:
        -:    8:/* The underlying struct here has alignment 8.  */
        -:    9:typedef struct __attribute__((__aligned__(16))) {
        -:   10:  long x;
        -:   11:  long y;
        -:   12:} overaligned;
        -:   13:
        -:   14:overaligned a = {2, 3};
        -:   15:overaligned b = {5, 8};
        -:   16:overaligned c = {13, 21};
        -:   17:
        1:   18:void test_passing_overaligned_struct(int x0, overaligned x1, int x3, int x4,
        -:   19:                                     overaligned x5, int x7, int stack,
        -:   20:                                     overaligned stack8) {
        1:   21:  if (x0 != 7 || x3 != 9 || x4 != 11 || x7 != 15 || stack != 10)
    #####:   22:    abort();
        1:   23:  if (memcmp((void *)&x1, (void *)&a, sizeof(overaligned)))
    #####:   24:    abort();
        1:   25:  if (memcmp((void *)&x5, (void *)&b, sizeof(overaligned)))
    #####:   26:    abort();
        1:   27:  if (memcmp((void *)&stack8, (void *)&c, sizeof(overaligned)))
    #####:   28:    abort();
        1:   29:  long addr = ((long)&stack8) & 15;
        1:   30:  if (addr != 0) {
    #####:   31:    __builtin_printf("Alignment was %d\n", addr);
    #####:   32:    abort();
        -:   33:  }
        1:   34:}
        -:   35:
        1:   36:int main(int argc, char **argv) {
        1:   37:  test_passing_overaligned_struct(7, a, 9, 11, b, 15, 10, c);
        1:   38:  return 0;
        -:   39:}
