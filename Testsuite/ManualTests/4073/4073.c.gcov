        -:    0:Source:4073.c
        -:    0:Graph:4073.gcno
        -:    0:Data:4073.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:   Purpose: Test generic SIMD support, V8HImode.  This test should work
        -:    3:   regardless of if the target has SIMD instructions.
        -:    4:*/
        -:    5:
        -:    6:typedef short __attribute__((vector_size(16))) vecint;
        -:    7:
        -:    8:vecint i = {150, 100, 150, 200, 0, 0, 0, 0};
        -:    9:vecint j = {10, 13, 20, 30, 1, 1, 1, 1};
        -:   10:vecint k;
        -:   11:
        -:   12:union {
        -:   13:  vecint v;
        -:   14:  short i[8];
        -:   15:} res;
        -:   16:
        -:   17:/* This should go away once we can use == and != on vector types.  */
        8:   18:void verify(int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4) {
        8:   19:  if (a1 != b1 || a2 != b2 || a3 != b3 || a4 != b4)
    #####:   20:    abort();
        8:   21:}
        -:   22:
        1:   23:int main() {
        1:   24:  k = i + j;
        1:   25:  res.v = k;
        -:   26:
        1:   27:  verify(res.i[0], res.i[1], res.i[2], res.i[3], 160, 113, 170, 230);
        -:   28:
        1:   29:  k = i * j;
        1:   30:  res.v = k;
        -:   31:
        1:   32:  verify(res.i[0], res.i[1], res.i[2], res.i[3], 1500, 1300, 3000, 6000);
        -:   33:
        1:   34:  k = i / j;
        1:   35:  res.v = k;
        -:   36:
        1:   37:  verify(res.i[0], res.i[1], res.i[2], res.i[3], 15, 7, 7, 6);
        -:   38:
        1:   39:  k = i & j;
        1:   40:  res.v = k;
        -:   41:
        1:   42:  verify(res.i[0], res.i[1], res.i[2], res.i[3], 2, 4, 20, 8);
        -:   43:
        1:   44:  k = i | j;
        1:   45:  res.v = k;
        -:   46:
        1:   47:  verify(res.i[0], res.i[1], res.i[2], res.i[3], 158, 109, 150, 222);
        -:   48:
        1:   49:  k = i ^ j;
        1:   50:  res.v = k;
        -:   51:
        1:   52:  verify(res.i[0], res.i[1], res.i[2], res.i[3], 156, 105, 130, 214);
        -:   53:
        1:   54:  k = -i;
        1:   55:  res.v = k;
        1:   56:  verify(res.i[0], res.i[1], res.i[2], res.i[3], -150, -100, -150, -200);
        -:   57:
        1:   58:  k = ~i;
        1:   59:  res.v = k;
        1:   60:  verify(res.i[0], res.i[1], res.i[2], res.i[3], -151, -101, -151, -201);
        -:   61:
        1:   62:  exit(0);
        -:   63:}
