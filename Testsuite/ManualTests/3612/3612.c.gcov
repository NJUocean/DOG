        -:    0:Source:3612.c
        -:    0:Graph:3612.gcno
        -:    0:Data:3612.gcda
        -:    0:Runs:1
        -:    1:/* PR tree-optimization/60823 */
        -:    2:/* { dg-do run } */
        -:    3:/* { dg-require-effective-target vect_simd_clones } */
        -:    4:/* { dg-options "-O2 -fopenmp-simd" } */
        -:    5:
        -:    6:#pragma omp declare simd simdlen(4) notinbranch
        4:    7:__attribute__((noinline)) int foo(double c1, double c2) {
        4:    8:  double z1 = c1, z2 = c2;
        4:    9:  int res = 100, i;
        -:   10:
       24:   11:  for (i = 0; i < 5; i++) {
       20:   12:    res = (z1 * z1 + z2 * z2 > 4.0) ? (i < res ? i : res) : res;
       20:   13:    z1 = c1 + z1 * z1 - z2 * z2;
       20:   14:    z2 = c2 + 2.0 * z1 * z2;
       20:   15:    c1 += 0.5;
       20:   16:    c2 += 0.5;
        -:   17:  }
        4:   18:  return res;
        -:   19:}
        -:   20:
        1:   21:__attribute__((noinline, noclone)) void bar(double *x, double *y) {
        1:   22:  asm volatile("" : : "rm"(x), "rm"(y) : "memory");
        1:   23:}
        -:   24:
        1:   25:int main() {
        -:   26:  int i;
        1:   27:  double c[4] = {0.0, 1.0, 0.0, 1.0};
        1:   28:  double d[4] = {0.0, 1.0, 2.0, 0.0};
        -:   29:  int e[4];
        1:   30:  bar(c, d);
        -:   31:#pragma omp simd safelen(4)
        5:   32:  for (i = 0; i < 4; i++)
        4:   33:    e[i] = foo(c[i], d[i]);
        1:   34:  if (e[0] != 3 || e[1] != 1 || e[2] != 1 || e[3] != 2)
    #####:   35:    __builtin_abort();
        1:   36:  return 0;
        -:   37:}
