    1|       |/* { dg-do run } */
    2|       |/* { dg-options "-O2" } */
    3|       |
    4|       |#include <float.h>
    5|       |#include <stdio.h>
    6|       |
    7|       |#define TEST_EQ(TYPE, X, Y, RES)                                               \
    8|      7|  do {                                                                         \
    9|      7|    volatile TYPE a, b;                                                        \
   10|      7|    a = (TYPE)X;                                                               \
   11|      7|    b = (TYPE)Y;                                                               \
   12|      7|    if ((a == b) != RES) {                                                     \
   13|      0|      printf("Runtime computation error @%d. %g "                              \
   14|      0|             "!= %g\n",                                                        \
   15|      0|             __LINE__, a, b);                                                  \
   16|      0|      error = 1;                                                               \
   17|      0|    }                                                                          \
   18|      7|  } while (0)
   19|       |
   20|       |#ifndef __HS__
   21|       |/* Special type of NaN found when using double FPX instructions.  */
   22|       |static const unsigned long long __nan = 0x7FF0000080000000ULL;
   23|       |#define W (*(double *)&__nan)
   24|       |#else
   25|       |#define W __builtin_nan("")
   26|       |#endif
   27|       |
   28|       |#define Q __builtin_nan("")
   29|       |#define H __builtin_inf()
   30|       |
   31|      1|int main(void) {
   32|      1|  int error = 0;
   33|      1|
   34|      1|  TEST_EQ(double, 1, 1, 1);
   35|      1|  TEST_EQ(double, 1, 2, 0);
   36|      1|  TEST_EQ(double, W, W, 0);
   37|      1|  TEST_EQ(double, Q, Q, 0);
   38|      1|  TEST_EQ(double, __DBL_MAX__, __DBL_MAX__, 1);
   39|      1|  TEST_EQ(double, __DBL_MIN__, __DBL_MIN__, 1);
   40|      1|  TEST_EQ(double, H, H, 1);
   41|      1|
   42|      1|  if (error)
   43|      0|    __builtin_abort();
   44|      1|
   45|      1|  return 0;
   46|      1|}

