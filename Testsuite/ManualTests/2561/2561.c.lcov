    1|       |/* Test double on x86. */
    2|       |
    3|       |/* { dg-do run } */
    4|       |/* { dg-options -O2 } */
    5|       |
    6|       |extern void abort(void);
    7|       |
    8|      2|static __inline double mypow(double __x, double __y) {
    9|      2|  register double __value, __exponent;
   10|      2|  long __p = (long)__y;
   11|      2|  if (__y == (double)__p) {
   12|      0|    double __r = 1.0;
   13|      0|    if (__p == 0)
   14|      0|      return 1.0;
   15|      0|    if (__p < 0) {
   16|      0|      __p = -__p;
   17|      0|      __x = 1.0 / __x;
   18|      0|    }
   19|      0|    while (1) {
   20|      0|      if (__p & 1)
   21|      0|        __r *= __x;
   22|      0|      __p >>= 1;
   23|      0|      if (__p == 0)
   24|      0|        return __r;
   25|      0|      __x *= __x;
   26|      0|    }
   27|      0|  }
   28|      2|  __asm __volatile__("fmul	%%st(1),%%st\n\t" /* y * log2(x) */
   29|      2|                     "fst	%%st(1)\n\t"
   30|      2|                     "frndint\n\t" /* int(y * log2(x)) */
   31|      2|                     "fxch  %%st(1)\n\t"
   32|      2|                     "fsub	%%st(1),%%st\n\t" /* fract(y * log2(x)) */
   33|      2|                     "f2xm1\n\t" /* 2^(fract(y * log2(x))) - 1 */
   34|      2|                     : "=t"(__value), "=u"(__exponent)
   35|      2|                     : "0"(__x), "1"(__y));
   36|      2|  __value += 1.0;
   37|      2|  __asm __volatile__("fscale" : "=t"(__value) : "0"(__value), "u"(__exponent));
   38|      2|  return __value;
   39|      2|}
   40|       |
   41|       |const double E1 = 2.71828182845904523536028747135;
   42|       |
   43|      1|double fact(double x) {
   44|      1|  double corr;
   45|      1|  corr = 1.0;
   46|      1|  return corr * mypow(x / E1, x);
   47|      1|}
   48|       |
   49|      1|int main() {
   50|      1|  double y, z;
   51|      1|
   52|      1|  y = fact(46.2);
   53|      1|  z = mypow(46.2 / E1, 46.2);
   54|      1|
   55|       |#if 0
   56|       |  printf ("%26.19e, %26.19e\n", y, z);
   57|       |#endif
   58|      1|
   59|      1|  if (y > z)
   60|      0|    y -= z;
   61|      1|  else
   62|      1|    y = z - y;
   63|      1|
   64|      1|  y /= z;
   65|      1|  if (y > 0.1)
   66|      0|    abort();
   67|      1|
   68|      1|  return 0;
   69|      1|}

