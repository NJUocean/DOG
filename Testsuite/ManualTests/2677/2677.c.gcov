        -:    0:Source:2677.c
        -:    0:Graph:2677.gcno
        -:    0:Data:2677.gcda
        -:    0:Runs:1
        -:    1:/* PR target/63661 */
        -:    2:/* { dg-do run } */
        -:    3:/* { dg-require-effective-target fpic } */
        -:    4:/* { dg-options "-mtune=nehalem -fPIC -O2" } */
        -:    5:
        -:    6:static void __attribute__((noinline, noclone, hot))
        1:    7:foo(double a, double q, double *ff, double *gx, int e, int ni) {
        -:    8:  union {
        -:    9:    double n;
        -:   10:    unsigned long long o;
        -:   11:  } punner;
        -:   12:  double d;
        -:   13:
        1:   14:  punner.n = q;
        1:   15:  __builtin_printf("B: 0x%016llx ---- %g\n", punner.o, q);
        -:   16:
        1:   17:  d = q - 5;
        1:   18:  if (d < 0)
    #####:   19:    d = -d;
        1:   20:  if (d > 0.1)
    #####:   21:    __builtin_abort();
        1:   22:}
        -:   23:
        -:   24:static int __attribute__((noinline, noclone, hot))
        1:   25:bar(int order, double q, double c[]) {
        -:   26:  int ni, nn, i, e;
        -:   27:  double g2, x2, de, s, ratio, ff;
        -:   28:
        1:   29:  nn = 0;
        1:   30:  e = order & 1;
        1:   31:  s = 0;
        1:   32:  ratio = 0;
        1:   33:  x2 = 0;
        1:   34:  g2 = 0;
        -:   35:
        1:   36:  if (q == 0.0)
    #####:   37:    return 0;
        -:   38:
        1:   39:  if (order < 5) {
        1:   40:    ratio = 1.0 / q;
        1:   41:    nn = order;
        -:   42:  }
        -:   43:
        1:   44:  ni = -nn;
        -:   45:
        -:   46:  while (1) {
        1:   47:    de = ratio - g2 - x2;
        -:   48:
        1:   49:    foo(0, q, &ff, &g2, e, ni);
        -:   50:
        1:   51:    if ((int)de == 0)
        1:   52:      break;
        -:   53:  }
        -:   54:
        1:   55:  s += 2 * nn * c[nn];
        -:   56:
        2:   57:  for (i = 0; i < 1; i++) {
        1:   58:    c[0] = nn;
       11:   59:    for (; i < 10; i++)
       10:   60:      c[i] = 0.0;
        1:   61:    c[0] /= s;
        -:   62:  }
        -:   63:
        1:   64:  return 0;
        -:   65:}
        -:   66:
        1:   67:int main() {
        -:   68:  double c[1000];
        -:   69:
        1:   70:  bar(1, 5.0, c);
        1:   71:  return 0;
        -:   72:}
