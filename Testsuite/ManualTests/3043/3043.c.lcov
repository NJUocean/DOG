    1|       |/* Test case contributed by Ingo Rohloff <rohloff@in.tum.de>.
    2|       |   Code distilled from Linux kernel.  */
    3|       |
    4|       |/* Compile this program with a gcc-2.95.2 using
    5|       |   "gcc -O2" and run it. The result will be that
    6|       |   rx_ring[1].next == 0   (it should be == 14)
    7|       |   and
    8|       |   ep.skbuff[4] == 5      (it should be 0)
    9|       |*/
   10|       |
   11|       |extern void abort(void);
   12|       |
   13|       |struct epic_rx_desc {
   14|       |  unsigned int next;
   15|       |};
   16|       |
   17|       |struct epic_private {
   18|       |  struct epic_rx_desc *rx_ring;
   19|       |  unsigned int rx_skbuff[5];
   20|       |};
   21|       |
   22|      1|static void epic_init_ring(struct epic_private *ep) {
   23|      1|  int i;
   24|      1|
   25|      6|  for (i = 0; i < 5; i++) {
   26|      5|    ep->rx_ring[i].next = 10 + (i + 1) * 2;
   27|      5|    ep->rx_skbuff[i] = 0;
   28|      5|  }
   29|      1|  ep->rx_ring[i - 1].next = 10;
   30|      1|}
   31|       |
   32|       |static int check_rx_ring[5] = {12, 14, 16, 18, 10};
   33|       |
   34|      1|int main(void) {
   35|      1|  struct epic_private ep;
   36|      1|  struct epic_rx_desc rx_ring[5];
   37|      1|  int i;
   38|      1|
   39|      6|  for (i = 0; i < 5; i++) {
   40|      5|    rx_ring[i].next = 0;
   41|      5|    ep.rx_skbuff[i] = 5;
   42|      5|  }
   43|      1|
   44|      1|  ep.rx_ring = rx_ring;
   45|      1|  epic_init_ring(&ep);
   46|      1|
   47|      6|  for (i = 0; i < 5; i++) {
   48|      5|    if (rx_ring[i].next != check_rx_ring[i])
   49|      0|      abort();
   50|      5|    if (ep.rx_skbuff[i] != 0)
   51|      0|      abort();
   52|      5|  }
   53|      1|  return 0;
   54|      1|}

