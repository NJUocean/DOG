        -:    0:Source:639.c
        -:    0:Graph:639.gcno
        -:    0:Data:639.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-O2 -std=c99" } */
        -:    3:
        -:    4:int puts(const char *);
        -:    5:int snprintf(char *, unsigned long, const char *, ...);
        -:    6:unsigned long strspn(const char *, const char *);
        -:    7:
        -:    8:struct TValue {
        -:    9:  union {
        -:   10:    long long i;
        -:   11:    double n;
        -:   12:  } value_;
        -:   13:  unsigned char tt_;
        -:   14:};
        -:   15:
        1:   16:static int tostringbuff(struct TValue *num, char *str) {
        -:   17:  int len;
        1:   18:  if (num->tt_ == 3) {
    #####:   19:    len = snprintf(str, 50, "%lld", num->value_.i);
        -:   20:  } else {
        1:   21:    len = snprintf(str, 50, "%.14g", num->value_.n);
        1:   22:    if (str[strspn(str, "-0123456789")] == '\0') {
        1:   23:      str[len++] = '.';
        1:   24:      str[len++] = '0';
        -:   25:    }
        -:   26:  }
        1:   27:  return len;
        -:   28:}
        -:   29:
    #####:   30:void unused(int *buff, struct TValue *num) {
        -:   31:  char junk[50];
    #####:   32:  *buff += tostringbuff(num, junk);
    #####:   33:}
        -:   34:
        -:   35:char space[400];
        -:   36:
        -:   37:void addnum2buff(int *buff, struct TValue *num) __attribute__((__noinline__));
        1:   38:void addnum2buff(int *buff, struct TValue *num) {
        1:   39:  *buff += tostringbuff(num, space);
        1:   40:}
        -:   41:
        1:   42:int __attribute__((noipa)) check_space(char *s) {
       1*:   43:  return (s[0] == '1' && s[1] == '.' && s[2] == '0' && s[3] == '\0');
        -:   44:}
        -:   45:
        1:   46:int main(void) {
        1:   47:  int buff = 0;
        -:   48:  struct TValue num;
        1:   49:  num.value_.n = 1.0;
        1:   50:  num.tt_ = 19;
        1:   51:  addnum2buff(&buff, &num);
        1:   52:  if (!check_space(space))
    #####:   53:    __builtin_abort();
        1:   54:  return 0;
        -:   55:}
