        -:    0:Source:3631.c
        -:    0:Graph:3631.gcno
        -:    0:Data:3631.gcda
        -:    0:Runs:1
        -:    1:/* Bad PTA results (incorrect store handling) was causing us to delete
        -:    2: *na = 0 store.  */
        -:    3:
        -:    4:typedef struct E {
        -:    5:  int p;
        -:    6:  struct E *n;
        -:    7:} * EP;
        -:    8:
        -:    9:typedef struct C {
        -:   10:  EP x;
        -:   11:  short cn, cp;
        -:   12:} * CP;
        -:   13:
        1:   14:__attribute__((noinline)) CP foo(CP h, EP x) {
        1:   15:  EP pl = 0, *pa = &pl;
        1:   16:  EP nl = 0, *na = &nl;
        -:   17:  EP n;
        -:   18:
        3:   19:  while (x) {
        2:   20:    n = x->n;
        2:   21:    if ((x->p & 1) == 1) {
        1:   22:      h->cp++;
        1:   23:      *pa = x;
        1:   24:      pa = &((*pa)->n);
        -:   25:    } else {
        1:   26:      h->cn++;
        1:   27:      *na = x;
        1:   28:      na = &((*na)->n);
        -:   29:    }
        2:   30:    x = n;
        -:   31:  }
        1:   32:  *pa = nl;
        1:   33:  *na = 0;
        1:   34:  h->x = pl;
        1:   35:  return h;
        -:   36:}
        -:   37:
        1:   38:int main(void) {
        1:   39:  struct C c = {0, 0, 0};
        1:   40:  struct E e[2] = {{0, &e[1]}, {1, 0}};
        -:   41:  EP p;
        -:   42:
        1:   43:  foo(&c, &e[0]);
        1:   44:  if (c.cn != 1 || c.cp != 1)
    #####:   45:    __builtin_abort();
        1:   46:  if (c.x != &e[1])
    #####:   47:    __builtin_abort();
        1:   48:  if (e[1].n != &e[0])
    #####:   49:    __builtin_abort();
        1:   50:  if (e[0].n)
    #####:   51:    __builtin_abort();
        1:   52:  return 0;
        -:   53:}
