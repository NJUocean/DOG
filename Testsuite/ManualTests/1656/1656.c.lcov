    1|       |/* { dg-require-effective-target return_address } */
    2|       |int check_fa_work(const char *, const char *) __attribute__((noinline));
    3|       |int check_fa_mid(const char *) __attribute__((noinline));
    4|       |int check_fa(char *) __attribute__((noinline));
    5|       |int how_much(void) __attribute__((noinline));
    6|       |
    7|      1|int check_fa_work(const char *c, const char *f) {
    8|      1|  const char d = 0;
    9|      1|
   10|      1|  if (c >= &d)
   11|      1|    return c >= f && f >= &d;
   12|      0|  else
   13|      0|    return c <= f && f <= &d;
   14|      1|}
   15|       |
   16|      1|int check_fa_mid(const char *c) {
   17|      1|  const char *f = __builtin_frame_address(0);
   18|      1|
   19|      1|  /* Prevent a tail call to check_fa_work, eliding the current stack frame.  */
   20|      1|  return check_fa_work(c, f) != 0;
   21|      1|}
   22|       |
   23|      1|int check_fa(char *unused) {
   24|      1|  const char c = 0;
   25|      1|
   26|      1|  /* Prevent a tail call to check_fa_mid, eliding the current stack frame.  */
   27|      1|  return check_fa_mid(&c) != 0;
   28|      1|}
   29|       |
   30|      1|int how_much(void) { return 8; }
   31|       |
   32|      1|int main(void) {
   33|      1|  char *unused = __builtin_alloca(how_much());
   34|      1|
   35|      1|  if (!check_fa(unused))
   36|      0|    abort();
   37|      1|  return 0;
   38|      1|}

