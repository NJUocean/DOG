        -:    0:Source:2305.c
        -:    0:Graph:2305.gcno
        -:    0:Data:2305.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-std=c99 -pedantic-errors" } */
        -:    3:/* { dg-require-effective-target alloca } */
        -:    4:/* PR c/18740 */
        -:    5:
        -:    6:static int i;
        -:    7:
        1:    8:int foo(int n) {
        1:    9:  int(*t)[n];
        1:   10:  i = 0;
        1:   11:  int j = 0;
        1:   12:  char b[1][n + 3];             /* Variable length array.  */
        1:   13:  int d[3][n];                  /* Variable length array.  */
        1:   14:  sizeof(b[i++ + sizeof(j++)]); /* Outer sizeof is evaluated for vla, but not
        -:   15:                                   the inner one.  */
        1:   16:  if (i != 1 || j != 0)
    #####:   17:    return 1;
        1:   18:  __typeof__(b[i++]) c1; /* typeof is evauluated when given a vm */
        1:   19:  if (i != 2)
    #####:   20:    return 1;
        1:   21:  __typeof__(t + (i++, 0)) c2; /* typeof is evauluated when given a vm */
        1:   22:  if (i != 3)
    #####:   23:    return 1;
        -:   24:  __typeof__(i + (i++, 0))
        -:   25:      c3; /* typeof is not evauluated when not given a vm */
        1:   26:  if (i != 3)
    #####:   27:    return 1;
        1:   28:  sizeof(d[i++]); /* sizeof is evaluated for vla.  */
        1:   29:  if (i != 4)
    #####:   30:    return 1;
        -:   31:  __alignof__(__typeof__(
        -:   32:      t +
        -:   33:      (i++, 0))); /* typeof is not evauluated when given a vm inside alignof*/
        1:   34:  if (i != 4)
    #####:   35:    return 1;
        -:   36:  sizeof(__typeof__(
        -:   37:      t +
        -:   38:      (i++, 0))); /* typeof is not evauluated when given a vm inside sizeof*/
        1:   39:  if (i != 4)
    #####:   40:    return 1;
        1:   41:  return 0;
        -:   42:}
        -:   43:
        1:   44:int foo6(int a, int b[a][a], int (*c)[sizeof(*b)]) { return sizeof(*c); }
        -:   45:
        1:   46:int main() {
        -:   47:  int b[10][10];
        -:   48:  int(*c)[sizeof(int) * 10];
        1:   49:  if (foo6(10, b, c) != 10 * sizeof(int) * sizeof(int))
    #####:   50:    return 1;
        1:   51:  return foo(10);
        -:   52:}
