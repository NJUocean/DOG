        -:    0:Source:3203.c
        -:    0:Graph:3203.gcno
        -:    0:Data:3203.gcda
        -:    0:Runs:1
        -:    1:/* Problem originally visible on ia64.
        -:    2:
        -:    3:   There is a partial redundancy of "in + 1" that makes GCSE want to
        -:    4:   transform the final while loop to
        -:    5:
        -:    6:     p = in + 1;
        -:    7:     tmp = p;
        -:    8:     ...
        -:    9:     goto start;
        -:   10:   top:
        -:   11:     tmp = tmp + 1;
        -:   12:   start:
        -:   13:     in = tmp;
        -:   14:     if (in < p) goto top;
        -:   15:
        -:   16:   We miscalculate the number of loop iterations as (p - tmp) = 0
        -:   17:   instead of (p - in) = 1, which results in overflow in the doloop
        -:   18:   optimization.  */
        -:   19:
        2:   20:static const char *test(const char *in, char *out) {
        -:   21:  while (1) {
        2:   22:    if (*in == 'a') {
        2:   23:      const char *p = in + 1;
        2:   24:      while (*p == 'x')
    #####:   25:        ++p;
        2:   26:      if (*p == 'b')
        1:   27:        return p;
        2:   28:      while (in < p)
        1:   29:        *out++ = *in++;
        -:   30:    }
        -:   31:  }
        -:   32:}
        -:   33:
        1:   34:int main() {
        -:   35:  char out[4];
        1:   36:  test("aab", out);
        1:   37:  return 0;
        -:   38:}
