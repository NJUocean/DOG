        -:    0:Source:630.c
        -:    0:Graph:630.gcno
        -:    0:Data:630.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-O2 -fno-unit-at-a-time" } */
        -:    3:
        -:    4:typedef unsigned char u8;
        -:    5:typedef unsigned long long u64;
        -:    6:
        -:    7:static inline __attribute__((always_inline)) u64 __swab64p(const u64 *p) {
        -:    8:  return (__builtin_constant_p((u64)(*p))
        -:    9:              ? ((u64)((((u64)(*p) & (u64)0x00000000000000ffULL) << 56) |
        -:   10:                       (((u64)(*p) & (u64)0x000000000000ff00ULL) << 40) |
        -:   11:                       (((u64)(*p) & (u64)0x0000000000ff0000ULL) << 24) |
        -:   12:                       (((u64)(*p) & (u64)0x00000000ff000000ULL) << 8) |
        -:   13:                       (((u64)(*p) & (u64)0x000000ff00000000ULL) >> 8) |
        -:   14:                       (((u64)(*p) & (u64)0x0000ff0000000000ULL) >> 24) |
        -:   15:                       (((u64)(*p) & (u64)0x00ff000000000000ULL) >> 40) |
        -:   16:                       (((u64)(*p) & (u64)0xff00000000000000ULL) >> 56)))
        1:   17:              : __builtin_bswap64(*p));
        -:   18:}
        -:   19:
        2:   20:static inline u64 wwn_to_u64(void *wwn) { return __swab64p(wwn); }
        -:   21:
        1:   22:void __attribute__((noinline, noclone)) broken(u64 *shost) {
        1:   23:  u8 node_name[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        1:   24:  *shost = wwn_to_u64(node_name);
        1:   25:}
        -:   26:
    #####:   27:void __attribute__((noinline, noclone)) dummy(void) { __builtin_abort(); }
        -:   28:
        1:   29:int main(int argc, char *argv[]) {
        -:   30:  u64 v;
        -:   31:
        1:   32:  broken(&v);
        -:   33:
        1:   34:  if (v != (u64)-1)
    #####:   35:    __builtin_abort();
        -:   36:
        1:   37:  return 0;
        -:   38:}
