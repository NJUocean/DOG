    1|       |/* { dg-do run } */
    2|       |/* { dg-require-effective-target fstack_protector } */
    3|       |/* { dg-options "-fstack-protector-strong" } */
    4|       |/* { dg-set-target-env-var ASAN_OPTIONS "detect_stack_use_after_return=1" } */
    5|       |/* { dg-shouldfail "asan" } */
    6|       |
    7|      1|__attribute__((noinline)) char *Ident(char *x) { return x; }
    8|       |
    9|      1|__attribute__((noinline)) char *Func1() {
   10|      1|  char local[1 << 12];
   11|      1|  return Ident(local);
   12|      1|}
   13|       |
   14|      1|__attribute__((noinline)) void Func2(char *x) { *x = 1; }
   15|      1|int main(int argc, char **argv) {
   16|      1|  Func2(Func1());
   17|      1|  return 0;
   18|      1|}
   19|       |
   20|       |/* { dg-output "AddressSanitizer: stack-use-after-return on address
   21|       | * 0x\[0-9a-f\]+\[^\n\r]*(\n|\r\n|\r)" } */
   22|       |/* { dg-output "WRITE of size 1 at .* thread T0.*" } */
   23|       |/* { dg-output "    #0.*(Func2)?.*pr64820.(c:21)?.*" } */
   24|       |/* { dg-output "is located in stack of thread T0 at offset.*" } */
   25|       |/* { dg-output "\'local\' \\(line 14\\) <== Memory access at offset 32 is inside
   26|       | * this variable" } */

