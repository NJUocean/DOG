        -:    0:Source:769.c
        -:    0:Graph:769.gcno
        -:    0:Data:769.gcda
        -:    0:Runs:1
        -:    1:/* PR optimization/10392
        -:    2: * Reporter: marcus@mc.pp.se
        -:    3: * Summary: [3.3/3.4 regression] [SH] optimizer generates faulty array indexing
        -:    4: * Description:
        -:    5: * The address calculation of an index operation on an array on the stack
        -:    6: * can _under some conditions_ get messed up completely
        -:    7: *
        -:    8: * Testcase tweaked by dank@kegel.com
        -:    9: * Problem only happens with -O2 -m4, so it should only happen on sh4,
        -:   10: * but what the heck, let's test other architectures, too.
        -:   11: * Not marked as xfail since it's a regression.
        -:   12: */
        -:   13:/* { dg-do run } */
        -:   14:/* { dg-options "-O2" } */
        -:   15:/* { dg-options "-O2 -m4" { target sh4-*-* } } */
        -:   16:extern void abort(void);
        -:   17:const char *dont_optimize_function_away;
        -:   18:
       10:   19:const char *use(const char *str) {
       10:   20:  dont_optimize_function_away = str;
       10:   21:  if (str[0] != 'v')
    #####:   22:    abort();
       10:   23:  if (str[1] < '1' || str[1] > '6')
    #####:   24:    abort();
       10:   25:  if (str[2])
    #####:   26:    abort();
      10*:   27:  return str[2] ? "notused" : "v6";
        -:   28:}
        -:   29:
        1:   30:const char *func(char *a, char *b) {
        -:   31:  char buf[128];
        -:   32:  unsigned char i;
        -:   33:  const char *result;
        -:   34:
        1:   35:  char *item[] = {
        -:   36:      "v1",
        -:   37:      "v2",
        -:   38:  };
        -:   39:
        1:   40:  buf[0] = 'v';
        1:   41:  buf[1] = '3';
        1:   42:  buf[2] = 0;
        -:   43:
        3:   44:  for (i = 0; i < 2; i++) {
        -:   45:    /* bug is: following line passes wild pointer to use() on sh4 -O2 */
        2:   46:    result = use(item[i]);
        -:   47:
        2:   48:    use(buf);
        2:   49:    use(a);
        2:   50:    use(b);
        2:   51:    result = use(result);
        -:   52:  }
        1:   53:  return result;
        -:   54:}
        -:   55:
        1:   56:int main() {
        1:   57:  func("v4", "v5");
        1:   58:  return 0;
        -:   59:}
