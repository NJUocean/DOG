        -:    0:Source:120.c
        -:    0:Graph:120.gcno
        -:    0:Data:120.gcda
        -:    0:Runs:1
        -:    1:/* Test __atomic routines for existence and proper execution on 2 byte
        -:    2:   values with each valid memory model.  */
        -:    3:/* { dg-do run } */
        -:    4:/* { dg-require-effective-target sync_char_short } */
        -:    5:
        -:    6:/* Test the execution of the __atomic_load_n builtin for a short.  */
        -:    7:
        -:    8:extern void abort(void);
        -:    9:
        -:   10:short v, count;
        -:   11:
        1:   12:int main() {
        1:   13:  v = 0;
        1:   14:  count = 0;
        -:   15:
        1:   16:  if (__atomic_load_n(&v, __ATOMIC_RELAXED) != count++)
    #####:   17:    abort();
        -:   18:  else
        1:   19:    v++;
        -:   20:
        1:   21:  if (__atomic_load_n(&v, __ATOMIC_ACQUIRE) != count++)
    #####:   22:    abort();
        -:   23:  else
        1:   24:    v++;
        -:   25:
        1:   26:  if (__atomic_load_n(&v, __ATOMIC_CONSUME) != count++)
    #####:   27:    abort();
        -:   28:  else
        1:   29:    v++;
        -:   30:
        1:   31:  if (__atomic_load_n(&v, __ATOMIC_SEQ_CST) != count++)
    #####:   32:    abort();
        -:   33:  else
        1:   34:    v++;
        -:   35:
        -:   36:  /* Now test the generic variants.  */
        -:   37:
        1:   38:  __atomic_load(&v, &count, __ATOMIC_RELAXED);
        1:   39:  if (count != v)
    #####:   40:    abort();
        -:   41:  else
        1:   42:    v++;
        -:   43:
        1:   44:  __atomic_load(&v, &count, __ATOMIC_ACQUIRE);
        1:   45:  if (count != v)
    #####:   46:    abort();
        -:   47:  else
        1:   48:    v++;
        -:   49:
        1:   50:  __atomic_load(&v, &count, __ATOMIC_CONSUME);
        1:   51:  if (count != v)
    #####:   52:    abort();
        -:   53:  else
        1:   54:    v++;
        -:   55:
        1:   56:  __atomic_load(&v, &count, __ATOMIC_SEQ_CST);
        1:   57:  if (count != v)
    #####:   58:    abort();
        -:   59:  else
        1:   60:    v++;
        -:   61:
        1:   62:  return 0;
        -:   63:}
