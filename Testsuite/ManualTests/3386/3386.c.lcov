    1|       |/* { dg-require-stack-size "0x80100" } */
    2|       |
    3|       |/* Like pr28982a.c, but with the spill slots outside the range of
    4|       |   a single sp-based load on ARM.  This test tests for cases where
    5|       |   the addresses in the base and index reloads require further reloads.  */
    6|    122|#define NITER 4
    7|    123|#define NVARS 20
    8|       |#define MULTI(X)                                                               \
    9|      7|  X(0), X(1), X(2), X(3), X(4), X(5), X(6), X(7), X(8), X(9), X(10), X(11),    \
   10|      7|      X(12), X(13), X(14), X(15), X(16), X(17), X(18), X(19)
   11|       |
   12|     20|#define DECLAREI(INDEX) inc##INDEX = incs[INDEX]
   13|     20|#define DECLAREF(INDEX) *ptr##INDEX = ptrs[INDEX], result##INDEX = 0
   14|      4|#define LOOP(INDEX) result##INDEX += *ptr##INDEX, ptr##INDEX += inc##INDEX
   15|     20|#define COPYOUT(INDEX) results[INDEX] = result##INDEX
   16|       |
   17|       |float *ptrs[NVARS];
   18|       |float results[NVARS];
   19|       |int incs[NVARS];
   20|       |
   21|       |struct big {
   22|       |  int i[0x10000];
   23|       |};
   24|      1|void __attribute__((noinline)) bar(struct big b) { incs[0] += b.i[0]; }
   25|       |
   26|      1|void __attribute__((noinline)) foo(int n) {
   27|      1|  struct big b = {};
   28|     20|  int MULTI(DECLAREI);
   29|     20|  float MULTI(DECLAREF);
   30|      5|  while (n--)
   31|     77|    MULTI(LOOP);
   32|     20|  MULTI(COPYOUT);
   33|      1|  bar(b);
   34|      1|}
   35|       |
   36|       |float input[NITER * NVARS];
   37|       |
   38|      1|int main(void) {
   39|      1|  int i;
   40|      1|
   41|     21|  for (i = 0; i < NVARS; i++)
   42|     20|    ptrs[i] = input + i, incs[i] = i;
   43|     81|  for (i = 0; i < NITER * NVARS; i++)
   44|     80|    input[i] = i;
   45|      1|  foo(NITER);
   46|     21|  for (i = 0; i < NVARS; i++)
   47|     20|    if (results[i] != i * NITER * (NITER + 1) / 2)
   48|      0|      return 1;
   49|      1|  return 0;
   50|      1|}

