    1|       |/* { dg-do run } */
    2|       |
    3|       |#define vector(elcount, type)                                                  \
    4|      5|  __attribute__((vector_size((elcount) * sizeof(type)))) type
    5|       |
    6|     12|#define vidx(type, vec, idx) (*((type *)&(vec) + idx))
    7|       |#define schar signed char
    8|       |#define uchar unsigned char
    9|       |
   10|      4|#define ch14 1, 2, 3, 4
   11|      4|#define ch1 1, 1, 1, 1
   12|      4|#define chm1 -1, -1, -1, -1
   13|       |
   14|      1|int main(int argc, char *argv[]) {
   15|      1|  vector(16, uchar) vuchar = {ch14, ch14, ch14, ch14};
   16|      1|  vector(16, schar) vchar0 = {ch1, ch1, ch1, ch1};
   17|      1|  vector(16, schar) vchar1 = {chm1, chm1, chm1, chm1};
   18|      1|
   19|      1|  vector(16, schar) i1, i2, i3;
   20|      1|  vector(16, uchar) u1, u2, u3;
   21|      1|
   22|      1|  i1 = vchar1 << vchar0;
   23|      1|
   24|      1|  if (vidx(schar, i1, 0) != ((schar)-1 << (schar)1))
   25|      0|    __builtin_abort();
   26|      1|  if (vidx(schar, i1, 1) != ((schar)-1 << (schar)1))
   27|      0|    __builtin_abort();
   28|      1|  if (vidx(schar, i1, 2) != ((schar)-1 << (schar)1))
   29|      0|    __builtin_abort();
   30|      1|  if (vidx(schar, i1, 3) != ((schar)-1 << (schar)1))
   31|      0|    __builtin_abort();
   32|      1|  u1 = vuchar << vchar0;
   33|      1|
   34|      1|  if (vidx(uchar, u1, 0) != ((uchar)1 << (schar)1))
   35|      0|    __builtin_abort();
   36|      1|  if (vidx(uchar, u1, 1) != ((uchar)2 << (schar)1))
   37|      0|    __builtin_abort();
   38|      1|  if (vidx(uchar, u1, 2) != ((uchar)3 << (schar)1))
   39|      0|    __builtin_abort();
   40|      1|  if (vidx(uchar, u1, 3) != ((uchar)4 << (schar)1))
   41|      0|    __builtin_abort();
   42|      1|
   43|      1|  i2 = vchar1 >> vuchar;
   44|      1|
   45|      1|  if (vidx(schar, i2, 0) != ((schar)-1 >> (uchar)1))
   46|      0|    __builtin_abort();
   47|      1|  if (vidx(schar, i2, 1) != ((schar)-1 >> (uchar)2))
   48|      0|    __builtin_abort();
   49|      1|  if (vidx(schar, i2, 2) != ((schar)-1 >> (uchar)3))
   50|      0|    __builtin_abort();
   51|      1|  if (vidx(schar, i2, 3) != ((schar)-1 >> (uchar)4))
   52|      0|    __builtin_abort();
   53|      1|
   54|      1|  vchar1 >>= vuchar;
   55|      1|  vuchar <<= vchar0;
   56|      1|  vuchar <<= vchar1;
   57|      1|
   58|      1|  return 0;
   59|      1|}

