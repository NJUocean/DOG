        -:    0:Source:22.c
        -:    0:Graph:22.gcno
        -:    0:Data:22.gcda
        -:    0:Runs:1
        -:    1:/* Testing save/restore of floating point caller-save registers, on ia64
        -:    2:   this resulted in bad code.  Not all targets will use caller-save regs.  */
        -:    3:
        -:    4:/* { dg-do run } */
        -:    5:/* { dg-options "-O2" } */
        -:    6:/* { dg-options "-O2 -minline-float-divide-max-throughput" { target ia64-*-* } }
        -:    7: */
        -:    8:
        -:    9:/* Testing save/restore of floating point caller-save registers on ia64.  */
        -:   10:
        -:   11:extern void abort(void);
        -:   12:
        4:   13:double foo(double a, double b, double c) { return (a + b + c); }
        -:   14:
        1:   15:int main() {
        -:   16:  double f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;
        -:   17:  double f11, f12, f13, f14, f15, f16, f17, f18, f19, f20;
        -:   18:  double f21, f22, f23, f24, f25, f26, f27, f28, f29, f30;
        -:   19:  double x;
        -:   20:  int i, j, k;
        -:   21:
        1:   22:  f1 = 0.1;
        1:   23:  f2 = 0.2;
        1:   24:  f3 = 0.3;
        1:   25:  f4 = 0.4;
        1:   26:  f5 = 0.5;
        1:   27:  f6 = 0.6;
        1:   28:  f7 = 0.7;
        1:   29:  f8 = 0.8;
        1:   30:  f9 = 0.9;
        1:   31:  f10 = 1.0;
        1:   32:  f11 = 1.1;
        1:   33:  f12 = 1.2;
        1:   34:  f13 = 1.3;
        1:   35:  f14 = 1.4;
        1:   36:  f15 = 1.5;
        1:   37:  f16 = 1.6;
        1:   38:  f17 = 1.7;
        1:   39:  f18 = 1.8;
        1:   40:  f19 = 1.9;
        1:   41:  f20 = 2.0;
        1:   42:  f21 = 2.1;
        1:   43:  f22 = 2.2;
        1:   44:  f23 = 2.3;
        1:   45:  f24 = 2.4;
        1:   46:  f25 = 2.5;
        1:   47:  f26 = 2.6;
        1:   48:  f27 = 2.7;
        1:   49:  f28 = 2.8;
        1:   50:  f29 = 2.9;
        1:   51:  f30 = 3.0;
        -:   52:
        1:   53:  i = (int)foo(1.0, 1.0, 1.0);
        4:   54:  while (i > 0) {
        3:   55:    f1 = f2 / f3 * f30;
        3:   56:    f2 = f3 / f4 * f30;
        3:   57:    f3 = f4 / f5 * f30;
        3:   58:    f4 = f5 / f6 * f30;
        3:   59:    f5 = f6 / f7 * f30;
        3:   60:    f6 = f7 / f8 * f30;
        3:   61:    f7 = f8 / f9 * f30;
        3:   62:    f8 = f9 / f10 * f30;
        3:   63:    f9 = f10 / f11 * f30;
        3:   64:    f10 = f11 / f12 * f30;
        3:   65:    f11 = f12 / f13 * f30;
        3:   66:    f12 = f13 / f14 * f25;
        3:   67:    f13 = f14 / f15 * f30;
        3:   68:    f14 = f15 / f16 * f30;
        3:   69:    f15 = f16 / f17 * f30;
        3:   70:    f16 = f17 / f18 * f30;
        3:   71:    f17 = f18 / f19 * f30;
        3:   72:    f18 = f19 / f20 * f30;
        3:   73:    f19 = f20 / f21 * f30;
        3:   74:    f20 = f21 / f22 * f20;
        3:   75:    f21 = f22 / f23 * f30;
        3:   76:    f22 = f23 / f24 * f30;
        3:   77:    f23 = f24 / f25 * f30;
        3:   78:    f24 = f25 / f26 * f30;
        3:   79:    f25 = f26 / f27 * f30;
        3:   80:    f26 = f27 / f28 * f30;
        3:   81:    f27 = f28 / f29 * f30;
        3:   82:    f28 = f29 / f30 * f30;
        3:   83:    f29 = f30 / f1 * f30;
        3:   84:    f30 = f1 / f2 * f30;
        3:   85:    x = foo(f1, f2, f3);
        3:   86:    i = i - 1;
        -:   87:  }
        1:   88:  x = (f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10) *
        1:   89:      (f11 + f12 + f13 + f14 + f15 + f16 + f17 + f18 + f19 + f20) *
        1:   90:      (f21 + f22 + f23 + f24 + f25 + f26 + f27 + f28 + f29 + f30);
        -:   91:
        -:   92:  /* Exact value is not needed, on IA64 it is massively off. */
        1:   93:  if (x < 19503.0 || x > 19504.0)
    #####:   94:    abort();
        1:   95:  return 0;
        -:   96:}
