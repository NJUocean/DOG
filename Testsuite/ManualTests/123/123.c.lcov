    1|       |/* Test __atomic routines for existence and proper execution on 8 byte
    2|       |   values with each valid memory model.  */
    3|       |/* { dg-do run } */
    4|       |/* { dg-require-effective-target sync_long_long_runtime } */
    5|       |/* { dg-options "" } */
    6|       |/* { dg-options "-march=pentium" { target { { i?86-*-* x86_64-*-* } && ia32 } }
    7|       | * } */
    8|       |
    9|       |extern void abort(void);
   10|       |
   11|       |long long v, count;
   12|       |
   13|      1|int main() {
   14|      1|  v = 0;
   15|      1|  count = 0;
   16|      1|
   17|      1|  if (__atomic_load_n(&v, __ATOMIC_RELAXED) != count++)
   18|      0|    abort();
   19|      1|  else
   20|      1|    v++;
   21|      1|
   22|      1|  if (__atomic_load_n(&v, __ATOMIC_ACQUIRE) != count++)
   23|      0|    abort();
   24|      1|  else
   25|      1|    v++;
   26|      1|
   27|      1|  if (__atomic_load_n(&v, __ATOMIC_CONSUME) != count++)
   28|      0|    abort();
   29|      1|  else
   30|      1|    v++;
   31|      1|
   32|      1|  if (__atomic_load_n(&v, __ATOMIC_SEQ_CST) != count++)
   33|      0|    abort();
   34|      1|  else
   35|      1|    v++;
   36|      1|
   37|      1|  /* Now test the generic variants.  */
   38|      1|
   39|      1|  __atomic_load(&v, &count, __ATOMIC_RELAXED);
   40|      1|  if (count != v)
   41|      0|    abort();
   42|      1|  else
   43|      1|    v++;
   44|      1|
   45|      1|  __atomic_load(&v, &count, __ATOMIC_ACQUIRE);
   46|      1|  if (count != v)
   47|      0|    abort();
   48|      1|  else
   49|      1|    v++;
   50|      1|
   51|      1|  __atomic_load(&v, &count, __ATOMIC_CONSUME);
   52|      1|  if (count != v)
   53|      0|    abort();
   54|      1|  else
   55|      1|    v++;
   56|      1|
   57|      1|  __atomic_load(&v, &count, __ATOMIC_SEQ_CST);
   58|      1|  if (count != v)
   59|      0|    abort();
   60|      1|  else
   61|      1|    v++;
   62|      1|
   63|      1|  return 0;
   64|      1|}

