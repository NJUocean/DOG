    1|       |/* PR target/50310 */
    2|       |
    3|       |extern void abort(void);
    4|       |double s1[4], s2[4], s3[64];
    5|       |
    6|      1|void foo(void) {
    7|      1|  int i;
    8|      5|  for (i = 0; i < 4; i++)
    9|      4|    s3[0 * 4 + i] = __builtin_isgreater(s1[i], s2[i]) ? -1.0 : 0.0;
   10|      5|  for (i = 0; i < 4; i++)
   11|      4|    s3[1 * 4 + i] = (!__builtin_isgreater(s1[i], s2[i])) ? -1.0 : 0.0;
   12|      5|  for (i = 0; i < 4; i++)
   13|      4|    s3[2 * 4 + i] = __builtin_isgreaterequal(s1[i], s2[i]) ? -1.0 : 0.0;
   14|      5|  for (i = 0; i < 4; i++)
   15|      4|    s3[3 * 4 + i] = (!__builtin_isgreaterequal(s1[i], s2[i])) ? -1.0 : 0.0;
   16|      5|  for (i = 0; i < 4; i++)
   17|      4|    s3[4 * 4 + i] = __builtin_isless(s1[i], s2[i]) ? -1.0 : 0.0;
   18|      5|  for (i = 0; i < 4; i++)
   19|      4|    s3[5 * 4 + i] = (!__builtin_isless(s1[i], s2[i])) ? -1.0 : 0.0;
   20|      5|  for (i = 0; i < 4; i++)
   21|      4|    s3[6 * 4 + i] = __builtin_islessequal(s1[i], s2[i]) ? -1.0 : 0.0;
   22|      5|  for (i = 0; i < 4; i++)
   23|      4|    s3[7 * 4 + i] = (!__builtin_islessequal(s1[i], s2[i])) ? -1.0 : 0.0;
   24|      5|  for (i = 0; i < 4; i++)
   25|      4|    s3[8 * 4 + i] = __builtin_islessgreater(s1[i], s2[i]) ? -1.0 : 0.0;
   26|      5|  for (i = 0; i < 4; i++)
   27|      4|    s3[9 * 4 + i] = (!__builtin_islessgreater(s1[i], s2[i])) ? -1.0 : 0.0;
   28|      5|  for (i = 0; i < 4; i++)
   29|      4|    s3[10 * 4 + i] = __builtin_isunordered(s1[i], s2[i]) ? -1.0 : 0.0;
   30|      5|  for (i = 0; i < 4; i++)
   31|      4|    s3[11 * 4 + i] = (!__builtin_isunordered(s1[i], s2[i])) ? -1.0 : 0.0;
   32|      5|  for (i = 0; i < 4; i++)
   33|      4|    s3[12 * 4 + i] = s1[i] > s2[i] ? -1.0 : 0.0;
   34|      5|  for (i = 0; i < 4; i++)
   35|      4|    s3[13 * 4 + i] = s1[i] <= s2[i] ? -1.0 : 0.0;
   36|      5|  for (i = 0; i < 4; i++)
   37|      4|    s3[14 * 4 + i] = s1[i] < s2[i] ? -1.0 : 0.0;
   38|      5|  for (i = 0; i < 4; i++)
   39|      4|    s3[15 * 4 + i] = s1[i] >= s2[i] ? -1.0 : 0.0;
   40|      1|}
   41|       |
   42|      1|int main() {
   43|      1|  int i;
   44|      1|  s1[0] = 5.0;
   45|      1|  s1[1] = 6.0;
   46|      1|  s1[2] = 5.0;
   47|      1|  s1[3] = __builtin_nan("");
   48|      1|  s2[0] = 6.0;
   49|      1|  s2[1] = 5.0;
   50|      1|  s2[2] = 5.0;
   51|      1|  s2[3] = 5.0;
   52|      1|  asm volatile("" : : : "memory");
   53|      1|  foo();
   54|      1|  asm volatile("" : : : "memory");
   55|     65|  for (i = 0; i < 16 * 4; i++)
   56|     64|    if (i >= 12 * 4 && (i & 3) == 3) {
   57|      4|      if (s3[i] != 0.0)
   58|      0|        abort();
   59|     60|    } else {
   60|     60|      static int masks[] = {2, 2 | 4, 1, 1 | 4, 1 | 2, 8, 2, 1};
   61|     60|      if (s3[i] != (((1 << (i & 3)) & ((i & 4) ? ~masks[i / 8] : masks[i / 8]))
   62|     60|                        ? -1.0
   63|     60|                        : 0.0))
   64|      0|        abort();
   65|     60|    }
   66|      1|  return 0;
   67|      1|}

