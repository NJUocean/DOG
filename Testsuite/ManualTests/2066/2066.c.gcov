        -:    0:Source:2066.c
        -:    0:Graph:2066.gcno
        -:    0:Data:2066.gcda
        -:    0:Runs:1
        -:    1:/* PR target/50310 */
        -:    2:
        -:    3:extern void abort(void);
        -:    4:double s1[4], s2[4], s3[64];
        -:    5:
        1:    6:void foo(void) {
        -:    7:  int i;
        5:    8:  for (i = 0; i < 4; i++)
        4:    9:    s3[0 * 4 + i] = __builtin_isgreater(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   10:  for (i = 0; i < 4; i++)
        4:   11:    s3[1 * 4 + i] = (!__builtin_isgreater(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   12:  for (i = 0; i < 4; i++)
        4:   13:    s3[2 * 4 + i] = __builtin_isgreaterequal(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   14:  for (i = 0; i < 4; i++)
        4:   15:    s3[3 * 4 + i] = (!__builtin_isgreaterequal(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   16:  for (i = 0; i < 4; i++)
        4:   17:    s3[4 * 4 + i] = __builtin_isless(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   18:  for (i = 0; i < 4; i++)
        4:   19:    s3[5 * 4 + i] = (!__builtin_isless(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   20:  for (i = 0; i < 4; i++)
        4:   21:    s3[6 * 4 + i] = __builtin_islessequal(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   22:  for (i = 0; i < 4; i++)
        4:   23:    s3[7 * 4 + i] = (!__builtin_islessequal(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   24:  for (i = 0; i < 4; i++)
        4:   25:    s3[8 * 4 + i] = __builtin_islessgreater(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   26:  for (i = 0; i < 4; i++)
        4:   27:    s3[9 * 4 + i] = (!__builtin_islessgreater(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   28:  for (i = 0; i < 4; i++)
        4:   29:    s3[10 * 4 + i] = __builtin_isunordered(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   30:  for (i = 0; i < 4; i++)
        4:   31:    s3[11 * 4 + i] = (!__builtin_isunordered(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   32:  for (i = 0; i < 4; i++)
        4:   33:    s3[12 * 4 + i] = s1[i] > s2[i] ? -1.0 : 0.0;
        5:   34:  for (i = 0; i < 4; i++)
        4:   35:    s3[13 * 4 + i] = s1[i] <= s2[i] ? -1.0 : 0.0;
        5:   36:  for (i = 0; i < 4; i++)
        4:   37:    s3[14 * 4 + i] = s1[i] < s2[i] ? -1.0 : 0.0;
        5:   38:  for (i = 0; i < 4; i++)
        4:   39:    s3[15 * 4 + i] = s1[i] >= s2[i] ? -1.0 : 0.0;
        1:   40:}
        -:   41:
        1:   42:int main() {
        -:   43:  int i;
        1:   44:  s1[0] = 5.0;
        1:   45:  s1[1] = 6.0;
        1:   46:  s1[2] = 5.0;
        1:   47:  s1[3] = __builtin_nan("");
        1:   48:  s2[0] = 6.0;
        1:   49:  s2[1] = 5.0;
        1:   50:  s2[2] = 5.0;
        1:   51:  s2[3] = 5.0;
        1:   52:  asm volatile("" : : : "memory");
        1:   53:  foo();
        1:   54:  asm volatile("" : : : "memory");
       65:   55:  for (i = 0; i < 16 * 4; i++)
       64:   56:    if (i >= 12 * 4 && (i & 3) == 3) {
        4:   57:      if (s3[i] != 0.0)
    #####:   58:        abort();
        -:   59:    } else {
        -:   60:      static int masks[] = {2, 2 | 4, 1, 1 | 4, 1 | 2, 8, 2, 1};
      120:   61:      if (s3[i] != (((1 << (i & 3)) & ((i & 4) ? ~masks[i / 8] : masks[i / 8]))
       60:   62:                        ? -1.0
       60:   63:                        : 0.0))
    #####:   64:        abort();
        -:   65:    }
        1:   66:  return 0;
        -:   67:}
