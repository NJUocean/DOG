        -:    0:Source:3409.c
        -:    0:Graph:3409.gcno
        -:    0:Data:3409.gcda
        -:    0:Runs:1
        -:    1:extern void abort(void);
        -:    2:
        -:    3:typedef float v4flt __attribute__((vector_size(16)));
        -:    4:
        1:    5:void __attribute__((noinline)) foo(float *dst, float **src, int a, int n) {
        -:    6:  int i, j;
        1:    7:  int z = sizeof(v4flt) / sizeof(float);
        1:    8:  unsigned m = sizeof(v4flt) - 1;
        -:    9:
       1*:   10:  for (j = 0; j < n && (((unsigned long)dst + j) & m); ++j) {
    #####:   11:    float t = src[0][j];
    #####:   12:    for (i = 1; i < a; ++i)
    #####:   13:      t += src[i][j];
    #####:   14:    dst[j] = t;
        -:   15:  }
        -:   16:
        2:   17:  for (; j < (n - (4 * z - 1)); j += 4 * z) {
        1:   18:    v4flt t0 = *(v4flt *)(src[0] + j + 0 * z);
        1:   19:    v4flt t1 = *(v4flt *)(src[0] + j + 1 * z);
        1:   20:    v4flt t2 = *(v4flt *)(src[0] + j + 2 * z);
        1:   21:    v4flt t3 = *(v4flt *)(src[0] + j + 3 * z);
        2:   22:    for (i = 1; i < a; ++i) {
        1:   23:      t0 += *(v4flt *)(src[i] + j + 0 * z);
        1:   24:      t1 += *(v4flt *)(src[i] + j + 1 * z);
        1:   25:      t2 += *(v4flt *)(src[i] + j + 2 * z);
        1:   26:      t3 += *(v4flt *)(src[i] + j + 3 * z);
        -:   27:    }
        1:   28:    *(v4flt *)(dst + j + 0 * z) = t0;
        1:   29:    *(v4flt *)(dst + j + 1 * z) = t1;
        1:   30:    *(v4flt *)(dst + j + 2 * z) = t2;
        1:   31:    *(v4flt *)(dst + j + 3 * z) = t3;
        -:   32:  }
       1*:   33:  for (; j < n; ++j) {
    #####:   34:    float t = src[0][j];
    #####:   35:    for (i = 1; i < a; ++i)
    #####:   36:      t += src[i][j];
    #####:   37:    dst[j] = t;
        -:   38:  }
        1:   39:}
        -:   40:
        -:   41:float buffer[64];
        -:   42:
        1:   43:int main(void) {
        -:   44:  int i;
        -:   45:  float *dst, *src[2];
        -:   46:  char *cptr;
        -:   47:
        1:   48:  cptr = (char *)buffer;
        1:   49:  cptr += (-(long int)buffer & (16 * sizeof(float) - 1));
        1:   50:  dst = (float *)cptr;
        1:   51:  src[0] = dst + 16;
        1:   52:  src[1] = dst + 32;
       17:   53:  for (i = 0; i < 16; ++i) {
       16:   54:    src[0][i] = (float)i + 11 * (float)i;
       16:   55:    src[1][i] = (float)i + 12 * (float)i;
        -:   56:  }
        1:   57:  foo(dst, src, 2, 16);
       17:   58:  for (i = 0; i < 16; ++i) {
       16:   59:    float e = (float)i + 11 * (float)i + (float)i + 12 * (float)i;
       16:   60:    if (dst[i] != e)
    #####:   61:      abort();
        -:   62:  }
        1:   63:  return 0;
        -:   64:}
