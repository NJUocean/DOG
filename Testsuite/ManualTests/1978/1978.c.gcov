        -:    0:Source:1978.c
        -:    0:Graph:1978.gcno
        -:    0:Data:1978.gcda
        -:    0:Runs:1
        -:    1:/* Copyright (C) 2003  Free Software Foundation.
        -:    2:   by Roger Sayle <roger@eyesopen.com>, derived from mzero3.c
        -:    3:
        -:    4:   Constant folding of sin(-0.0), tan(-0.0) and atan(-0.0) should
        -:    5:   all return -0.0, for both double and float forms.  */
        -:    6:
        -:    7:void abort(void);
        -:    8:typedef __SIZE_TYPE__ size_t;
        -:    9:extern int memcmp(const void *, const void *, size_t);
        -:   10:
        -:   11:double sin(double);
        -:   12:double tan(double);
        -:   13:double atan(double);
        -:   14:
        -:   15:float sinf(float);
        -:   16:float tanf(float);
        -:   17:float atanf(float);
        -:   18:
        -:   19:void expectd(double, double);
        -:   20:void expectf(float, float);
        -:   21:
        6:   22:void expectd(double value, double expected) {
        6:   23:  if (value != expected ||
        6:   24:      memcmp((void *)&value, (void *)&expected, sizeof(double)) != 0)
    #####:   25:    abort();
        6:   26:}
        -:   27:
        6:   28:void expectf(float value, float expected) {
        6:   29:  if (value != expected ||
        6:   30:      memcmp((void *)&value, (void *)&expected, sizeof(float)) != 0)
    #####:   31:    abort();
        6:   32:}
        -:   33:
        1:   34:int main() {
        1:   35:  expectd(sin(0.0), 0.0);
        1:   36:  expectd(tan(0.0), 0.0);
        1:   37:  expectd(atan(0.0), 0.0);
        -:   38:
        1:   39:  expectd(sin(-0.0), -0.0);
        1:   40:  expectd(tan(-0.0), -0.0);
        1:   41:  expectd(atan(-0.0), -0.0);
        -:   42:
        1:   43:  expectf(sinf(0.0f), 0.0f);
        1:   44:  expectf(tanf(0.0f), 0.0f);
        1:   45:  expectf(atanf(0.0f), 0.0f);
        -:   46:
        1:   47:  expectf(sinf(-0.0f), -0.0f);
        1:   48:  expectf(tanf(-0.0f), -0.0f);
        1:   49:  expectf(atanf(-0.0f), -0.0f);
        -:   50:
        1:   51:  return 0;
        -:   52:}
