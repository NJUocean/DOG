        -:    0:Source:127.c
        -:    0:Graph:127.gcno
        -:    0:Data:127.gcda
        -:    0:Runs:1
        -:    1:/* Test __atomic routines for existence and proper execution on 8 byte
        -:    2:   values with each valid memory model.  */
        -:    3:/* { dg-do run } */
        -:    4:/* { dg-require-effective-target sync_long_long_runtime } */
        -:    5:/* { dg-options "" } */
        -:    6:/* { dg-options "-march=pentium" { target { { i?86-*-* x86_64-*-* } && ia32 } }
        -:    7: * } */
        -:    8:
        -:    9:/* Test the execution of the __atomic_store_n builtin for a long long.  */
        -:   10:
        -:   11:extern void abort(void);
        -:   12:
        -:   13:long long v, count;
        -:   14:
        1:   15:int main() {
        1:   16:  v = 0;
        1:   17:  count = 0;
        -:   18:
        1:   19:  __atomic_store_n(&v, count + 1, __ATOMIC_RELAXED);
        1:   20:  if (v != ++count)
    #####:   21:    abort();
        -:   22:
        1:   23:  __atomic_store_n(&v, count + 1, __ATOMIC_RELEASE);
        1:   24:  if (v != ++count)
    #####:   25:    abort();
        -:   26:
        1:   27:  __atomic_store_n(&v, count + 1, __ATOMIC_SEQ_CST);
        1:   28:  if (v != ++count)
    #####:   29:    abort();
        -:   30:
        -:   31:  /* Now test the generic variant.  */
        1:   32:  count++;
        -:   33:
        1:   34:  __atomic_store(&v, &count, __ATOMIC_RELAXED);
        1:   35:  if (v != count++)
    #####:   36:    abort();
        -:   37:
        1:   38:  __atomic_store(&v, &count, __ATOMIC_RELEASE);
        1:   39:  if (v != count++)
    #####:   40:    abort();
        -:   41:
        1:   42:  __atomic_store(&v, &count, __ATOMIC_SEQ_CST);
        1:   43:  if (v != count)
    #####:   44:    abort();
        -:   45:
        1:   46:  return 0;
        -:   47:}
