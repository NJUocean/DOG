        -:    0:Source:661.c
        -:    0:Graph:661.gcno
        -:    0:Data:661.gcda
        -:    0:Runs:1
        -:    1:/* Limit this to known non-strict alignment targets.  */
        -:    2:/* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */
        -:    3:/* { dg-options "-O -fsanitize=alignment -fsanitize-recover=alignment
        -:    4: * -Wno-address-of-packed-member" } */
        -:    5:
        -:    6:struct S {
        -:    7:  int a;
        -:    8:  char b;
        -:    9:  long long c;
        -:   10:  short d[10];
        -:   11:};
        -:   12:struct T {
        -:   13:  char a;
        -:   14:  long long b;
        -:   15:};
        -:   16:struct U {
        -:   17:  char a;
        -:   18:  int b;
        -:   19:  int c;
        -:   20:  long long d;
        -:   21:  struct S e;
        -:   22:  struct T f;
        -:   23:} __attribute__((packed));
        -:   24:struct V {
        -:   25:  long long a;
        -:   26:  struct S b;
        -:   27:  struct T c;
        -:   28:  struct U u;
        -:   29:} v;
        -:   30:
        1:   31:__attribute__((noinline, noclone)) int foo(struct S *p) {
        -:   32:  volatile int i;
        1:   33:  i = p->a;
        1:   34:  i = p->a;
        1:   35:  i = p->a;
        1:   36:  i = p->a;
        1:   37:  return p->a;
        -:   38:}
        -:   39:
        1:   40:int main() {
        1:   41:  if (foo(&v.u.e))
    #####:   42:    __builtin_abort();
        1:   43:  return 0;
        -:   44:}
        -:   45:
        -:   46:/* { dg-output "\.c:14:\[0-9]*: \[^\n\r]*member access within misaligned address
        -:   47: * 0x\[0-9a-fA-F]* for type 'struct S', which requires \[48] byte alignment.*" }
        -:   48: */
        -:   49:/* { dg-output "\.c:15:\[0-9]*: \[^\n\r]*member access within misaligned address
        -:   50: * 0x\[0-9a-fA-F]* for type 'struct S', which requires \[48] byte alignment.*" }
        -:   51: */
        -:   52:/* { dg-output "\.c:16:\[0-9]*: \[^\n\r]*member access within misaligned address
        -:   53: * 0x\[0-9a-fA-F]* for type 'struct S', which requires \[48] byte alignment.*" }
        -:   54: */
        -:   55:/* { dg-output "\.c:17:\[0-9]*: \[^\n\r]*member access within misaligned address
        -:   56: * 0x\[0-9a-fA-F]* for type 'struct S', which requires \[48] byte alignment.*" }
        -:   57: */
        -:   58:/* { dg-output "\.c:18:\[0-9]*: \[^\n\r]*member access within misaligned address
        -:   59: * 0x\[0-9a-fA-F]* for type 'struct S', which requires \[48] byte alignment" }
        -:   60: */
