        -:    0:Source:3831.c
        -:    0:Graph:3831.gcno
        -:    0:Data:3831.gcda
        -:    0:Runs:1
        -:    1:/* PR tree-optimization/59643 */
        -:    2:
        -:    3:#define N 32
        -:    4:
        1:    5:__attribute__((noinline, noclone)) void foo(double *a, double *b, double *c,
        -:    6:                                            double d, double e, int n) {
        -:    7:  int i;
       31:    8:  for (i = 1; i < n - 1; i++)
       30:    9:    a[i] = d * (b[i] + c[i] + a[i - 1] + a[i + 1]) + e * a[i];
        1:   10:}
        -:   11:
        -:   12:double expected[] = {0.0,          10.0,         44.0,          110.0,
        -:   13:                     232.0,        490.0,        1020.0,        2078.0,
        -:   14:                     4152.0,       8314.0,       16652.0,       33326.0,
        -:   15:                     66664.0,      133354.0,     266748.0,      533534.0,
        -:   16:                     1067064.0,    2134138.0,    4268300.0,     8536622.0,
        -:   17:                     17073256.0,   34146538.0,   68293116.0,    136586270.0,
        -:   18:                     273172536.0,  546345082.0,  1092690188.0,  2185380398.0,
        -:   19:                     4370760808.0, 8741521642.0, 17483043324.0, 6.0};
        -:   20:
        1:   21:int main() {
        -:   22:  int i;
        -:   23:  double a[N], b[N], c[N];
        -:   24:  if (__DBL_MANT_DIG__ <= 35)
        -:   25:    return 0;
       33:   26:  for (i = 0; i < N; i++) {
       32:   27:    a[i] = (i & 3) * 2.0;
       32:   28:    b[i] = (i & 7) - 4;
       32:   29:    c[i] = i & 7;
        -:   30:  }
        1:   31:  foo(a, b, c, 2.0, 3.0, N);
       33:   32:  for (i = 0; i < N; i++)
       32:   33:    if (a[i] != expected[i])
    #####:   34:      __builtin_abort();
        1:   35:  return 0;
        -:   36:}
