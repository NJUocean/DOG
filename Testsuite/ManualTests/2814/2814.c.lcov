    1|       |/* { dg-options "(HAS_LXC1) -mhard-float -mlxc1-sxc1" } */
    2|       |/* { dg-skip-if "code quality test" { *-*-* } { "-O0" } { "" } } */
    3|       |/* { dg-final { scan-assembler "\tldxc1\t" } } */
    4|       |
    5|       |#ifdef __mips_no_lxc1_sxc1
    6|       |#error unexpected definition of __mips_no_lxc1_sxc1
    7|       |#endif
    8|       |
    9|       |double ldexp(double x, int exp);
   10|       |
   11|       |typedef struct {
   12|       |  double **rows;
   13|       |} d_mat_struct;
   14|       |
   15|       |typedef d_mat_struct d_mat_t[1];
   16|       |
   17|     16|#define d_mat_entry(mat, i, j) (*((mat)->rows[i] + (j)))
   18|       |
   19|       |double __attribute__((noinline))
   20|      1|ldxc1_test(int kappa, int zeros, double ctt, int *expo, d_mat_t r, double *s) {
   21|      1|  int kappa2 = kappa;
   22|      1|  double tmp = 0.0;
   23|      1|
   24|     17|  do {
   25|     17|    kappa--;
   26|     17|    if (kappa > zeros + 1) {
   27|     16|      tmp = d_mat_entry(r, kappa - 1, kappa - 1) * ctt;
   28|     16|      tmp = ldexp(tmp, (expo[kappa - 1] - expo[kappa2]));
   29|     16|    }
   30|     17|  } while ((kappa >= zeros + 2) && (s[kappa - 1] <= tmp));
   31|      1|
   32|      1|  return tmp;
   33|      1|}
   34|       |
   35|     22|#define SIZE 20
   36|       |
   37|      1|int main(void) {
   38|      1|  int kappa = SIZE - 1;
   39|      1|  int zeros = 1;
   40|      1|  double ctt = 2;
   41|      1|
   42|      1|  int expo[SIZE] = {0};
   43|      1|  double s[SIZE] = {0};
   44|      1|  double rows_data[SIZE][SIZE] = {0};
   45|      1|  double *rows[SIZE];
   46|      1|
   47|     21|  for (int i = 0; i < SIZE; i++)
   48|     20|    rows[i] = rows_data[i];
   49|      1|
   50|      1|  d_mat_t r = {rows};
   51|      1|
   52|      1|  ldxc1_test(kappa, zeros, ctt, expo, r, s);
   53|      1|  return 0;
   54|      1|}

