    1|       |/* { dg-do run } */
    2|       |/* { dg-options "-O2 -ftree-vectorize -fno-inline -fno-vect-cost-model
    3|       | * -save-temps" } */
    4|       |
    5|       |#pragma GCC target "+nosve"
    6|       |
    7|       |extern void abort(void);
    8|       |double fmax(double, double);
    9|       |float fmaxf(float, float);
   10|       |double fmin(double, double);
   11|       |float fminf(float, float);
   12|       |
   13|      8|#define isnan __builtin_isnan
   14|      4|#define isinf __builtin_isinf
   15|       |
   16|      4|#define NAN __builtin_nan("")
   17|      2|#define INFINITY __builtin_inf()
   18|       |
   19|     22|#define NUM_ELEMS(TYPE) (16 / sizeof(TYPE))
   20|       |
   21|       |#define DEF_MAXMIN(TYPE, FUN)                                                  \
   22|       |  void test_##FUN(TYPE *__restrict__ r, TYPE *__restrict__ a,                  \
   23|      6|                  TYPE *__restrict__ b) {                                      \
   24|      6|    int i;                                                                     \
   25|     22|    for (i = 0; i < NUM_ELEMS(TYPE); i++)                                      \
   26|     16|      r[i] = FUN(a[i], b[i]);                                                  \
   27|      6|  }
  ------------------
  | test_fmaxf:
  |   23|      1|                  TYPE *__restrict__ b) {                                      \
  |   24|      1|    int i;                                                                     \
  |   25|      5|    for (i = 0; i < NUM_ELEMS(TYPE); i++)                                      \
  |   26|      4|      r[i] = FUN(a[i], b[i]);                                                  \
  |   27|      1|  }
  ------------------
  | test_fmax:
  |   23|      2|                  TYPE *__restrict__ b) {                                      \
  |   24|      2|    int i;                                                                     \
  |   25|      6|    for (i = 0; i < NUM_ELEMS(TYPE); i++)                                      \
  |   26|      4|      r[i] = FUN(a[i], b[i]);                                                  \
  |   27|      2|  }
  ------------------
  | test_fminf:
  |   23|      1|                  TYPE *__restrict__ b) {                                      \
  |   24|      1|    int i;                                                                     \
  |   25|      5|    for (i = 0; i < NUM_ELEMS(TYPE); i++)                                      \
  |   26|      4|      r[i] = FUN(a[i], b[i]);                                                  \
  |   27|      1|  }
  ------------------
  | test_fmin:
  |   23|      2|                  TYPE *__restrict__ b) {                                      \
  |   24|      2|    int i;                                                                     \
  |   25|      6|    for (i = 0; i < NUM_ELEMS(TYPE); i++)                                      \
  |   26|      4|      r[i] = FUN(a[i], b[i]);                                                  \
  |   27|      2|  }
  ------------------
   28|       |
   29|       |DEF_MAXMIN(float, fmaxf)
   30|       |DEF_MAXMIN(double, fmax)
   31|       |
   32|       |DEF_MAXMIN(float, fminf)
   33|       |DEF_MAXMIN(double, fmin)
   34|       |
   35|      1|int main() {
   36|      1|  float a_f[4] = {4, NAN, -3, INFINITY};
   37|      1|  float b_f[4] = {1, 7, NAN, 0};
   38|      1|  float r_f[4];
   39|      1|  double a_d[4] = {4, NAN, -3, INFINITY};
   40|      1|  double b_d[4] = {1, 7, NAN, 0};
   41|      1|  double r_d[4];
   42|      1|
   43|      1|  test_fmaxf(r_f, a_f, b_f);
   44|      1|  if (r_f[0] != 4 || isnan(r_f[1]) || isnan(r_f[2]) || !isinf(r_f[3]))
   45|      0|    abort();
   46|      1|
   47|      1|  test_fminf(r_f, a_f, b_f);
   48|      1|  if (r_f[0] != 1 || isnan(r_f[1]) || isnan(r_f[2]) || isinf(r_f[3]))
   49|      0|    abort();
   50|      1|
   51|      1|  test_fmax(r_d, a_d, b_d);
   52|      1|  test_fmax(&r_d[2], &a_d[2], &b_d[2]);
   53|      1|  if (r_d[0] != 4 || isnan(r_d[1]) || isnan(r_d[2]) || !isinf(r_d[3]))
   54|      0|    abort();
   55|      1|
   56|      1|  test_fmin(r_d, a_d, b_d);
   57|      1|  test_fmin(&r_d[2], &a_d[2], &b_d[2]);
   58|      1|  if (r_d[0] != 1 || isnan(r_d[1]) || isnan(r_d[2]) || isinf(r_d[3]))
   59|      0|    abort();
   60|      1|
   61|      1|  return 0;
   62|      1|}
   63|       |
   64|       |/* { dg-final { scan-assembler-times "fmaxnm\tv\[0-9\]+\.4s, v\[0-9\]+\.4s,
   65|       | * v\[0-9\]+\.4s" 1 } } */
   66|       |/* { dg-final { scan-assembler-times "fmaxnm\tv\[0-9\]+\.2d, v\[0-9\]+\.2d,
   67|       | * v\[0-9\]+\.2d" 1 } } */
   68|       |
   69|       |/* { dg-final { scan-assembler-times "fminnm\tv\[0-9\]+\.4s, v\[0-9\]+\.4s,
   70|       | * v\[0-9\]+\.4s" 1 } } */
   71|       |/* { dg-final { scan-assembler-times "fminnm\tv\[0-9\]+\.2d, v\[0-9\]+\.2d,
   72|       | * v\[0-9\]+\.2d" 1 } } */

