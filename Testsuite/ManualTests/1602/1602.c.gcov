        -:    0:Source:1602.c
        -:    0:Graph:1602.gcno
        -:    0:Data:1602.gcda
        -:    0:Runs:1
        -:    1:/* PR rtl-optimization/71532 */
        -:    2:/* { dg-do run } */
        -:    3:/* { dg-additional-options "-mtune=slm" { target i?86-*-* x86_64-*-* } } */
        -:    4:
        1:    5:__attribute__((noinline, noclone, pure)) int foo(int a, int b, int c, int d,
        -:    6:                                                 int e, int f, int g, int h,
        -:    7:                                                 int i, int j, int k, int l) {
        1:    8:  a++;
        1:    9:  b++;
        1:   10:  c++;
        1:   11:  d++;
        1:   12:  e++;
        1:   13:  f++;
        1:   14:  g++;
        1:   15:  h++;
        1:   16:  i++;
        1:   17:  j++;
        1:   18:  k++;
        1:   19:  l++;
        1:   20:  asm volatile("" : : "g"(&a), "g"(&b), "g"(&c), "g"(&d) : "memory");
        1:   21:  asm volatile("" : : "g"(&e), "g"(&f), "g"(&g), "g"(&h) : "memory");
        1:   22:  asm volatile("" : : "g"(&i), "g"(&j), "g"(&k), "g"(&l) : "memory");
        1:   23:  return a + b + c + d + e + f + g + h + i + j + k + l;
        -:   24:}
        -:   25:
        1:   26:__attribute__((noinline, noclone, pure)) int bar(int a, int b, int c, int d,
        -:   27:                                                 int e, int f, int g, int h,
        -:   28:                                                 int i, int j, int k, int l) {
        1:   29:  a++;
        1:   30:  b++;
        1:   31:  c++;
        1:   32:  d++;
        1:   33:  e++;
        1:   34:  f++;
        1:   35:  g++;
        1:   36:  h++;
        1:   37:  i++;
        1:   38:  j++;
        1:   39:  k++;
        1:   40:  l++;
        1:   41:  asm volatile("" : : "g"(&a), "g"(&b), "g"(&c), "g"(&d) : "memory");
        1:   42:  asm volatile("" : : "g"(&e), "g"(&f), "g"(&g), "g"(&h) : "memory");
        1:   43:  asm volatile("" : : "g"(&i), "g"(&j), "g"(&k), "g"(&l) : "memory");
        1:   44:  return 2 * a + b + c + d + e + f + g + h + i + j + k + l;
        -:   45:}
        -:   46:
        1:   47:__attribute__((noinline, noclone)) int test() {
        1:   48:  int a = foo(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
        1:   49:  a += bar(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
        1:   50:  return a;
        -:   51:}
        -:   52:
        1:   53:int main() {
        1:   54:  if (test() != 182)
    #####:   55:    __builtin_abort();
        1:   56:  return 0;
        -:   57:}
