    1|       |/* Test IEEE +0/-0 rules */
    2|       |
    3|       |static double pzero = +0.0;
    4|       |static double nzero = -0.0;
    5|       |static double pinf = +1.0 / 0.0;
    6|       |static double ninf = -1.0 / 0.0;
    7|       |static double nan = 0.0 / 0.0;
    8|       |
    9|     24|void expect(double value, double expected) {
   10|     24|  if (expected != expected) /* expected value is Not a number */
   11|      4|  {
   12|      4|    if (value == value) /* actual value is a number */
   13|      0|      abort();
   14|     20|  }
   15|     20|
   16|     20|  else if (value != value)
   17|      0|    abort(); /* actual value is a NaN */
   18|     20|
   19|     20|  else if (memcmp((void *)&value, (void *)&expected, sizeof(double)) != 0)
   20|      0|    abort(); /* values don't match */
   21|     24|}
   22|       |
   23|      1|main() {
   24|      1|  expect(pzero + pzero, pzero);
   25|      1|  expect(pzero + nzero, pzero);
   26|      1|  expect(nzero + pzero, pzero);
   27|      1|  expect(nzero + nzero, nzero);
   28|      1|
   29|      1|  expect(pzero - pzero, pzero);
   30|      1|  expect(pzero - nzero, pzero);
   31|      1|  expect(nzero - pzero, nzero);
   32|      1|  expect(nzero - nzero, pzero);
   33|      1|
   34|      1|  expect(pzero * pzero, pzero);
   35|      1|  expect(pzero * nzero, nzero);
   36|      1|  expect(nzero * pzero, nzero);
   37|      1|  expect(nzero * nzero, pzero);
   38|      1|
   39|      1|  expect(+1.00 * pzero, pzero);
   40|      1|  expect(-1.00 * pzero, nzero);
   41|      1|  expect(+1.00 * nzero, nzero);
   42|      1|  expect(-1.00 * nzero, pzero);
   43|      1|
   44|      1|#ifndef _TMS320C6700
   45|      1|  /* C6X floating point division is implemented using reciprocals.  */
   46|      1|  expect(pzero / pzero, nan);
   47|      1|  expect(pzero / nzero, nan);
   48|      1|  expect(nzero / pzero, nan);
   49|      1|  expect(nzero / nzero, nan);
   50|      1|
   51|      1|  expect(+1.00 / pzero, pinf);
   52|      1|  expect(-1.00 / pzero, ninf);
   53|      1|  expect(+1.00 / nzero, ninf);
   54|      1|  expect(-1.00 / nzero, pinf);
   55|      1|#endif
   56|      1|
   57|      1|  exit(0);
   58|      1|}

