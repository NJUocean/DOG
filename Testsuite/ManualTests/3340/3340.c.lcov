    1|       |/* Copyright (C) 2004 Free Software Foundation.
    2|       |
    3|       |   Check that constant folding and RTL simplification of -(x >> y) doesn't
    4|       |   break anything and produces the expected results.
    5|       |
    6|       |   Written by Roger Sayle, 11th March 2004.  */
    7|       |
    8|       |extern void abort(void);
    9|       |
   10|     12|#define INT_BITS (sizeof(int) * 8)
   11|       |
   12|      3|int test1(int x) { return -(x >> (INT_BITS - 1)); }
   13|       |
   14|      3|int test2(unsigned int x) { return -((int)(x >> (INT_BITS - 1))); }
   15|       |
   16|      3|int test3(int x) {
   17|      3|  int y;
   18|      3|  y = INT_BITS - 1;
   19|      3|  return -(x >> y);
   20|      3|}
   21|       |
   22|      3|int test4(unsigned int x) {
   23|      3|  int y;
   24|      3|  y = INT_BITS - 1;
   25|      3|  return -((int)(x >> y));
   26|      3|}
   27|       |
   28|      1|int main() {
   29|      1|  if (test1(0) != 0)
   30|      0|    abort();
   31|      1|  if (test1(1) != 0)
   32|      0|    abort();
   33|      1|  if (test1(-1) != 1)
   34|      0|    abort();
   35|      1|
   36|      1|  if (test2(0) != 0)
   37|      0|    abort();
   38|      1|  if (test2(1) != 0)
   39|      0|    abort();
   40|      1|  if (test2((unsigned int)-1) != -1)
   41|      0|    abort();
   42|      1|
   43|      1|  if (test3(0) != 0)
   44|      0|    abort();
   45|      1|  if (test3(1) != 0)
   46|      0|    abort();
   47|      1|  if (test3(-1) != 1)
   48|      0|    abort();
   49|      1|
   50|      1|  if (test4(0) != 0)
   51|      0|    abort();
   52|      1|  if (test4(1) != 0)
   53|      0|    abort();
   54|      1|  if (test4((unsigned int)-1) != -1)
   55|      0|    abort();
   56|      1|
   57|      1|  return 0;
   58|      1|}

