        -:    0:Source:2680.c
        -:    0:Graph:2680.gcno
        -:    0:Data:2680.gcda
        -:    0:Runs:1
        -:    1:/* { dg-require-stack-size "128 * 128 * 4 + 1024" } */
        -:    2:
        -:    3:typedef struct {
        -:    4:  float wsx;
        -:    5:} struct_list;
        -:    6:
        -:    7:typedef struct_list *list_t;
        -:    8:
        -:    9:typedef struct {
        -:   10:  float x, y;
        -:   11:} vector_t;
        -:   12:
        2:   13:w(float x, float y) {}
        -:   14:
        1:   15:f1(float x, float y) {
        1:   16:  if (x != 0 || y != 0)
    #####:   17:    abort();
        1:   18:}
        1:   19:f2(float x, float y) {
        1:   20:  if (x != 1 || y != 1)
    #####:   21:    abort();
        1:   22:}
        -:   23:
        1:   24:gitter(int count, vector_t pos[], list_t list, int *nww, vector_t limit[2],
        -:   25:       float r) {
        -:   26:  float d;
        -:   27:  int gitt[128][128];
        -:   28:
        1:   29:  f1(limit[0].x, limit[0].y);
        1:   30:  f2(limit[1].x, limit[1].y);
        -:   31:
        1:   32:  *nww = 0;
        -:   33:
        1:   34:  d = pos[0].x;
        1:   35:  if (d <= 0.) {
        1:   36:    w(d, r);
        1:   37:    if (d <= r * 0.5) {
        1:   38:      w(d, r);
        1:   39:      list[0].wsx = 1;
        -:   40:    }
        -:   41:  }
        1:   42:}
        -:   43:
        -:   44:vector_t pos[1] = {{0., 0.}};
        -:   45:vector_t limit[2] = {{0., 0.}, {1., 1.}};
        -:   46:
        1:   47:main() {
        -:   48:  int nww;
        -:   49:  struct_list list;
        -:   50:
        1:   51:  gitter(1, pos, &list, &nww, limit, 1.);
        1:   52:  exit(0);
        -:   53:}
