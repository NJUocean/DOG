    1|       |/* { dg-add-options stack_size } */
    2|       |/* { dg-require-stack-size "[dg-effective-target-value stack_size]*2" } */
    3|       |
    4|       |void bcopy1(s, d, c) long long *s;
    5|       |long long *d;
    6|       |int c;
    7|      0|{
    8|      0|  int i;
    9|      0|  c = c / 8;
   10|      0|  for (i = 0; i < c; i++)
   11|      0|    d[i] = s[i];
   12|      0|}
   13|       |
   14|       |void bcopy2(s, d, c) long *s;
   15|       |long *d;
   16|       |int c;
   17|      0|{
   18|      0|  int i;
   19|      0|  c = c / 4;
   20|      0|  for (i = 0; i < c; i++)
   21|      0|    d[i] = s[i];
   22|      0|}
   23|       |
   24|       |void bcopy3(s, d, c) char *s;
   25|       |char *d;
   26|       |int c;
   27|      0|{
   28|      0|  long long z0, z1;
   29|      0|  int r = d - s;
   30|      0|
   31|      0|  int i;
   32|      0|
   33|      0|  c /= 16;
   34|      0|
   35|      0|  z0 = *((long long *)s);
   36|      0|  s += 8;
   37|      0|  z1 = *((long long *)s);
   38|      0|  s += 8;
   39|      0|  for (i = 0; i < c; i++) {
   40|      0|    *(long long *)(s + r) = z0;
   41|      0|    z0 = *((long long *)s);
   42|      0|    s += 8;
   43|      0|    *(long long *)(s + r) = z1;
   44|      0|    z1 = *((long long *)s);
   45|      0|    s += 8;
   46|      0|  }
   47|      0|}
   48|       |
   49|       |#if defined(STACK_SIZE) && STACK_SIZE < 16384
   50|       |#define BYTES STACK_SIZE
   51|       |#else
   52|  8.19k|#define BYTES 16384
   53|       |#endif
   54|       |
   55|      1|main() {
   56|      1|  long long s[BYTES / 8];
   57|      1|  long long d[BYTES / 8];
   58|      1|  int i;
   59|      1|
   60|  4.09k|  for (i = 1; i < 67108864 / BYTES; i++)
   61|  4.09k|    bcopy(s, d, BYTES);
   62|      1|}

