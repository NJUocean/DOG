    1|       |/* Test __atomic routines for existence and proper execution on 4 byte
    2|       |   values with each valid memory model.  */
    3|       |/* { dg-do run } */
    4|       |/* { dg-require-effective-target sync_int_long } */
    5|       |
    6|       |extern void abort(void);
    7|       |
    8|       |int v, count;
    9|       |
   10|      1|int main() {
   11|      1|  v = 0;
   12|      1|  count = 0;
   13|      1|
   14|      1|  if (__atomic_load_n(&v, __ATOMIC_RELAXED) != count++)
   15|      0|    abort();
   16|      1|  else
   17|      1|    v++;
   18|      1|
   19|      1|  if (__atomic_load_n(&v, __ATOMIC_ACQUIRE) != count++)
   20|      0|    abort();
   21|      1|  else
   22|      1|    v++;
   23|      1|
   24|      1|  if (__atomic_load_n(&v, __ATOMIC_CONSUME) != count++)
   25|      0|    abort();
   26|      1|  else
   27|      1|    v++;
   28|      1|
   29|      1|  if (__atomic_load_n(&v, __ATOMIC_SEQ_CST) != count++)
   30|      0|    abort();
   31|      1|  else
   32|      1|    v++;
   33|      1|
   34|      1|  /* Now test the generic variants.  */
   35|      1|
   36|      1|  __atomic_load(&v, &count, __ATOMIC_RELAXED);
   37|      1|  if (count != v)
   38|      0|    abort();
   39|      1|  else
   40|      1|    v++;
   41|      1|
   42|      1|  __atomic_load(&v, &count, __ATOMIC_ACQUIRE);
   43|      1|  if (count != v)
   44|      0|    abort();
   45|      1|  else
   46|      1|    v++;
   47|      1|
   48|      1|  __atomic_load(&v, &count, __ATOMIC_CONSUME);
   49|      1|  if (count != v)
   50|      0|    abort();
   51|      1|  else
   52|      1|    v++;
   53|      1|
   54|      1|  __atomic_load(&v, &count, __ATOMIC_SEQ_CST);
   55|      1|  if (count != v)
   56|      0|    abort();
   57|      1|  else
   58|      1|    v++;
   59|      1|
   60|      1|  return 0;
   61|      1|}

