        -:    0:Source:605.c
        -:    0:Graph:605.gcno
        -:    0:Data:605.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-O2 -fipa-sra -fdump-ipa-sra"  } */
        -:    3:
        -:    4:/* Check of a transitive recursive structure split. */
        -:    5:
        -:    6:struct S {
        -:    7:  float red;
        -:    8:  void *blue;
        -:    9:  int green;
        -:   10:};
        -:   11:
        -:   12:static int done = 0;
        -:   13:
        2:   14:void __attribute__((noipa)) check(float r, int g, int g2) {
        2:   15:  if (r < 7.39 || r > 7.41 || g != 6 || g2 != 6)
    #####:   16:    __builtin_abort();
        2:   17:}
        -:   18:
        -:   19:static void __attribute__((noinline)) bar(struct S s);
        -:   20:
        2:   21:static void __attribute__((noinline)) foo(struct S s) {
        2:   22:  if (!done) {
        1:   23:    done = 1;
        1:   24:    bar(s);
        -:   25:  }
        2:   26:  check(s.red, s.green, s.green);
        2:   27:}
        -:   28:
        2:   29:static void __attribute__((noinline)) bar(struct S s) { foo(s); }
        -:   30:
        1:   31:int main(int argc, char *argv[]) {
        -:   32:  struct S s;
        -:   33:
        1:   34:  s.red = 7.4;
        1:   35:  s.green = 6;
        1:   36:  s.blue = &s;
        -:   37:
        1:   38:  bar(s);
        1:   39:  return 0;
        -:   40:}
        -:   41:
        -:   42:/* { dg-final { scan-ipa-dump-times "Will split parameter" 2 "sra" { xfail { hpp
        -:   43:a*-*-hpux* && { ! lp64 } } } } } */
        -:   44:/* { dg-final { scan-ipa-dump-times "component at byte offset" 4 "sra" { xfail {
        -:   45:hpp a*-*-hpux* && { ! lp64 } } } } } */
