        -:    0:Source:3429.c
        -:    0:Graph:3429.gcno
        -:    0:Data:3429.gcda
        -:    0:Runs:1
        -:    1:/* PR c/33238 */
        -:    2:/* { dg-require-effective-target alloca } */
        -:    3:
        -:    4:typedef __SIZE_TYPE__ size_t;
        -:    5:int memcmp(const void *, const void *, size_t);
        -:    6:void abort(void);
        -:    7:
        1:    8:void __attribute__((noinline)) bar(void *x, void *y) {
        -:    9:  struct S {
        -:   10:    char w[8];
        1:   11:  } *p = x, *q = y;
        1:   12:  if (memcmp(p->w, "zyxwvut", 8) != 0)
    #####:   13:    abort();
        1:   14:  if (memcmp(q[0].w, "abcdefg", 8) != 0)
    #####:   15:    abort();
        1:   16:  if (memcmp(q[1].w, "ABCDEFG", 8) != 0)
    #####:   17:    abort();
        1:   18:  if (memcmp(q[2].w, "zyxwvut", 8) != 0)
    #####:   19:    abort();
        1:   20:  if (memcmp(q[3].w, "zyxwvut", 8) != 0)
    #####:   21:    abort();
        1:   22:}
        -:   23:
        1:   24:void __attribute__((noinline)) foo(void *x, int y) {
        1:   25:  struct S {
        1:   26:    char w[y];
        1:   27:  } *p = x, a;
        -:   28:  int i;
        1:   29:  a = ({
        1:   30:    struct S b;
        1:   31:    b = p[2];
        1:   32:    p[3] = b;
        -:   33:  });
        1:   34:  bar(&a, x);
        1:   35:}
        -:   36:
        1:   37:int main(void) {
        -:   38:  struct S {
        -:   39:    char w[8];
        1:   40:  } p[4] = {"abcdefg", "ABCDEFG", "zyxwvut", "ZYXWVUT"};
        1:   41:  foo(p, 8);
        1:   42:  return 0;
        -:   43:}
