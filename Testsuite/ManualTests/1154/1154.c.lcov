    1|       |/* { dg-do run } */
    2|       |/* { dg-require-effective-target int128 } */
    3|       |/* { dg-options "-fsanitize=signed-integer-overflow" } */
    4|       |
    5|       |/* 2^127 - 1 */
    6|       |#define INT128_MAX                                                             \
    7|      6|  (__int128)(((unsigned __int128)1                                             \
    8|      6|              << ((__SIZEOF_INT128__ * __CHAR_BIT__) - 1)) -                   \
    9|      6|             1)
   10|      3|#define INT128_MIN (-INT128_MAX - 1)
   11|       |
   12|      1|int main(void) {
   13|      1|  volatile __int128 i = INT128_MAX;
   14|      1|  volatile __int128 j = 1;
   15|      1|  volatile __int128 k = i + j;
   16|      1|  k = j + i;
   17|      1|  i++;
   18|      1|  j = INT128_MAX - 100;
   19|      1|  j += (1 << 10);
   20|      1|
   21|      1|  j = INT128_MIN;
   22|      1|  i = -1;
   23|      1|  k = i + j;
   24|      1|  k = j + i;
   25|      1|  j--;
   26|      1|  j = INT128_MIN + 100;
   27|      1|  j += -(1 << 10);
   28|      1|
   29|      1|  i = INT128_MAX;
   30|      1|  j = 2;
   31|      1|  k = i * j;
   32|      1|
   33|      1|  i = INT128_MIN;
   34|      1|  i = -i;
   35|      1|
   36|      1|  return 0;
   37|      1|}
   38|       |
   39|       |/* { dg-output "signed integer overflow: 0x7fffffffffffffffffffffffffffffff \\+
   40|       | * 1 cannot be represented in type '__int128'(\n|\r\n|\r)" } */
   41|       |/* { dg-output "\[^\n\r]*signed integer overflow: 1 \\+
   42|       | * 0x7fffffffffffffffffffffffffffffff cannot be represented in type
   43|       | * '__int128'(\n|\r\n|\r)" } */
   44|       |/* { dg-output "\[^\n\r]*signed integer overflow:
   45|       | * 0x7fffffffffffffffffffffffffffffff \\+ 1 cannot be represented in type
   46|       | * '__int128'(\n|\r\n|\r)" } */
   47|       |/* { dg-output "\[^\n\r]*signed integer overflow:
   48|       | * 0x7fffffffffffffffffffffffffffff9b \\+ 1024 cannot be represented in type
   49|       | * '__int128'(\n|\r\n|\r)" } */
   50|       |/* { dg-output "\[^\n\r]*signed integer overflow: -1 \\+
   51|       | * 0x80000000000000000000000000000000 cannot be represented in type
   52|       | * '__int128'(\n|\r\n|\r)" } */
   53|       |/* { dg-output "\[^\n\r]*signed integer overflow:
   54|       | * 0x80000000000000000000000000000000 \\+ -1 cannot be represented in type
   55|       | * '__int128'(\n|\r\n|\r)" } */
   56|       |/* { dg-output "\[^\n\r]*signed integer overflow:
   57|       | * 0x80000000000000000000000000000000 - 1 cannot be represented in type
   58|       | * '__int128'(\n|\r\n|\r)" } */
   59|       |/* { dg-output "\[^\n\r]*signed integer overflow:
   60|       | * 0x80000000000000000000000000000064 \\+ -1024 cannot be represented in type
   61|       | * '__int128'(\n|\r\n|\r)" } */
   62|       |/* { dg-output "\[^\n\r]*signed integer overflow:
   63|       | * 0x7fffffffffffffffffffffffffffffff \\* 2 cannot be represented in type
   64|       | * '__int128'(\n|\r\n|\r)" } */
   65|       |/* { dg-output "\[^\n\r]*negation of 0x80000000000000000000000000000000 cannot
   66|       | * be represented in type '__int128'; cast to an unsigned type to negate this
   67|       | * value to itself" } */

