        -:    0:Source:3265.c
        -:    0:Graph:3265.gcno
        -:    0:Data:3265.gcda
        -:    0:Runs:1
        -:    1:/* Macros to emit "L Nxx R" for each octal number xx between 000 and 037.  */
        -:    2:#define OP1(L, N, R, I, J) L N##I##J R
        -:    3:#define OP2(L, N, R, I)                                                        \
        -:    4:  OP1(L, N, R, 0, I), OP1(L, N, R, 1, I), OP1(L, N, R, 2, I), OP1(L, N, R, 3, I)
        -:    5:#define OP(L, N, R)                                                            \
        -:    6:  OP2(L, N, R, 0), OP2(L, N, R, 1), OP2(L, N, R, 2), OP2(L, N, R, 3),          \
        -:    7:      OP2(L, N, R, 4), OP2(L, N, R, 5), OP2(L, N, R, 6), OP2(L, N, R, 7)
        -:    8:
        -:    9:/* Declare 32 unique variables with prefix N.  */
        -:   10:#define DECLARE(N) OP(, N, )
        -:   11:
        -:   12:/* Copy 32 variables with prefix N from the array at ADDR.
        -:   13:   Leave ADDR pointing to the end of the array.  */
        -:   14:#define COPYIN(N, ADDR) OP(, N, = *(ADDR++))
        -:   15:
        -:   16:/* Likewise, but copy the other way.  */
        -:   17:#define COPYOUT(N, ADDR) OP(*(ADDR++) =, N, )
        -:   18:
        -:   19:/* Add the contents of the array at ADDR to 32 variables with prefix N.
        -:   20:   Leave ADDR pointing to the end of the array.  */
        -:   21:#define ADD(N, ADDR) OP(, N, += *(ADDR++))
        -:   22:
        -:   23:volatile double gd[32];
        -:   24:volatile float gf[32];
        -:   25:
        1:   26:void foo(int n) {
        -:   27:  double DECLARE(d);
        -:   28:  float DECLARE(f);
        -:   29:  volatile double *pd;
        -:   30:  volatile float *pf;
        -:   31:  int i;
        -:   32:
        1:   33:  pd = gd;
        1:   34:  COPYIN(d, pd);
        2:   35:  for (i = 0; i < n; i++) {
        1:   36:    pf = gf;
        1:   37:    COPYIN(f, pf);
        1:   38:    pd = gd;
        1:   39:    ADD(d, pd);
        1:   40:    pd = gd;
        1:   41:    ADD(d, pd);
        1:   42:    pd = gd;
        1:   43:    ADD(d, pd);
        1:   44:    pf = gf;
        1:   45:    COPYOUT(f, pf);
        -:   46:  }
        1:   47:  pd = gd;
        1:   48:  COPYOUT(d, pd);
        1:   49:}
        -:   50:
        1:   51:int main() {
        -:   52:  int i;
        -:   53:
       33:   54:  for (i = 0; i < 32; i++)
       32:   55:    gd[i] = i, gf[i] = i;
        1:   56:  foo(1);
       33:   57:  for (i = 0; i < 32; i++)
       32:   58:    if (gd[i] != i * 4 || gf[i] != i)
    #####:   59:      abort();
        1:   60:  exit(0);
        -:   61:}
