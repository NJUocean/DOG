    1|       |#define vector(elcount, type)                                                  \
    2|      8|  __attribute__((vector_size((elcount) * sizeof(type)))) type
    3|       |
    4|     52|#define vidx(type, vec, idx) (*((type *)&(vec) + idx))
    5|       |
    6|     52|#define operl(a, b, op) (a op b)
    7|       |#define operr(a, b, op) (b op a)
    8|       |
    9|       |#define check(type, count, vec0, vec1, num, op, lr)                            \
   10|     10|  do {                                                                         \
   11|     10|    int __i;                                                                   \
   12|     62|    for (__i = 0; __i < count; __i++) {                                        \
   13|     52|      if (vidx(type, vec1, __i) != oper##lr(num, vidx(type, vec0, __i), op))   \
   14|     52|        __builtin_abort();                                                     \
   15|     52|    }                                                                          \
   16|     10|  } while (0)
   17|       |
   18|       |#define veccompare(type, count, v0, v1)                                        \
   19|       |  do {                                                                         \
   20|       |    int __i;                                                                   \
   21|       |    for (__i = 0; __i < count; __i++) {                                        \
   22|       |      if (vidx(type, v0, __i) != vidx(type, v1, __i))                          \
   23|       |        __builtin_abort();                                                     \
   24|       |    }                                                                          \
   25|       |  } while (0)
   26|       |
   27|      3|long __attribute__((noinline)) vlng() { return (long)42; }
   28|      8|int __attribute__((noinline)) vint() { return (int)43; }
   29|     17|short __attribute__((noinline)) vsrt() { return (short)42; }
   30|     34|char __attribute__((noinline)) vchr() { return (char)42; }
   31|       |
   32|      1|int main(int argc, char *argv[]) {
   33|      1|  vector(16, char) c0 = {argc, 1, 2, 3, 4, 5, 6, 7, argc, 1, 2, 3, 4, 5, 6, 7};
   34|      1|  vector(16, char) c1;
   35|      1|
   36|      1|  vector(8, short) s0 = {argc, 1, 2, 3, 4, 5, 6, 7};
   37|      1|  vector(8, short) s1;
   38|      1|
   39|      1|  vector(4, int) i0 = {argc, 1, 2, 3};
   40|      1|  vector(4, int) i1;
   41|      1|
   42|      1|  vector(2, long) l0 = {argc, 1};
   43|      1|  vector(2, long) l1;
   44|      1|
   45|      1|  c1 = vchr() + c0;
   46|      1|  check(char, 16, c0, c1, vchr(), +, l);
   47|      1|
   48|      1|  s1 = vsrt() + s0;
   49|      1|  check(short, 8, s0, s1, vsrt(), +, l);
   50|      1|  s1 = vchr() + s0;
   51|      1|  check(short, 8, s0, s1, vchr(), +, l);
   52|      1|
   53|      1|  i1 = vint() * i0;
   54|      1|  check(int, 4, i0, i1, vint(), *, l);
   55|      1|  i1 = vsrt() * i0;
   56|      1|  check(int, 4, i0, i1, vsrt(), *, l);
   57|      1|  i1 = vchr() * i0;
   58|      1|  check(int, 4, i0, i1, vchr(), *, l);
   59|      1|
   60|      1|  l1 = vlng() * l0;
   61|      1|  check(long, 2, l0, l1, vlng(), *, l);
   62|      1|  l1 = vint() * l0;
   63|      1|  check(long, 2, l0, l1, vint(), *, l);
   64|      1|  l1 = vsrt() * l0;
   65|      1|  check(long, 2, l0, l1, vsrt(), *, l);
   66|      1|  l1 = vchr() * l0;
   67|      1|  check(long, 2, l0, l1, vchr(), *, l);
   68|      1|
   69|      1|  return 0;
   70|      1|}

