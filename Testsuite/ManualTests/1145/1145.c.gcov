        -:    0:Source:1145.c
        -:    0:Graph:1145.gcno
        -:    0:Data:1145.gcda
        -:    0:Runs:1
        -:    1:/* Test support of scalar_storage_order pragma */
        -:    2:
        -:    3:/* { dg-do run } */
        -:    4:/* { dg-options "-fsso-struct=little-endian" } */
        -:    5:/* { dg-require-effective-target int32plus } */
        -:    6:
        -:    7:struct S1 {
        -:    8:  int i;
        -:    9:};
        -:   10:
        -:   11:#pragma scalar_storage_order big - endian
        -:   12:
        -:   13:struct S2 {
        -:   14:  int i;
        -:   15:};
        -:   16:
        -:   17:#pragma scalar_storage_order default
        -:   18:
        -:   19:struct S3 {
        -:   20:  int i;
        -:   21:};
        -:   22:
        -:   23:struct S1 my_s1 = {0x12345678};
        -:   24:struct S2 my_s2 = {0x12345678};
        -:   25:struct S3 my_s3 = {0x12345678};
        -:   26:
        -:   27:unsigned char big_endian_pattern[4] = {0x12, 0x34, 0x56, 0x78};
        -:   28:unsigned char little_endian_pattern[4] = {0x78, 0x56, 0x34, 0x12};
        -:   29:
        1:   30:int main(void) {
        1:   31:  if (__builtin_memcmp(&my_s1, &little_endian_pattern, 4) != 0)
    #####:   32:    __builtin_abort();
        -:   33:
        1:   34:  if (__builtin_memcmp(&my_s2, &big_endian_pattern, 4) != 0)
    #####:   35:    __builtin_abort();
        -:   36:
        1:   37:  if (__builtin_memcmp(&my_s3, &little_endian_pattern, 4) != 0)
    #####:   38:    __builtin_abort();
        -:   39:
        1:   40:  return 0;
        -:   41:}
