        -:    0:Source:1830.c
        -:    0:Graph:1830.gcno
        -:    0:Data:1830.gcda
        -:    0:Runs:1
        -:    1:/* { dg-require-ifunc "" } */
        -:    2:/* { dg-skip-if "" { ! { i?86-*-* x86_64-*-* } } } */
        -:    3:/* { dg-require-effective-target avx512f } */
        -:    4:/* { dg-options "-O2" } */
        -:    5:
        -:    6:static double bar(double *__restrict, double *__restrict, int)
        -:    7:    __attribute__((target_clones("avx,avx2,avx512f,default")));
        -:    8:
        1:    9:double foo(double *__restrict a, double *__restrict b, int n) {
        1:   10:  return bar(a, b, n);
        -:   11:}
        -:   12:
       1*:   13:double bar(double *__restrict a, double *__restrict b, int n) {
        -:   14:  double s;
        -:   15:  int i;
       1*:   16:  s = 0.0;
       6*:   17:  for (i = 0; i < n; i++)
       5*:   18:    s += a[i] + b[i];
        -:   19:
       1*:   20:  return s;
        -:   21:}
------------------
bar.avx512f.2:
        1:   13:double bar(double *__restrict a, double *__restrict b, int n) {
        -:   14:  double s;
        -:   15:  int i;
        1:   16:  s = 0.0;
        6:   17:  for (i = 0; i < n; i++)
        5:   18:    s += a[i] + b[i];
        -:   19:
        1:   20:  return s;
        -:   21:}
------------------
bar.avx2.1:
    #####:   13:double bar(double *__restrict a, double *__restrict b, int n) {
        -:   14:  double s;
        -:   15:  int i;
    #####:   16:  s = 0.0;
    #####:   17:  for (i = 0; i < n; i++)
    #####:   18:    s += a[i] + b[i];
        -:   19:
    #####:   20:  return s;
        -:   21:}
------------------
bar.avx.0:
    #####:   13:double bar(double *__restrict a, double *__restrict b, int n) {
        -:   14:  double s;
        -:   15:  int i;
    #####:   16:  s = 0.0;
    #####:   17:  for (i = 0; i < n; i++)
    #####:   18:    s += a[i] + b[i];
        -:   19:
    #####:   20:  return s;
        -:   21:}
------------------
bar.default.3:
    #####:   13:double bar(double *__restrict a, double *__restrict b, int n) {
        -:   14:  double s;
        -:   15:  int i;
    #####:   16:  s = 0.0;
    #####:   17:  for (i = 0; i < n; i++)
    #####:   18:    s += a[i] + b[i];
        -:   19:
    #####:   20:  return s;
        -:   21:}
------------------
        -:   22:
        -:   23:#define N 5
        -:   24:
        1:   25:int main() {
        1:   26:  double a[N] = {1.2f, 1.2f, 1.2f, 1.2f, 1.2f};
        1:   27:  double b[N] = {1.2f, 1.2f, 1.2f, 1.2f, 1.2f};
        -:   28:
        1:   29:  __builtin_printf("value: %.5f\n", foo(a, b, N));
        1:   30:  return 0;
        -:   31:}
