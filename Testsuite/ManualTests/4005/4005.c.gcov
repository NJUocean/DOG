        -:    0:Source:4005.c
        -:    0:Graph:4005.gcno
        -:    0:Data:4005.gcda
        -:    0:Runs:1
        -:    1:/* PR target/85582 */
        -:    2:
        -:    3:#ifdef __SIZEOF_INT128__
        -:    4:typedef __int128 S;
        -:    5:typedef unsigned __int128 U;
        -:    6:#else
        -:    7:typedef long long S;
        -:    8:typedef unsigned long long U;
        -:    9:#endif
        -:   10:
        3:   11:__attribute__((noipa)) U f1(U x, int y) { return x << (y & -2); }
        -:   12:
        3:   13:__attribute__((noipa)) S f2(S x, int y) { return x >> (y & -2); }
        -:   14:
        3:   15:__attribute__((noipa)) U f3(U x, int y) { return x >> (y & -2); }
        -:   16:
        1:   17:int main() {
        1:   18:  U a = (U)1 << (sizeof(U) * __CHAR_BIT__ - 7);
        1:   19:  if (f1(a, 5) != ((U)1 << (sizeof(S) * __CHAR_BIT__ - 3)))
    #####:   20:    __builtin_abort();
        1:   21:  S b = (U)0x101 << (sizeof(S) * __CHAR_BIT__ / 2 - 7);
        1:   22:  if (f1(b, sizeof(S) * __CHAR_BIT__ / 2) !=
        -:   23:      (U)0x101 << (sizeof(S) * __CHAR_BIT__ - 7))
    #####:   24:    __builtin_abort();
        1:   25:  if (f1(b, sizeof(S) * __CHAR_BIT__ / 2 + 2) !=
        -:   26:      (U)0x101 << (sizeof(S) * __CHAR_BIT__ - 5))
    #####:   27:    __builtin_abort();
        1:   28:  S c = (U)1 << (sizeof(S) * __CHAR_BIT__ - 1);
        1:   29:  if ((U)f2(c, 5) != ((U)0x1f << (sizeof(S) * __CHAR_BIT__ - 5)))
    #####:   30:    __builtin_abort();
        1:   31:  if ((U)f2(c, sizeof(S) * __CHAR_BIT__ / 2) !=
        -:   32:      ((U)-1 << (sizeof(S) * __CHAR_BIT__ / 2 - 1)))
    #####:   33:    __builtin_abort();
        1:   34:  if ((U)f2(c, sizeof(S) * __CHAR_BIT__ / 2 + 2) !=
        -:   35:      ((U)-1 << (sizeof(S) * __CHAR_BIT__ / 2 - 3)))
    #####:   36:    __builtin_abort();
        1:   37:  U d = (U)1 << (sizeof(S) * __CHAR_BIT__ - 1);
        1:   38:  if (f3(c, 5) != ((U)0x1 << (sizeof(S) * __CHAR_BIT__ - 5)))
    #####:   39:    __builtin_abort();
        1:   40:  if (f3(c, sizeof(S) * __CHAR_BIT__ / 2) !=
        -:   41:      ((U)1 << (sizeof(S) * __CHAR_BIT__ / 2 - 1)))
    #####:   42:    __builtin_abort();
        1:   43:  if (f3(c, sizeof(S) * __CHAR_BIT__ / 2 + 2) !=
        -:   44:      ((U)1 << (sizeof(S) * __CHAR_BIT__ / 2 - 3)))
    #####:   45:    __builtin_abort();
        1:   46:  return 0;
        -:   47:}
