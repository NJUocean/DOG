        -:    0:Source:465.c
        -:    0:Graph:465.gcno
        -:    0:Data:465.gcda
        -:    0:Runs:1
        -:    1:/* { dg-options "-O2 -ftree-vectorize -fno-vect-cost-model -fno-tree-scev-cprop
        -:    2: * -fgraphite-identity" } */
        -:    3:/* { dg-require-effective-target vect_int } */
        -:    4:
        -:    5:/* gcc.dg/vect/no-scevccp-outer-4.c was miscompiled by Graphite.
        -:    6:   Adding it here to always test it with Graphite.  */
        -:    7:
        -:    8:#include <stdarg.h>
        -:    9:
        -:   10:extern void abort();
        -:   11:#define N 40
        -:   12:
        -:   13:int a[N];
        -:   14:
        -:   15:/* induction variable k advances through inner and outer loops.  */
        -:   16:
        1:   17:__attribute__((noinline)) int foo(int n) {
        1:   18:  int i, j, k = 0;
        -:   19:  int sum;
        -:   20:
        1:   21:  if (n <= 0)
    #####:   22:    return 0;
        -:   23:
       41:   24:  for (i = 0; i < N; i++) {
       40:   25:    sum = 0;
      840:   26:    for (j = 0; j < n; j += 2) {
      800:   27:      sum += k++;
        -:   28:    }
       40:   29:    a[i] = sum + j;
        -:   30:  }
        1:   31:}
        -:   32:
        1:   33:int main(void) {
        1:   34:  int i, j, k = 0;
        -:   35:  int sum;
        -:   36:
       41:   37:  for (i = 0; i < N; i++)
       40:   38:    a[i] = i;
        -:   39:
        1:   40:  foo(N);
        -:   41:
        -:   42:  /* check results:  */
       41:   43:  for (i = 0; i < N; i++) {
       40:   44:    sum = 0;
      840:   45:    for (j = 0; j < N; j += 2)
      800:   46:      sum += k++;
       40:   47:    if (a[i] != sum + j)
    #####:   48:      abort();
        -:   49:  }
        -:   50:
        1:   51:  return 0;
        -:   52:}
