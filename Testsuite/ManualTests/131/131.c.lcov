    1|       |/* Test atomic_compare_exchange routines for existence and proper
    2|       |   execution on 2-byte values with each valid memory model.  */
    3|       |/* { dg-do run } */
    4|       |/* { dg-options "-std=c11 -pedantic-errors" } */
    5|       |
    6|       |#include <stdatomic.h>
    7|       |
    8|       |extern void abort(void);
    9|       |
   10|       |_Atomic int v = ATOMIC_VAR_INIT(0);
   11|       |int expected = 0;
   12|       |int max = ~0;
   13|       |int desired = ~0;
   14|       |int zero = 0;
   15|       |
   16|      1|int main() {
   17|      1|
   18|      1|  if (!atomic_compare_exchange_strong_explicit(
   19|      1|          &v, &expected, max, memory_order_relaxed, memory_order_relaxed))
   20|      0|    abort();
   21|      1|  if (expected != 0)
   22|      0|    abort();
   23|      1|
   24|      1|  if (atomic_compare_exchange_strong_explicit(
   25|      1|          &v, &expected, 0, memory_order_acquire, memory_order_relaxed))
   26|      0|    abort();
   27|      1|  if (expected != max)
   28|      0|    abort();
   29|      1|
   30|      1|  if (!atomic_compare_exchange_strong_explicit(
   31|      1|          &v, &expected, 0, memory_order_release, memory_order_acquire))
   32|      0|    abort();
   33|      1|  if (expected != max)
   34|      0|    abort();
   35|      1|  if (v != 0)
   36|      0|    abort();
   37|      1|
   38|      1|  if (atomic_compare_exchange_weak_explicit(
   39|      1|          &v, &expected, desired, memory_order_acq_rel, memory_order_acquire))
   40|      0|    abort();
   41|      1|  if (expected != 0)
   42|      0|    abort();
   43|      1|
   44|      1|  if (!atomic_compare_exchange_strong_explicit(
   45|      1|          &v, &expected, desired, memory_order_seq_cst, memory_order_seq_cst))
   46|      0|    abort();
   47|      1|  if (expected != 0)
   48|      0|    abort();
   49|      1|  if (v != max)
   50|      0|    abort();
   51|      1|
   52|      1|  v = 0;
   53|      1|
   54|      1|  if (!atomic_compare_exchange_strong(&v, &expected, max))
   55|      1|    abort();
   56|      1|  if (expected != 0)
   57|      0|    abort();
   58|      1|
   59|      1|  if (atomic_compare_exchange_strong(&v, &expected, zero))
   60|      1|    abort();
   61|      1|  if (expected != max)
   62|      0|    abort();
   63|      1|
   64|      1|  if (!atomic_compare_exchange_strong(&v, &expected, zero))
   65|      1|    abort();
   66|      1|  if (expected != max)
   67|      0|    abort();
   68|      1|  if (v != 0)
   69|      0|    abort();
   70|      1|
   71|      1|  if (atomic_compare_exchange_weak(&v, &expected, desired))
   72|      1|    abort();
   73|      1|  if (expected != 0)
   74|      0|    abort();
   75|      1|
   76|      1|  if (!atomic_compare_exchange_strong(&v, &expected, desired))
   77|      1|    abort();
   78|      1|  if (expected != 0)
   79|      0|    abort();
   80|      1|  if (v != max)
   81|      0|    abort();
   82|      1|
   83|      1|  return 0;
   84|      1|}

