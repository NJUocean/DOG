        -:    0:Source:2847.c
        -:    0:Graph:2847.gcno
        -:    0:Data:2847.gcda
        -:    0:Runs:1
        -:    1:/* Check for Darwin m64 that we do not try to pass & return by value for a
        -:    2:   struct exceeding the number of arg FPRs (the struct here straddles the
        -:    3:   split-point).  */
        -:    4:/* { dg-do run { target { powerpc*-*-darwin* && lp64 } } } */
        -:    5:
        -:    6:extern void abort(void);
        -:    7:
        -:    8:/*#define DEBUG*/
        -:    9:
        -:   10:#ifdef DEBUG
        -:   11:extern int printf(const char *, ...);
        -:   12:extern int printf$LDBL128(const char *, ...);
        -:   13:#endif
        -:   14:
        -:   15:typedef struct fourteen {
        -:   16:  long double a, b, c, d, e, f, g;
        -:   17:} fourteen_t;
        -:   18:
        -:   19:fourteen_t foo(fourteen_t, fourteen_t) __attribute__((noinline));
        -:   20:
        1:   21:fourteen_t foo(fourteen_t aa, fourteen_t bb) {
        -:   22:  fourteen_t r;
        -:   23:
        1:   24:  r.a = aa.a + bb.a;
        1:   25:  r.b = aa.b + bb.b;
        1:   26:  r.c = aa.c + bb.c;
        1:   27:  r.d = aa.d + bb.d;
        1:   28:  r.e = aa.e + bb.e;
        1:   29:  r.f = aa.f + bb.f;
        1:   30:  r.g = aa.g + bb.g;
        -:   31:
        -:   32:#ifdef DEBUG
        -:   33:#ifdef __ppc64__
        -:   34:  printf
        -:   35:#else
        -:   36:  printf$LDBL128
        -:   37:#endif
        -:   38:      ("%Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg %Lg: "
        -:   39:       "%Lg %Lg %Lg %Lg %Lg %Lg %Lg\n",
        -:   40:       aa.a, aa.b, aa.c, aa.d, aa.e, aa.f, aa.g, bb.a, bb.b, bb.c, bb.d, bb.e,
        -:   41:       bb.f, bb.g, r.a, r.b, r.c, r.d, r.e, r.f, r.g);
        -:   42:  printf("aa.g %ll16x %ll16x\nbb.g %ll16x %ll16x\n",
        -:   43:         *(unsigned long long *)&aa.g,
        -:   44:         *(unsigned long long *)(((char *)&aa.g) + 8),
        -:   45:         *(unsigned long long *)&bb.g,
        -:   46:         *(unsigned long long *)(((char *)&bb.g) + 8));
        -:   47:
        -:   48:#endif
        -:   49:
        1:   50:  __asm__(""); /* double make sure we don't get inlined */
        1:   51:  return r;
        -:   52:}
        -:   53:
        1:   54:int main(void) {
        1:   55:  fourteen_t x = {1.L, 2.L, 3.L, 4.L, 5.L, 6.L, -12.3456789123456789L};
        1:   56:  fourteen_t y = {8.L, 9.L, 10.L, 11.L, 12.L, 13.L, 12.3456789123456789L};
        -:   57:  fourteen_t z;
        -:   58:  long double zz;
        -:   59:
        1:   60:  z = foo(x, y);
        1:   61:  zz = x.g + y.g;
        -:   62:#ifdef DEBUG
        -:   63:#ifdef __ppc64__
        -:   64:  printf
        -:   65:#else
        -:   66:  printf$LDBL128
        -:   67:#endif
        -:   68:      ("  z: %Lg %Lg %Lg %Lg %Lg %Lg %Lg\n"
        -:   69:       "ret: %ll16x %ll16x\nzz : %ll16x %ll16x\n",
        -:   70:       z.a, z.b, z.c, z.d, z.e, z.f, z.g, *(unsigned long long *)&z.g,
        -:   71:       *(unsigned long long *)(((char *)&z.g) + 8), *(unsigned long long *)&zz,
        -:   72:       *(unsigned long long *)(((char *)&zz) + 8));
        -:   73:#endif
        -:   74:
        -:   75:  /* Yes, we really do want to do an equality test here.  */
        1:   76:  if (z.g != zz)
    #####:   77:    abort();
        -:   78:
        1:   79:  return 0;
        -:   80:}
