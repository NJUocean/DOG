    1|       |/* { dg-do run } */
    2|       |/* { dg-require-effective-target sync_int_long } */
    3|       |/* { dg-options } */
    4|       |/* { dg-options "-march=i486" { target { { i?86-*-* x86_64-*-* } && ia32 } } }
    5|       | */
    6|       |/* { dg-options "-mcpu=v9" { target sparc*-*-* } } */
    7|       |
    8|       |/* { dg-message "note: '__sync_fetch_and_nand' changed semantics in GCC 4.4" ""
    9|       | * { target *-*-* } 0 } */
   10|       |
   11|       |/* Test basic functionality of the intrinsics.  The operations should
   12|       |   not be optimized away if no one checks the return values.  */
   13|       |
   14|       |__extension__ typedef __SIZE_TYPE__ size_t;
   15|       |
   16|       |extern void abort(void);
   17|       |extern void *memcpy(void *, const void *, size_t);
   18|       |extern int memcmp(const void *, const void *, size_t);
   19|       |
   20|       |static int AI[12];
   21|       |static int init_noret_si[12] = {0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1};
   22|       |static int test_noret_si[12] = {1, 1, 1, 0, 1, 4, 22, -12, 7, 8, 9, ~7};
   23|       |
   24|      1|static void do_noret_si(void) {
   25|      1|  __sync_val_compare_and_swap(AI + 0, 0, 1);
   26|      1|  __sync_bool_compare_and_swap(AI + 1, 0, 1);
   27|      1|  __sync_lock_test_and_set(AI + 2, 1);
   28|      1|  __sync_lock_release(AI + 3);
   29|      1|
   30|      1|  __sync_fetch_and_add(AI + 4, 1);
   31|      1|  __sync_fetch_and_add(AI + 5, 4);
   32|      1|  __sync_fetch_and_add(AI + 6, 22);
   33|      1|  __sync_fetch_and_sub(AI + 7, 12);
   34|      1|  __sync_fetch_and_and(AI + 8, 7);
   35|      1|  __sync_fetch_and_or(AI + 9, 8);
   36|      1|  __sync_fetch_and_xor(AI + 10, 9);
   37|      1|  __sync_fetch_and_nand(AI + 11, 7);
   38|      1|}
   39|       |
   40|       |static long AL[12];
   41|       |static long init_noret_di[12] = {0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1};
   42|       |static long test_noret_di[12] = {1, 1, 1, 0, 1, 4, 22, -12, 7, 8, 9, ~7};
   43|       |
   44|      1|static void do_noret_di(void) {
   45|      1|  __sync_val_compare_and_swap(AL + 0, 0, 1);
   46|      1|  __sync_bool_compare_and_swap(AL + 1, 0, 1);
   47|      1|  __sync_lock_test_and_set(AL + 2, 1);
   48|      1|  __sync_lock_release(AL + 3);
   49|      1|
   50|      1|  __sync_fetch_and_add(AL + 4, 1);
   51|      1|  __sync_fetch_and_add(AL + 5, 4);
   52|      1|  __sync_fetch_and_add(AL + 6, 22);
   53|      1|  __sync_fetch_and_sub(AL + 7, 12);
   54|      1|  __sync_fetch_and_and(AL + 8, 7);
   55|      1|  __sync_fetch_and_or(AL + 9, 8);
   56|      1|  __sync_fetch_and_xor(AL + 10, 9);
   57|      1|  __sync_fetch_and_nand(AL + 11, 7);
   58|      1|}
   59|       |
   60|      1|int main() {
   61|      1|  memcpy(AI, init_noret_si, sizeof(init_noret_si));
   62|      1|  memcpy(AL, init_noret_di, sizeof(init_noret_di));
   63|      1|
   64|      1|  do_noret_si();
   65|      1|  do_noret_di();
   66|      1|
   67|      1|  if (memcmp(AI, test_noret_si, sizeof(test_noret_si)))
   68|      0|    abort();
   69|      1|  if (memcmp(AL, test_noret_di, sizeof(test_noret_di)))
   70|      0|    abort();
   71|      1|
   72|      1|  return 0;
   73|      1|}

