    1|       |/* Contributed by Jack Lloyd  <lloyd@randombit.net> */
    2|       |
    3|       |/* { dg-options "-O2 -ftree-vectorize" } */
    4|       |/* { dg-options "-O2 -ftree-vectorize -march=nocona" { target { i?86-*-*
    5|       | * x86_64-*-* } } } */
    6|       |
    7|       |typedef unsigned long long word;
    8|       |
    9|       |const unsigned int MP_WORD_BITS = 64;
   10|       |const word MP_WORD_MASK = ~((word)0);
   11|       |const word MP_WORD_TOP_BIT = (word)1 << (8 * sizeof(word) - 1);
   12|       |
   13|       |extern void abort(void);
   14|       |
   15|      1|word do_div(word n1, word n0, word d) {
   16|      1|  word high = n1 % d, quotient = 0;
   17|      1|  unsigned int j;
   18|      1|
   19|     65|  for (j = 0; j != MP_WORD_BITS; ++j) {
   20|     64|    word high_top_bit = (high & MP_WORD_TOP_BIT);
   21|     64|
   22|     64|    high <<= 1;
   23|     64|    high |= (n0 >> (MP_WORD_BITS - 1 - j)) & 1;
   24|     64|    quotient <<= 1;
   25|     64|
   26|     64|    if (high_top_bit || high >= d) {
   27|     12|      high -= d;
   28|     12|      quotient |= 1;
   29|     12|    }
   30|     64|  }
   31|      1|
   32|      1|  return quotient;
   33|      1|}
   34|       |
   35|      1|int main() {
   36|      1|  word result;
   37|      1|
   38|      1|  result =
   39|      1|      do_div(0x0000000000200000ll, 0x0000000000000000ll, 0x86E53497CE000000ll);
   40|      1|
   41|      1|  if (result != 0x3CBA83)
   42|      0|    abort();
   43|      1|
   44|      1|  return 0;
   45|      1|}

