        -:    0:Source:3067.c
        -:    0:Graph:3067.gcno
        -:    0:Data:3067.gcda
        -:    0:Runs:1
        -:    1:/* Verify that flexible arrays can be initialized from STRING_CST
        -:    2:   constructors. */
        -:    3:
        -:    4:/* Baselines.  */
        -:    5:struct {
        -:    6:  char a1c;
        -:    7:  char *a1p;
        -:    8:} a1 = {'4', "62"};
        -:    9:
        -:   10:struct {
        -:   11:  char a2c;
        -:   12:  char a2p[2];
        -:   13:} a2 = {'v', "cq"};
        -:   14:
        -:   15:/* The tests.  */
        -:   16:struct {
        -:   17:  char a3c;
        -:   18:  char a3p[];
        -:   19:} a3 = {'o', "wx"};
        -:   20:
        -:   21:struct {
        -:   22:  char a4c;
        -:   23:  char a4p[];
        -:   24:} a4 = {'9', {'e', 'b'}};
        -:   25:
        1:   26:main() {
        1:   27:  if (a1.a1c != '4')
    #####:   28:    abort();
        1:   29:  if (a1.a1p[0] != '6')
    #####:   30:    abort();
        1:   31:  if (a1.a1p[1] != '2')
    #####:   32:    abort();
        1:   33:  if (a1.a1p[2] != '\0')
    #####:   34:    abort();
        -:   35:
        1:   36:  if (a2.a2c != 'v')
    #####:   37:    abort();
        1:   38:  if (a2.a2p[0] != 'c')
    #####:   39:    abort();
        1:   40:  if (a2.a2p[1] != 'q')
    #####:   41:    abort();
        -:   42:
        1:   43:  if (a3.a3c != 'o')
    #####:   44:    abort();
        1:   45:  if (a3.a3p[0] != 'w')
    #####:   46:    abort();
        1:   47:  if (a3.a3p[1] != 'x')
    #####:   48:    abort();
        -:   49:
        1:   50:  if (a4.a4c != '9')
    #####:   51:    abort();
        1:   52:  if (a4.a4p[0] != 'e')
    #####:   53:    abort();
        1:   54:  if (a4.a4p[1] != 'b')
    #####:   55:    abort();
        -:   56:
        1:   57:  return 0;
        -:   58:}
