        -:    0:Source:443.c
        -:    0:Graph:443.gcno
        -:    0:Data:443.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-fno-common" { target hppa*-*-hpux* } } */
        -:    3:#define vector __attribute__((vector_size(sizeof(int) * 4)))
        -:    4:
        -:    5:/* Check to make sure that we extract and insert the vector at the same
        -:    6:   location for vector subscripting (with constant indexes) and
        -:    7:   that vectors layout are the same as arrays. */
        -:    8:
        -:    9:struct TV4 {
        -:   10:  vector int v;
        -:   11:};
        -:   12:
        -:   13:typedef struct TV4 MYV4;
        -:   14:
        1:   15:static inline MYV4 myfunc2(int x, int y, int z, int w) {
        -:   16:  MYV4 temp;
        1:   17:  temp.v[0] = x;
        1:   18:  temp.v[1] = y;
        1:   19:  temp.v[2] = z;
        1:   20:  temp.v[3] = w;
        1:   21:  return temp;
        -:   22:}
        -:   23:MYV4 val3;
        1:   24:__attribute__((noinline)) void modify(void) { val3 = myfunc2(1, 2, 3, 4); }
        1:   25:int main(int argc, char *argv[]) {
        -:   26:  int a[4];
        -:   27:  int i;
        -:   28:
        -:   29:  /* Set up the vector.  */
        1:   30:  modify();
        -:   31:
        -:   32:  /* Check the vector via the global variable.  */
        1:   33:  if (val3.v[0] != 1)
    #####:   34:    __builtin_abort();
        1:   35:  if (val3.v[1] != 2)
    #####:   36:    __builtin_abort();
        1:   37:  if (val3.v[2] != 3)
    #####:   38:    __builtin_abort();
        1:   39:  if (val3.v[3] != 4)
    #####:   40:    __builtin_abort();
        -:   41:
        1:   42:  vector int a1 = val3.v;
        -:   43:
        -:   44:  /* Check the vector via a local variable.  */
        1:   45:  if (a1[0] != 1)
    #####:   46:    __builtin_abort();
        1:   47:  if (a1[1] != 2)
    #####:   48:    __builtin_abort();
        1:   49:  if (a1[2] != 3)
    #####:   50:    __builtin_abort();
        1:   51:  if (a1[3] != 4)
    #####:   52:    __builtin_abort();
        -:   53:
        1:   54:  __builtin_memcpy(a, &val3, sizeof(a));
        -:   55:  /* Check the vector via copying it to an array.  */
        5:   56:  for (i = 0; i < 4; i++)
        4:   57:    if (a[i] != i + 1)
    #####:   58:      __builtin_abort();
        -:   59:
        1:   60:  return 0;
        -:   61:}
