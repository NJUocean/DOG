    1|       |/* { dg-do run } */
    2|       |/* { dg-require-effective-target vsx_hw } */
    3|       |/* { dg-options "-O3 -mdejagnu-cpu=power7" } */
    4|       |
    5|       |/* PR85698: Incorrect code generated on LE due to use of stxvw4x. */
    6|       |
    7|       |typedef unsigned char uint8_t;
    8|       |typedef short int16_t;
    9|       |extern void abort(void);
   10|       |extern int memcmp(const void *, const void *, __SIZE_TYPE__);
   11|       |
   12|       |uint8_t expected[128] = {
   13|       |    14,  0,   4,   2,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,
   14|       |    15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
   15|       |    30,  31,  28,  35,  33,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
   16|       |    45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
   17|       |    60,  61,  62,  63,  66,  63,  66,  67,  68,  69,  70,  71,  72,  73,  74,
   18|       |    75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
   19|       |    90,  91,  92,  93,  94,  95,  97,  96,  98,  99,  100, 101, 102, 103, 104,
   20|       |    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
   21|       |    120, 121, 122, 123, 124, 125, 126, 127};
   22|       |
   23|     16|static uint8_t x264_clip_uint8(int x) { return x & (~255) ? (-x) >> 31 : x; }
   24|      1|void add4x4_idct(uint8_t *p_dst, int16_t dct[16]) {
   25|      1|  int16_t d[16];
   26|      1|  int16_t tmp[16];
   27|      1|  int i, y, x;
   28|      5|  for (i = 0; i < 4; i++) {
   29|      4|    int s02 = dct[0 * 4 + i] + dct[2 * 4 + i];
   30|      4|    int d02 = dct[0 * 4 + i] - dct[2 * 4 + i];
   31|      4|    int s13 = dct[1 * 4 + i] + (dct[3 * 4 + i] >> 1);
   32|      4|    int d13 = (dct[1 * 4 + i] >> 1) - dct[3 * 4 + i];
   33|      4|    tmp[i * 4 + 0] = s02 + s13;
   34|      4|    tmp[i * 4 + 1] = d02 + d13;
   35|      4|    tmp[i * 4 + 2] = d02 - d13;
   36|      4|    tmp[i * 4 + 3] = s02 - s13;
   37|      4|  }
   38|      5|  for (i = 0; i < 4; i++) {
   39|      4|    int s02 = tmp[0 * 4 + i] + tmp[2 * 4 + i];
   40|      4|    int d02 = tmp[0 * 4 + i] - tmp[2 * 4 + i];
   41|      4|    int s13 = tmp[1 * 4 + i] + (tmp[3 * 4 + i] >> 1);
   42|      4|    int d13 = (tmp[1 * 4 + i] >> 1) - tmp[3 * 4 + i];
   43|      4|    d[0 * 4 + i] = (s02 + s13 + 32) >> 6;
   44|      4|    d[1 * 4 + i] = (d02 + d13 + 32) >> 6;
   45|      4|    d[2 * 4 + i] = (d02 - d13 + 32) >> 6;
   46|      4|    d[3 * 4 + i] = (s02 - s13 + 32) >> 6;
   47|      4|  }
   48|      5|  for (y = 0; y < 4; y++) {
   49|     20|    for (x = 0; x < 4; x++)
   50|     16|      p_dst[x] = x264_clip_uint8(p_dst[x] + d[y * 4 + x]);
   51|      4|    p_dst += 32;
   52|      4|  }
   53|      1|}
   54|       |
   55|      1|int main() {
   56|      1|  uint8_t dst[128];
   57|      1|  int16_t dct[16];
   58|      1|  int i;
   59|      1|
   60|     17|  for (i = 0; i < 16; i++)
   61|     16|    dct[i] = i * 10 + i;
   62|    129|  for (i = 0; i < 128; i++)
   63|    128|    dst[i] = i;
   64|      1|
   65|      1|  add4x4_idct(dst, dct);
   66|      1|
   67|      1|  if (memcmp(dst, expected, 128))
   68|      0|    abort();
   69|      1|
   70|      1|  return 0;
   71|      1|}

