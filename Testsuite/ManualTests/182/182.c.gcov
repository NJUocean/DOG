        -:    0:Source:182.c
        -:    0:Graph:182.gcno
        -:    0:Data:182.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-O1 -Wall" } */
        -:    3:
        -:    4:#define choose __builtin_choose_expr
        -:    5:
        -:    6:/* Check the type of __builtin_choose_expr between E1 and E2, both
        -:    7:   ways round and with both 0 and 1 as the condition.  */
        -:    8:#define ASSERT_COND_TYPE(E1, E2)                                               \
        -:    9:  do {                                                                         \
        -:   10:    typedef __typeof(E1) T1;                                                   \
        -:   11:    typedef __typeof(E2) T2;                                                   \
        -:   12:    typedef T1 **T1pp;                                                         \
        -:   13:    typedef T2 **T2pp;                                                         \
        -:   14:    typedef __typeof(choose(1, (E1), (E2))) T1a;                               \
        -:   15:    typedef __typeof(choose(0, (E2), (E1))) T1b;                               \
        -:   16:    typedef __typeof(choose(1, (E2), (E1))) T2a;                               \
        -:   17:    typedef __typeof(choose(0, (E1), (E2))) T2b;                               \
        -:   18:    typedef T1a **T1app;                                                       \
        -:   19:    typedef T1b **T1bpp;                                                       \
        -:   20:    typedef T2a **T2app;                                                       \
        -:   21:    typedef T2b **T2bpp;                                                       \
        -:   22:    T1pp t1 = 0;                                                               \
        -:   23:    T2pp t2 = 0;                                                               \
        -:   24:    T1app t1a = 0;                                                             \
        -:   25:    T1bpp t1b = 0;                                                             \
        -:   26:    T2app t2a = 0;                                                             \
        -:   27:    T2bpp t2b = 0;                                                             \
        -:   28:    t1 = t1a;                                                                  \
        -:   29:    t1 = t1b;                                                                  \
        -:   30:    t2 = t2a;                                                                  \
        -:   31:    t2 = t2b;                                                                  \
        -:   32:    (void)t1;                                                                  \
        -:   33:    (void)t2;                                                                  \
        -:   34:  } while (0)
        -:   35:
        -:   36:extern void abort();
        -:   37:extern void exit();
        -:   38:
    #####:   39:void bad() { abort(); }
        -:   40:
        1:   41:void good() { exit(0); }
        -:   42:
        1:   43:int main(void) {
        -:   44:  signed char sc1, sc2;
        -:   45:  void *v1;
        -:   46:  int i, j;
        -:   47:  double dd;
        -:   48:  float f;
        -:   49:  typedef void (*fpt)(void);
        -:   50:  fpt triple;
        -:   51:  struct S {
        -:   52:    int x, y;
        -:   53:  } pour, some, sugar;
        -:   54:  union u {
        -:   55:    int p;
        -:   56:  } united, nations;
        -:   57:
        -:   58:  if (__builtin_choose_expr(0, 12, 0) || !__builtin_choose_expr(45, 5, 0) ||
        -:   59:      !__builtin_choose_expr(45, 3, 0))
        -:   60:    abort();
        -:   61:
        1:   62:  ASSERT_COND_TYPE(sc1, sc2);
        1:   63:  ASSERT_COND_TYPE(v1, sc1);
        1:   64:  ASSERT_COND_TYPE(i, j);
        1:   65:  ASSERT_COND_TYPE(dd, main);
        1:   66:  ASSERT_COND_TYPE((float)dd, i);
        1:   67:  ASSERT_COND_TYPE(4, f);
        1:   68:  ASSERT_COND_TYPE(triple, some);
        1:   69:  ASSERT_COND_TYPE(united, nations);
        1:   70:  ASSERT_COND_TYPE(nations, main);
        -:   71:
        1:   72:  pour.y = 69;
        1:   73:  __builtin_choose_expr(0, bad(), sugar) = pour;
        1:   74:  if (sugar.y != 69)
    #####:   75:    abort();
        -:   76:
        1:   77:  __builtin_choose_expr(sizeof(int), f, bad()) = 3.5F;
        -:   78:
        1:   79:  if (f != 3.5F)
    #####:   80:    abort();
        -:   81:
        1:   82:  __builtin_choose_expr(1, good, bad)();
        -:   83:
    #####:   84:  exit(0);
        -:   85:}
