    1|       |/* { dg-require-effective-target size32plus } */
    2|       |
    3|       |#define DEBUG 0
    4|       |#if DEBUG
    5|       |#include <stdio.h>
    6|       |#endif
    7|       |
    8|  8.12M|#define N 200
    9|       |
   10|       |int A[N][N], B[N][N], C[N][N];
   11|       |
   12|      1|static int __attribute__((noinline)) matmult(void) {
   13|      1|  int i, j, k;
   14|      1|
   15|      1|  /* Loops J and K should be interchanged.  */
   16|    201|  for (i = 0; i < N; i++)
   17|  40.2k|    for (j = 0; j < N; j++) {
   18|  40.0k|      A[i][j] = 0;
   19|  8.04M|      for (k = 0; k < N; k++)
   20|  8.00M|        A[i][j] += B[i][k] * C[k][j];
   21|  40.0k|    }
   22|      1|
   23|      1|  return A[0][0] + A[N - 1][N - 1];
   24|      1|}
   25|       |
   26|       |extern void abort();
   27|       |
   28|      1|int main(void) {
   29|      1|  int i, j, res;
   30|      1|
   31|    201|  for (i = 0; i < N; i++)
   32|  40.2k|    for (j = 0; j < N; j++) {
   33|  40.0k|      A[i][j] = 0;
   34|  40.0k|      B[i][j] = i - j;
   35|  40.0k|      C[i][j] = i + j;
   36|  40.0k|    }
   37|      1|
   38|      1|  res = matmult();
   39|      1|
   40|       |#if DEBUG
   41|       |  fprintf(stderr, "res = %d \n", res);
   42|       |#endif
   43|      1|
   44|      1|  if (res != 2626800)
   45|      0|    abort();
   46|      1|
   47|      1|  return 0;
   48|      1|}
   49|       |
   50|       |/* { dg-final { scan-tree-dump "tiled by" "graphite" } } */

