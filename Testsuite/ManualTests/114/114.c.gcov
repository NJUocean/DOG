        -:    0:Source:114.c
        -:    0:Graph:114.gcno
        -:    0:Data:114.gcda
        -:    0:Runs:1
        -:    1:/* Test __atomic routines for existence and proper execution on 2 byte
        -:    2:   values with each valid memory model.  */
        -:    3:/* { dg-do run } */
        -:    4:/* { dg-require-effective-target sync_char_short } */
        -:    5:
        -:    6:/* Test the execution of the __atomic_X builtin for a short.  */
        -:    7:
        -:    8:extern void abort(void);
        -:    9:
        -:   10:short v, count, ret;
        -:   11:
        1:   12:int main() {
        1:   13:  v = 0;
        1:   14:  count = 0;
        -:   15:
        1:   16:  if (__atomic_exchange_n(&v, count + 1, __ATOMIC_RELAXED) != count)
    #####:   17:    abort();
        1:   18:  count++;
        -:   19:
        1:   20:  if (__atomic_exchange_n(&v, count + 1, __ATOMIC_ACQUIRE) != count)
    #####:   21:    abort();
        1:   22:  count++;
        -:   23:
        1:   24:  if (__atomic_exchange_n(&v, count + 1, __ATOMIC_RELEASE) != count)
    #####:   25:    abort();
        1:   26:  count++;
        -:   27:
        1:   28:  if (__atomic_exchange_n(&v, count + 1, __ATOMIC_ACQ_REL) != count)
    #####:   29:    abort();
        1:   30:  count++;
        -:   31:
        1:   32:  if (__atomic_exchange_n(&v, count + 1, __ATOMIC_SEQ_CST) != count)
    #####:   33:    abort();
        1:   34:  count++;
        -:   35:
        -:   36:  /* Now test the generic version.  */
        -:   37:
        1:   38:  count++;
        -:   39:
        1:   40:  __atomic_exchange(&v, &count, &ret, __ATOMIC_RELAXED);
        1:   41:  if (ret != count - 1 || v != count)
    #####:   42:    abort();
        1:   43:  count++;
        -:   44:
        1:   45:  __atomic_exchange(&v, &count, &ret, __ATOMIC_ACQUIRE);
        1:   46:  if (ret != count - 1 || v != count)
    #####:   47:    abort();
        1:   48:  count++;
        -:   49:
        1:   50:  __atomic_exchange(&v, &count, &ret, __ATOMIC_RELEASE);
        1:   51:  if (ret != count - 1 || v != count)
    #####:   52:    abort();
        1:   53:  count++;
        -:   54:
        1:   55:  __atomic_exchange(&v, &count, &ret, __ATOMIC_ACQ_REL);
        1:   56:  if (ret != count - 1 || v != count)
    #####:   57:    abort();
        1:   58:  count++;
        -:   59:
        1:   60:  __atomic_exchange(&v, &count, &ret, __ATOMIC_SEQ_CST);
        1:   61:  if (ret != count - 1 || v != count)
    #####:   62:    abort();
        1:   63:  count++;
        -:   64:
        1:   65:  return 0;
        -:   66:}
