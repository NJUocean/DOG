        -:    0:Source:2199.c
        -:    0:Graph:2199.gcno
        -:    0:Data:2199.gcda
        -:    0:Runs:1
        -:    1:/* Compiler Test Generator Program.
        -:    2:   Copyright (C) 1989 FSF.  */
        -:    3:
        -:    4:#define E0 ((type *)10000000)
        -:    5:#define reg0 r0
        -:    6:#define indreg0 (*p0)
        -:    7:#define imm0 22
        -:    8:#define limm0 ((type)(int)&glob0)
        -:    9:#define adr0 (*E0)
        -:   10:#define adrreg0 (p0[10000000])
        -:   11:#define adrx0 (E0[x0])
        -:   12:#define regx0 (p0[x0])
        -:   13:
        -:   14:#define E1 ((type *)11111111)
        -:   15:#define reg1 r1
        -:   16:#define indreg1 (*p1)
        -:   17:#define imm1 33
        -:   18:#define limm1 ((type)(int)&glob1)
        -:   19:#define adr1 (*E1)
        -:   20:#define adrreg1 (p1[1111111 / 4])
        -:   21:#define adrx1 (E1[x1])
        -:   22:#define regx1 (p1[x1])
        -:   23:
        -:   24:int glob0, glob1;
        -:   25:
        -:   26:#define type double
        -:   27:
        -:   28:char *a0[] = {"reg0", "indreg0", "imm0",  "limm0",
        -:   29:              "adr0", "adrreg0", "adrx0", "regx0"};
        -:   30:char *a1[] = {"reg1", "indreg1", "imm1",  "limm1",
        -:   31:              "adr1", "adrreg1", "adrx1", "regx1"};
        -:   32:
    #####:   33:main_compare() {
        -:   34:  int i0, i1;
        -:   35:
    #####:   36:  for (i0 = 0; i0 < 8; i0++) {
    #####:   37:    for (i1 = 0; i1 < 8; i1++) {
    #####:   38:      printf("%s%s_cmp (r0, r1, x0, x1, p0, p1)\n", a0[i0], a1[i1]);
    #####:   39:      printf("type r0, r1;  type *p0, *p1;\n");
    #####:   40:      printf("{if (%s <= %s) return 1; else return 0;}\n\n", a0[i0], a1[i1],
        -:   41:             a0[i0]);
        -:   42:    }
        -:   43:  }
    #####:   44:}
        -:   45:
        1:   46:main_assign() {
        -:   47:  int i0, i1;
        -:   48:
        9:   49:  for (i0 = 0; i0 < 8; i0++) {
        8:   50:    if (i0 < 2 || i0 > 3)
       54:   51:      for (i1 = 0; i1 < 8; i1++) {
       48:   52:        printf("%s%s_set (r0, r1, x0, x1, p0, p1)\n", a0[i0], a1[i1]);
       48:   53:        printf("type r0, r1;  type *p0, *p1;\n");
       48:   54:        printf("{%s = %s;  }\n\n", a0[i0], a1[i1]);
        -:   55:      }
        -:   56:  }
        1:   57:}
        -:   58:
        1:   59:main() { main_assign(); }
