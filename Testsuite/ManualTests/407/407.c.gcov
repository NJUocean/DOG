        -:    0:Source:407.c
        -:    0:Graph:407.gcno
        -:    0:Data:407.gcda
        -:    0:Runs:1
        -:    1:/* { dg-require-effective-target size32plus } */
        -:    2:
        -:    3:#define DEBUG 0
        -:    4:#if DEBUG
        -:    5:#include <stdio.h>
        -:    6:#endif
        -:    7:
        -:    8:#define N 200
        -:    9:
        -:   10:int A[N][N], B[N][N], C[N][N];
        -:   11:
        1:   12:static void __attribute__((noinline)) matmult(void) {
        -:   13:  int i, j, k;
        -:   14:
      201:   15:  for (i = 0; i < N; i++)
    40200:   16:    for (j = 0; j < N; j++)
    40000:   17:      A[i][j] = 0;
        -:   18:
        -:   19:  /* Loops J and K should be interchanged.  */
      201:   20:  for (i = 0; i < N; i++)
    40200:   21:    for (j = 0; j < N; j++)
  8040000:   22:      for (k = 0; k < N; k++)
  8000000:   23:        A[i][j] += B[i][k] * C[k][j];
        1:   24:}
        -:   25:
        -:   26:extern void abort();
        -:   27:
        1:   28:int main(void) {
        1:   29:  int i, j, res = 0;
        -:   30:
      201:   31:  for (i = 0; i < N; i++)
    40200:   32:    for (j = 0; j < N; j++) {
    40000:   33:      B[i][j] = j;
    40000:   34:      C[i][j] = i;
        -:   35:    }
        -:   36:
        1:   37:  matmult();
        -:   38:
      201:   39:  for (i = 0; i < N; i++)
      200:   40:    res += A[i][i];
        -:   41:
        -:   42:#if DEBUG
        -:   43:  fprintf(stderr, "res = %d \n", res);
        -:   44:#endif
        -:   45:
        1:   46:  if (res != 529340000)
    #####:   47:    abort();
        -:   48:
        1:   49:  return 0;
        -:   50:}
        -:   51:
        -:   52:/* { dg-final { scan-tree-dump "tiled by" "graphite" } } */
