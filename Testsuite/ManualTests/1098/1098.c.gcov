        -:    0:Source:1098.c
        -:    0:Graph:1098.gcno
        -:    0:Data:1098.gcda
        -:    0:Runs:1
        -:    1:/* PR target/93995 */
        -:    2:/* { dg-do run } */
        -:    3:/* { dg-options "-O2 -fno-trapping-math" } */
        -:    4:
        -:    5:double s1[4], s2[4], s3[64];
        -:    6:
        1:    7:int main(void) {
        -:    8:  int i;
        1:    9:  asm volatile("" : : : "memory");
        5:   10:  for (i = 0; i < 4; i++)
       4*:   11:    s3[0 * 4 + i] = __builtin_isgreater(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   12:  for (i = 0; i < 4; i++)
       4*:   13:    s3[1 * 4 + i] = (!__builtin_isgreater(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   14:  for (i = 0; i < 4; i++)
       4*:   15:    s3[2 * 4 + i] = __builtin_isgreaterequal(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   16:  for (i = 0; i < 4; i++)
       4*:   17:    s3[3 * 4 + i] = (!__builtin_isgreaterequal(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   18:  for (i = 0; i < 4; i++)
       4*:   19:    s3[4 * 4 + i] = __builtin_isless(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   20:  for (i = 0; i < 4; i++)
       4*:   21:    s3[5 * 4 + i] = (!__builtin_isless(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   22:  for (i = 0; i < 4; i++)
       4*:   23:    s3[6 * 4 + i] = __builtin_islessequal(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   24:  for (i = 0; i < 4; i++)
       4*:   25:    s3[7 * 4 + i] = (!__builtin_islessequal(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   26:  for (i = 0; i < 4; i++)
       4*:   27:    s3[8 * 4 + i] = __builtin_islessgreater(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   28:  for (i = 0; i < 4; i++)
       4*:   29:    s3[9 * 4 + i] = (!__builtin_islessgreater(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   30:  for (i = 0; i < 4; i++)
       4*:   31:    s3[10 * 4 + i] = __builtin_isunordered(s1[i], s2[i]) ? -1.0 : 0.0;
        5:   32:  for (i = 0; i < 4; i++)
       4*:   33:    s3[11 * 4 + i] = (!__builtin_isunordered(s1[i], s2[i])) ? -1.0 : 0.0;
        5:   34:  for (i = 0; i < 4; i++)
       4*:   35:    s3[12 * 4 + i] = s1[i] > s2[i] ? -1.0 : 0.0;
        5:   36:  for (i = 0; i < 4; i++)
       4*:   37:    s3[13 * 4 + i] = s1[i] >= s2[i] ? -1.0 : 0.0;
        5:   38:  for (i = 0; i < 4; i++)
       4*:   39:    s3[14 * 4 + i] = s1[i] < s2[i] ? -1.0 : 0.0;
        5:   40:  for (i = 0; i < 4; i++)
       4*:   41:    s3[15 * 4 + i] = s1[i] <= s2[i] ? -1.0 : 0.0;
        1:   42:  asm volatile("" : : : "memory");
        1:   43:  return 0;
        -:   44:}
