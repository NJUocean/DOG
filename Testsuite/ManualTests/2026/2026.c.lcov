    1|       |/* { dg-do run } */
    2|       |/* { dg-options "-O2 -fno-inline -fpredictive-commoning
    3|       | * -fdump-tree-pcom-details" } */
    4|       |
    5|       |int arr[105] = {2, 3, 5, 7, 11};
    6|       |int x[105] = {2, 3, 5, 7, 11};
    7|       |int result0[10] = {2, 3, 5, 7, 11};
    8|       |int result1[10] = {0, 0, 0, 0, 0, 0, -1, -2, -2};
    9|       |
   10|       |extern void abort(void);
   11|       |
   12|       |int __attribute__((noinline))
   13|      2|foo(int *__restrict__ a, int *__restrict__ b, int len, int flag) {
   14|      2|  int i, sum = 0;
   15|      8|  for (i = 0; i < len; i++) {
   16|      6|    a[i] = 0;
   17|      6|    b[i + 2] = i;
   18|      6|    a[i + 1] = -1;
   19|      6|    sum += b[i];
   20|      6|    a[i + 3] = -2;
   21|      6|  }
   22|      2|  return sum;
   23|      2|}
   24|       |
   25|      2|void check(int *a, int *res, int len, int sum, int val) {
   26|      2|  int i;
   27|      2|
   28|      2|  if (sum != val)
   29|      0|    abort();
   30|      2|
   31|     22|  for (i = 0; i < len; i++)
   32|     20|    if (a[i] != res[i])
   33|      0|      abort();
   34|      2|}
   35|       |
   36|      1|int main(void) {
   37|      1|  int i, sum;
   38|      1|
   39|      1|  sum = foo(arr, x, 0, 0);
   40|      1|  check(arr, result0, 10, sum, 0);
   41|      1|
   42|      1|  sum = foo(arr, x, 6, 0);
   43|      1|  check(arr, result1, 10, sum, 11);
   44|      1|
   45|      1|  return 0;
   46|      1|}
   47|       |/* { dg-final { scan-tree-dump "Store-stores chain" "pcom"} } */
   48|       |/* { dg-final { scan-tree-dump "Store-loads chain" "pcom"} } */

