        -:    0:Source:2026.c
        -:    0:Graph:2026.gcno
        -:    0:Data:2026.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-O2 -fno-inline -fpredictive-commoning
        -:    3: * -fdump-tree-pcom-details" } */
        -:    4:
        -:    5:int arr[105] = {2, 3, 5, 7, 11};
        -:    6:int x[105] = {2, 3, 5, 7, 11};
        -:    7:int result0[10] = {2, 3, 5, 7, 11};
        -:    8:int result1[10] = {0, 0, 0, 0, 0, 0, -1, -2, -2};
        -:    9:
        -:   10:extern void abort(void);
        -:   11:
        -:   12:int __attribute__((noinline))
        2:   13:foo(int *__restrict__ a, int *__restrict__ b, int len, int flag) {
        2:   14:  int i, sum = 0;
        8:   15:  for (i = 0; i < len; i++) {
        6:   16:    a[i] = 0;
        6:   17:    b[i + 2] = i;
        6:   18:    a[i + 1] = -1;
        6:   19:    sum += b[i];
        6:   20:    a[i + 3] = -2;
        -:   21:  }
        2:   22:  return sum;
        -:   23:}
        -:   24:
        2:   25:void check(int *a, int *res, int len, int sum, int val) {
        -:   26:  int i;
        -:   27:
        2:   28:  if (sum != val)
    #####:   29:    abort();
        -:   30:
       22:   31:  for (i = 0; i < len; i++)
       20:   32:    if (a[i] != res[i])
    #####:   33:      abort();
        2:   34:}
        -:   35:
        1:   36:int main(void) {
        -:   37:  int i, sum;
        -:   38:
        1:   39:  sum = foo(arr, x, 0, 0);
        1:   40:  check(arr, result0, 10, sum, 0);
        -:   41:
        1:   42:  sum = foo(arr, x, 6, 0);
        1:   43:  check(arr, result1, 10, sum, 11);
        -:   44:
        1:   45:  return 0;
        -:   46:}
        -:   47:/* { dg-final { scan-tree-dump "Store-stores chain" "pcom"} } */
        -:   48:/* { dg-final { scan-tree-dump "Store-loads chain" "pcom"} } */
