        -:    0:Source:1350.c
        -:    0:Graph:1350.gcno
        -:    0:Data:1350.gcda
        -:    0:Runs:1
        -:    1:/* Test that __builtin_prefetch does no harm.
        -:    2:
        -:    3:   Use addresses that are unlikely to be word-aligned.  Some targets
        -:    4:   have alignment requirements for prefetch addresses, so make sure the
        -:    5:   compiler takes care of that.  This fails if it aborts, anything else
        -:    6:   is OK.  */
        -:    7:
        -:    8:struct S {
        -:    9:  short a;
        -:   10:  short b;
        -:   11:  char c[8];
        -:   12:} s;
        -:   13:
        -:   14:char arr[100];
        -:   15:char *ptr = arr;
        -:   16:int idx = 3;
        -:   17:
        2:   18:void arg_ptr(char *p) { __builtin_prefetch(p, 0, 0); }
        -:   19:
        2:   20:void arg_idx(char *p, int i) { __builtin_prefetch(&p[i], 0, 0); }
        -:   21:
        2:   22:void glob_ptr(void) { __builtin_prefetch(ptr, 0, 0); }
        -:   23:
        2:   24:void glob_idx(void) { __builtin_prefetch(&ptr[idx], 0, 0); }
        -:   25:
        1:   26:int main() {
        1:   27:  __builtin_prefetch(&s.b, 0, 0);
        1:   28:  __builtin_prefetch(&s.c[1], 0, 0);
        -:   29:
        1:   30:  arg_ptr(&s.c[1]);
        1:   31:  arg_ptr(ptr + 3);
        1:   32:  arg_idx(ptr, 3);
        1:   33:  arg_idx(ptr + 1, 2);
        1:   34:  idx = 3;
        1:   35:  glob_ptr();
        1:   36:  glob_idx();
        1:   37:  ptr++;
        1:   38:  idx = 2;
        1:   39:  glob_ptr();
        1:   40:  glob_idx();
        1:   41:  exit(0);
        -:   42:}
