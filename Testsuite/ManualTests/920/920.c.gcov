        -:    0:Source:920.c
        -:    0:Graph:920.gcno
        -:    0:Data:920.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-set-target-env-var ASAN_OPTIONS "detect_invalid_pointer_pairs=2
        -:    3: * halt_on_error=1" } */
        -:    4:/* { dg-options "-fsanitize=address,pointer-compare" } */
        -:    5:
        -:    6:volatile int v;
        -:    7:
        1:    8:int foo(char *p) {
        1:    9:  char *p2 = p + 20;
        1:   10:  v = p > p2;
        1:   11:  return v;
        -:   12:}
        -:   13:
       26:   14:void bar(char *p, char *q) { v = p <= q; }
        -:   15:
       1*:   16:void baz(char *p, char *q) { v = (p != 0 && p < q); }
        -:   17:
        -:   18:char global[8192] = {};
        -:   19:char small_global[7] = {};
        -:   20:
        1:   21:int main() {
        -:   22:  /* Heap allocated memory.  */
        1:   23:  char *p = (char *)__builtin_malloc(42);
        1:   24:  int r = foo(p);
        1:   25:  __builtin_free(p);
        -:   26:
        1:   27:  p = (char *)__builtin_malloc(1024);
        1:   28:  bar(p, p + 1024);
        1:   29:  bar(p + 1024, p + 1023);
        1:   30:  bar(p + 1, p + 1023);
        1:   31:  __builtin_free(p);
        -:   32:
        1:   33:  p = (char *)__builtin_malloc(4096);
        1:   34:  bar(p, p + 4096);
        1:   35:  bar(p + 10, p + 100);
        1:   36:  bar(p + 1024, p + 4096);
        1:   37:  bar(p + 4095, p + 4096);
        1:   38:  bar(p + 4095, p + 4094);
        1:   39:  bar(p + 100, p + 4096);
        1:   40:  bar(p + 100, p + 4094);
        1:   41:  __builtin_free(p);
        -:   42:
        -:   43:  /* Global variable.  */
        1:   44:  bar(&global[0], &global[1]);
        1:   45:  bar(&global[1], &global[2]);
        1:   46:  bar(&global[2], &global[1]);
        1:   47:  bar(&global[0], &global[100]);
        1:   48:  bar(&global[1000], &global[7000]);
        1:   49:  bar(&global[500], &global[10]);
        1:   50:  p = &global[0];
        1:   51:  bar(p, p + 8192);
        1:   52:  p = &global[8000];
        1:   53:  bar(p, p + 192);
        -:   54:
        1:   55:  p = &small_global[0];
        1:   56:  bar(p, p + 1);
        1:   57:  bar(p, p + 7);
        1:   58:  bar(p + 7, p + 1);
        1:   59:  bar(p + 6, p + 7);
        1:   60:  bar(p + 7, p + 7);
        -:   61:
        -:   62:  /* Stack variable.  */
        -:   63:  char stack[10000];
        1:   64:  bar(&stack[0], &stack[100]);
        1:   65:  bar(&stack[1000], &stack[9000]);
        1:   66:  bar(&stack[500], &stack[10]);
        -:   67:
        1:   68:  baz(0, &stack[10]);
        -:   69:
        1:   70:  return 0;
        -:   71:}
