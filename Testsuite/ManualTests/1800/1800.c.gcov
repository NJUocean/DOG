        -:    0:Source:1800.c
        -:    0:Graph:1800.gcno
        -:    0:Data:1800.gcda
        -:    0:Runs:1
        -:    1:/* Check that vector insertion works correctly. */
        -:    2:
        -:    3:/* { dg-do run } */
        -:    4:/* { dg-options "-msse" { target { i?86-*-* x86_64-*-* } } } */
        -:    5:/* { dg-require-effective-target sse_runtime { target { i?86-*-* x86_64-*-* } }
        -:    6: * } */
        -:    7:/* { dg-options "-mabi=altivec" { target { powerpc-*-* powerpc64-*-* } } } */
        -:    8:/* { dg-require-effective-target vmx_hw { target { powerpc-*-* powerpc64--*-* }
        -:    9: * } } */
        -:   10:
        -:   11:#define vector __attribute__((vector_size(16)))
        -:   12:
        -:   13:extern int memcmp(const void *, const void *, __SIZE_TYPE__);
        -:   14:
        1:   15:vector int f0(vector int t, int a) {
        1:   16:  ((int *)&t)[0] = a;
        1:   17:  return t;
        -:   18:}
        1:   19:vector int f1(vector int t, int a) {
        1:   20:  ((int *)&t)[1] = a;
        1:   21:  return t;
        -:   22:}
        1:   23:vector int f2(vector int t, int a) {
        1:   24:  ((int *)&t)[2] = a;
        1:   25:  return t;
        -:   26:}
        1:   27:vector int f3(vector int t, int a) {
        1:   28:  ((int *)&t)[3] = a;
        1:   29:  return t;
        -:   30:}
        1:   31:int main(void) {
        1:   32:  vector int a = {0, 0, 0, 0};
        1:   33:  vector int b = {1, 0, 0, 0};
        1:   34:  vector int c = {0, 1, 0, 0};
        1:   35:  vector int d = {0, 0, 1, 0};
        1:   36:  vector int e = {0, 0, 0, 1};
        -:   37:  vector int a0;
        1:   38:  a0 = f0(a, 1);
        1:   39:  if (memcmp(&a0, &b, sizeof(a0)))
    #####:   40:    __builtin_abort();
        1:   41:  a0 = f1(a, 1);
        1:   42:  if (memcmp(&a0, &c, sizeof(a0)))
    #####:   43:    __builtin_abort();
        1:   44:  a0 = f2(a, 1);
        1:   45:  if (memcmp(&a0, &d, sizeof(a0)))
    #####:   46:    __builtin_abort();
        1:   47:  a0 = f3(a, 1);
        1:   48:  if (memcmp(&a0, &e, sizeof(a0)))
    #####:   49:    __builtin_abort();
        1:   50:  return 0;
        -:   51:}
