        -:    0:Source:2801.c
        -:    0:Graph:2801.gcno
        -:    0:Data:2801.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-O1 -ftree-vectorize" } */
        -:    3:
        -:    4:unsigned int v1[] __attribute__((aligned(16))) = {
        -:    5:    0x80000000, 1, 0xa0000000, 2, 3, 0xd0000000, 0xf0000000, 0xe0000000};
        -:    6:unsigned int v2[] __attribute__((aligned(16))) = {
        -:    7:    4, 0xb0000000, 5, 0xc0000000, 0xd0000000, 6, 7, 8};
        -:    8:
        -:    9:unsigned int max[] = {0x80000000, 0xb0000000, 0xa0000000, 0xc0000000,
        -:   10:                      0xd0000000, 0xd0000000, 0xf0000000, 0xe0000000};
        -:   11:
        -:   12:unsigned int min[] = {4, 1, 5, 2, 3, 6, 7, 8};
        -:   13:
        -:   14:unsigned int res[8] __attribute__((aligned(16)));
        -:   15:
        -:   16:extern void abort(void);
        -:   17:
        1:   18:void find_max(void) {
        -:   19:  int i;
        -:   20:
        9:   21:  for (i = 0; i < 8; i++)
        8:   22:    res[i] = v1[i] < v2[i] ? v2[i] : v1[i];
        1:   23:}
        -:   24:
        1:   25:void find_min(void) {
        -:   26:  int i;
        -:   27:
        9:   28:  for (i = 0; i < 8; i++)
        8:   29:    res[i] = v1[i] > v2[i] ? v2[i] : v1[i];
        1:   30:}
        -:   31:
        1:   32:int main(void) {
        -:   33:  int i;
        1:   34:  int err = 0;
        -:   35:
        1:   36:  find_max();
        9:   37:  for (i = 0; i < 8; i++)
        8:   38:    if (res[i] != max[i])
    #####:   39:      err++;
        -:   40:
        1:   41:  find_min();
        9:   42:  for (i = 0; i < 8; i++)
        8:   43:    if (res[i] != min[i])
    #####:   44:      err++;
        -:   45:
        1:   46:  if (err)
    #####:   47:    abort();
        -:   48:
        1:   49:  return 0;
        -:   50:}
