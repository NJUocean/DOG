    1|       |/* Test __atomic routines for existence and proper execution on 2 byte
    2|       |   values with each valid memory model.  */
    3|       |/* { dg-do run } */
    4|       |/* { dg-require-effective-target sync_char_short } */
    5|       |
    6|       |/* Test the execution of the __atomic_compare_exchange_n builtin for a short. */
    7|       |
    8|       |extern void abort(void);
    9|       |
   10|       |short v = 0;
   11|       |short expected = 0;
   12|       |short max = ~0;
   13|       |short desired = ~0;
   14|       |short zero = 0;
   15|       |
   16|      8|#define STRONG 0
   17|      2|#define WEAK 1
   18|       |
   19|      1|int main() {
   20|      1|
   21|      1|  if (!__atomic_compare_exchange_n(&v, &expected, max, STRONG, __ATOMIC_RELAXED,
   22|      1|                                   __ATOMIC_RELAXED))
   23|      0|    abort();
   24|      1|  if (expected != 0)
   25|      0|    abort();
   26|      1|
   27|      1|  if (__atomic_compare_exchange_n(&v, &expected, 0, STRONG, __ATOMIC_ACQUIRE,
   28|      1|                                  __ATOMIC_RELAXED))
   29|      0|    abort();
   30|      1|  if (expected != max)
   31|      0|    abort();
   32|      1|
   33|      1|  if (!__atomic_compare_exchange_n(&v, &expected, 0, STRONG, __ATOMIC_RELEASE,
   34|      1|                                   __ATOMIC_ACQUIRE))
   35|      0|    abort();
   36|      1|  if (expected != max)
   37|      0|    abort();
   38|      1|  if (v != 0)
   39|      0|    abort();
   40|      1|
   41|      1|  if (__atomic_compare_exchange_n(&v, &expected, desired, WEAK,
   42|      1|                                  __ATOMIC_ACQ_REL, __ATOMIC_ACQUIRE))
   43|      0|    abort();
   44|      1|  if (expected != 0)
   45|      0|    abort();
   46|      1|
   47|      1|  if (!__atomic_compare_exchange_n(&v, &expected, desired, STRONG,
   48|      1|                                   __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST))
   49|      0|    abort();
   50|      1|  if (expected != 0)
   51|      0|    abort();
   52|      1|  if (v != max)
   53|      0|    abort();
   54|      1|
   55|      1|  /* Now test the generic version.  */
   56|      1|
   57|      1|  v = 0;
   58|      1|
   59|      1|  if (!__atomic_compare_exchange(&v, &expected, &max, STRONG, __ATOMIC_RELAXED,
   60|      1|                                 __ATOMIC_RELAXED))
   61|      0|    abort();
   62|      1|  if (expected != 0)
   63|      0|    abort();
   64|      1|
   65|      1|  if (__atomic_compare_exchange(&v, &expected, &zero, STRONG, __ATOMIC_ACQUIRE,
   66|      1|                                __ATOMIC_RELAXED))
   67|      0|    abort();
   68|      1|  if (expected != max)
   69|      0|    abort();
   70|      1|
   71|      1|  if (!__atomic_compare_exchange(&v, &expected, &zero, STRONG, __ATOMIC_RELEASE,
   72|      1|                                 __ATOMIC_ACQUIRE))
   73|      0|    abort();
   74|      1|  if (expected != max)
   75|      0|    abort();
   76|      1|  if (v != 0)
   77|      0|    abort();
   78|      1|
   79|      1|  if (__atomic_compare_exchange(&v, &expected, &desired, WEAK, __ATOMIC_ACQ_REL,
   80|      1|                                __ATOMIC_ACQUIRE))
   81|      0|    abort();
   82|      1|  if (expected != 0)
   83|      0|    abort();
   84|      1|
   85|      1|  if (!__atomic_compare_exchange(&v, &expected, &desired, STRONG,
   86|      1|                                 __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST))
   87|      0|    abort();
   88|      1|  if (expected != 0)
   89|      0|    abort();
   90|      1|  if (v != max)
   91|      0|    abort();
   92|      1|
   93|      1|  return 0;
   94|      1|}

