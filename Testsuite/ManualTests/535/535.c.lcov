    1|       |/* { dg-do run } */
    2|       |/* { dg-options "-g" } */
    3|       |
    4|      1|void __attribute__((noinline)) optimize_me_not() {
    5|      1|  __asm__ volatile("" : : : "memory");
    6|      1|}
    7|       |int a[7][8];
    8|      1|int main() {
    9|      1|  int b, j;
   10|      1|  b = 0;
   11|      8|  for (; b < 7; b++) {
   12|      7|    j = 0;
   13|     63|    for (; j < 8; j++)
   14|     56|      a[b][j] = 0;
   15|      7|  }
   16|      1|  /* j may very well be optimized out, so we cannot test for j == 8.
   17|      1|     Instead test j + 1 which will make the test UNSUPPORTED if i
   18|      1|     is optimized out.  Since the test previously had wrong debug
   19|      1|     with j == 0 this is acceptable.  */
   20|      1|  optimize_me_not(); /* { dg-final { gdb-test . "j + 1" "9" } } */
   21|      1|  return 0;
   22|      1|}

