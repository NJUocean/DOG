    1|       |/* { dg-lto-do link } */
    2|       |/* { dg-lto-options { { -O3 -flto } } } */
    3|       |
    4|       |typedef unsigned int UINT32;
    5|       |typedef unsigned long long UINT64;
    6|       |typedef struct {
    7|       |  UINT64 w[2];
    8|       |} UINT128;
    9|       |void _bid_to_dpd128(UINT128 *, UINT128 *);
   10|       |static const int short_recip_scale[] = {
   11|       |    1,        65 - 64,  69 - 64,  71 - 64,  75 - 64,  78 - 64,
   12|       |    81 - 64,  85 - 64,  88 - 64,  91 - 64,  95 - 64,  98 - 64,
   13|       |    101 - 64, 105 - 64, 108 - 64, 111 - 64, 115 - 64, 118 - 64};
   14|       |
   15|       |void _bid_to_dpd128(UINT128 *, UINT128 *);
   16|       |
   17|      0|void _bid_to_dpd128(UINT128 *pres, UINT128 *px) {
   18|      0|  UINT128 res;
   19|      0|  unsigned int comb;
   20|      0|  UINT128 bcoeff;
   21|      0|  UINT128 BH;
   22|      0|  UINT64 BL, d109;
   23|      0|  unsigned int amount;
   24|      0|  UINT128 x = *px;
   25|      0|
   26|      0|  comb = (x.w[1]) >> 46;
   27|      0|  if ((comb & 0x1e000) == 0x1e000) {
   28|      0|    res = x;
   29|      0|  } else {
   30|      0|    bcoeff.w[1] = (x.w[1] & 0x0001ffffffffffffull);
   31|      0|    bcoeff.w[0] = x.w[0];
   32|      0|    amount = 9;
   33|      0|    BH.w[0] = (BH.w[0] >> amount) | (BH.w[1] << (64 - amount));
   34|      0|    BL = bcoeff.w[0] - BH.w[0] * 1000000000000000000ull;
   35|      0|    d109 = 0x3333333333333334ull;
   36|      0|    {
   37|      0|      UINT64 CXH, CXL, CYH, CYL, PL, PH, PM, PM2;
   38|      0|      CXH = (BH.w[0]) >> 32;
   39|      0|      CXL = (UINT32)(BH.w[0]);
   40|      0|      CYH = (d109) >> 32;
   41|      0|      CYL = (UINT32)(d109);
   42|      0|      PM = CXH * CYL;
   43|      0|      PH = CXH * CYH;
   44|      0|      PL = CXL * CYL;
   45|      0|      PM2 = CXL * CYH;
   46|      0|      PH += (PM >> 32);
   47|      0|      PM = (UINT64)((UINT32)PM) + PM2 + (PL >> 32);
   48|      0|    };
   49|      0|    {
   50|      0|      UINT64 CXH, CXL, CYH, CYL, PL, PH, PM, PM2;
   51|      0|      CXH = (BL) >> 32;
   52|      0|      CXL = (UINT32)(BL);
   53|      0|      CYH = (d109) >> 32;
   54|      0|      CYL = (UINT32)(d109);
   55|      0|      PM = CXH * CYL;
   56|      0|      PH = CXH * CYH;
   57|      0|      PL = CXL * CYL;
   58|      0|      PM2 = CXL * CYH;
   59|      0|      PH += (PM >> 32);
   60|      0|      PM = (UINT64)((UINT32)PM) + PM2 + (PL >> 32);
   61|      0|    };
   62|      0|  }
   63|      0|  *pres = res;
   64|      0|}
   65|       |
   66|      1|int main() { return 0; }

