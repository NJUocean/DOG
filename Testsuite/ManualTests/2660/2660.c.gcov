        -:    0:Source:2660.c
        -:    0:Graph:2660.gcno
        -:    0:Data:2660.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-options "-O2" } */
        -:    3:
        -:    4:struct emac {
        -:    5:  unsigned reg[23];
        -:    6:};
        -:    7:
        -:    8:struct mop {
        -:    9:  unsigned long long addr;
        -:   10:  unsigned int size;
        -:   11:};
        -:   12:
    #####:   13:unsigned int __attribute__((__noinline__)) level(const struct emac *obj) {
    #####:   14:  return 0;
        -:   15:}
        -:   16:
        -:   17:void __attribute__((__noinline__))
        1:   18:info(struct emac *dev, unsigned long long addr) {
        1:   19:  asm("" : : : "memory");
        1:   20:}
        -:   21:
        -:   22:unsigned long long __attribute__((__noinline__))
        1:   23:get_value(const struct mop *mop) {
        1:   24:  return 0x1234567890abcdefull;
        -:   25:}
        -:   26:
        -:   27:int __attribute__((__noinline__))
        1:   28:emac_operation(struct emac *obj, struct mop *mop) {
        1:   29:  unsigned long long addr = mop->addr;
        1:   30:  int index = addr >> 2;
        -:   31:  unsigned int value, old_value;
        -:   32:
        1:   33:  if (mop->size != 4)
    #####:   34:    return 0;
        -:   35:
        1:   36:  if (index >= 23) {
    #####:   37:    if (level(obj) >= 1)
    #####:   38:      info(obj, addr);
    #####:   39:    return 0;
        -:   40:  }
        -:   41:
        1:   42:  value = get_value(mop);
        1:   43:  old_value = obj->reg[index];
        -:   44:
        1:   45:  info(obj, 0);
        -:   46:
        1:   47:  switch (index) {
    #####:   48:  case 0:
    #####:   49:    obj->reg[0] = old_value;
    #####:   50:    break;
        1:   51:  case 7:
        -:   52:  case 8:
        1:   53:    obj->reg[index] = value;
        1:   54:    break;
        -:   55:  }
        -:   56:
        1:   57:  return 0;
        -:   58:}
        -:   59:
        1:   60:int main(void) {
        1:   61:  struct emac e = {{0}};
        1:   62:  struct mop mop = {32, 4};
        -:   63:
        1:   64:  e.reg[8] = 0xdeadbeef;
        1:   65:  emac_operation(&e, &mop);
        -:   66:
        1:   67:  if (e.reg[8] != 0x90abcdef)
    #####:   68:    __builtin_abort();
        -:   69:
        1:   70:  return 0;
        -:   71:}
