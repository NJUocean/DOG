        -:    0:Source:1094.c
        -:    0:Graph:1094.gcno
        -:    0:Data:1094.gcda
        -:    0:Runs:1
        -:    1:/* { dg-do run } */
        -:    2:/* { dg-skip-if "" { *-*-* } { "*" } { "-O2" } } */
        -:    3:/* { dg-options "-fsanitize=object-size" } */
        -:    4:
        -:    5:/* Test that we instrument flexible array members.  */
        -:    6:
        -:    7:struct T {
        -:    8:  int l;
        -:    9:  int a[];
        -:   10:};
        -:   11:struct U {
        -:   12:  int l;
        -:   13:  int a[0];
        -:   14:};
        -:   15:
        1:   16:int main(void) {
        -:   17:  volatile int i;
        1:   18:  struct T *t = (struct T *)__builtin_calloc(sizeof(struct T) + sizeof(int), 1);
        1:   19:  i = t->a[1];
        -:   20:
        1:   21:  struct U *u = (struct U *)__builtin_calloc(sizeof(struct U) + sizeof(int), 1);
        1:   22:  i = u->a[1];
        1:   23:  return 0;
        -:   24:}
        -:   25:
        -:   26:/* { dg-output "load of address \[^\n\r]* with insufficient space for an object
        -:   27: * of type 'int'\[^\n\r]*(\n|\r\n|\r)" } */
        -:   28:/* { dg-output "\[^\n\r]*note: pointer points here\[^\n\r]*(\n|\r\n|\r)" } */
        -:   29:/* { dg-output "\[^\n\r]*\[^\n\r]*(\n|\r\n|\r)" } */
        -:   30:/* { dg-output "\[^\n\r]*\\^\[^\n\r]*(\n|\r\n|\r)" } */
        -:   31:/* { dg-output "\[^\n\r]*load of address \[^\n\r]* with insufficient space for
        -:   32: * an object of type 'int'\[^\n\r]*(\n|\r\n|\r)" } */
        -:   33:/* { dg-output "\[^\n\r]*note: pointer points here\[^\n\r]*(\n|\r\n|\r)" } */
        -:   34:/* { dg-output "\[^\n\r]*\[^\n\r]*(\n|\r\n|\r)" } */
        -:   35:/* { dg-output "\[^\n\r]*\\^" } */
