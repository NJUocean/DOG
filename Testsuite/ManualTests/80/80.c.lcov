    1|       |/* Test array initializion by store_by_pieces.  */
    2|       |/* { dg-do run } */
    3|       |/* { dg-options "-O2" } */
    4|       |
    5|       |struct A {
    6|       |  char c[10];
    7|       |};
    8|       |extern void abort(void);
    9|       |
   10|      5|void __attribute__((noinline)) check(struct A *a, int b) {
   11|      5|  const char *p;
   12|      5|  switch (b) {
   13|      1|  case 0:
   14|      1|    p = "abcdefghi";
   15|      1|    break;
   16|      1|  case 1:
   17|      1|    p = "j\0\0\0\0\0\0\0\0";
   18|      1|    break;
   19|      1|  case 2:
   20|      1|    p = "kl\0\0\0\0\0\0\0";
   21|      1|    break;
   22|      1|  case 3:
   23|      1|    p = "mnop\0\0\0\0\0";
   24|      1|    break;
   25|      1|  case 4:
   26|      1|    p = "qrstuvwx\0";
   27|      1|    break;
   28|      0|  default:
   29|      0|    abort();
   30|      5|  }
   31|      5|  if (__builtin_memcmp(a->c, p, 10) != 0)
   32|      0|    abort();
   33|      5|}
   34|       |
   35|      1|int main(void) {
   36|      1|  struct A a = {"abcdefghi"};
   37|      1|  check(&a, 0);
   38|      1|  struct A b = {"j"};
   39|      1|  check(&b, 1);
   40|      1|  struct A c = {"kl"};
   41|      1|  check(&c, 2);
   42|      1|  struct A d = {"mnop"};
   43|      1|  check(&d, 3);
   44|      1|  struct A e = {"qrstuvwx"};
   45|      1|  check(&e, 4);
   46|      1|  return 0;
   47|      1|}

